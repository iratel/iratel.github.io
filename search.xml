<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Spring Cloud第二代</title>
      <link href="/sc/sc2/"/>
      <url>/sc/sc2/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>: 随着Eureka不再维护，Hystrix不再开发新功能，进入维护状态。以及最近中国开源出现一些大事，预测一下2019年未来Spring Cloud生态圈中的第二代组件的组合，仅<code>代表个人看法</code>。</p><p> <img src="/banner/sc2.png" alt=""></p><h2 id="1-Spring-Cloud第一代"><a href="#1-Spring-Cloud第一代" class="headerlink" title="1. Spring Cloud第一代"></a>1. Spring Cloud第一代</h2><p>  Spring Cloud自从推出之后，给大家的感觉就是Spring Cloud做<code>它最擅长的事，也就是高度抽象和封装，强强联手整合最优东西为我所用</code>，比如Netflix开源的Eureka，Hystrix，Ribbon等。而且提供<code>多种技术选型，态度中立而选最优</code>。8天前也就是2018年11月19号左右，Netflix的开源项目Hystrix宣布状态，不再开发新功能，处于维护状态。引发朋友圈的一些思考。</p><a id="more"></a><p><img src="/images/sc/hystrix.jpg" alt=""></p><blockquote><p>虽然Eureka，Hystrix等不再继续开发或维护，但是目前来说不影响使用，不管怎么说感谢开源，向Netflix公司的开源致敬。</p></blockquote><p>  随着Spring Cloud生态圈的发展与成长，Spring Cloud陆续推出了自己的一些组件，挑选主要组件说明如下表所示:</p><table><thead><tr><th>组件</th><th>来源</th><th>说明</th></tr></thead><tbody><tr><td>Spring-cloud-openfeign</td><td>基于Feign的升级</td><td>服务之间调用的必备组件</td></tr><tr><td>spring-cloud-zuul</td><td>来源于Netflix Zuul</td><td>目前还在继续维护，但是已经有自己的Spring Cloud Gateway,不久将来逐渐淘汰</td></tr><tr><td>spring-cloud-eureka</td><td>集成于Netflix Eureka</td><td>目前还在跟随Spring Cloud版本升级维护，最终也会被替代</td></tr><tr><td>spring-cloud-config</td><td>自研</td><td>功能不足，国内使用其它配置中心替代，比如携程的Apollo</td></tr><tr><td>全链路监控(sleuth+zikpin或pinpont)</td><td>sleuth自研，其它第三方</td><td>国内目前使用最多的是skywaling等上生产</td></tr><tr><td>spring-cloud-ribbon</td><td>来源于Netflix集成</td><td>ribbon目前还在跟随Spring Cloud版本维护中，目前孵化未来替代品spring-cloud-lb</td></tr><tr><td>Spring-cloud-hystrix</td><td>来源于Netflix集成</td><td>目前还在跟随Spring Cloud版本维护中目前已经孵化spring-cloud-r4j</td></tr></tbody></table><h2 id="2-Spring-Cloud-第二代"><a href="#2-Spring-Cloud-第二代" class="headerlink" title="2. Spring Cloud 第二代"></a>2. Spring Cloud 第二代</h2><p> Spring Cloud第一代和第二代的组件组合汇总，如下表所示。</p><table><thead><tr><th></th><th>Spring Cloud第一代</th><th>Spring Cloud第二代</th></tr></thead><tbody><tr><td>网关</td><td>Spring Cloud Zuul</td><td>Spring Cloud Gateway</td></tr><tr><td>注册中心</td><td>eureka(不再更新)，Consul,ZK</td><td>阿里Nacos，拍拍贷radar等可选</td></tr><tr><td>配置中心</td><td>spring cloud config</td><td>阿里Nacos，携程Apollo，随行付Config Keeper</td></tr><tr><td>客户端软负载均衡</td><td>Ribbon</td><td>spring-cloud-loadbalancer</td></tr><tr><td>熔断器</td><td>Hystrix</td><td>spring-cloud-r4j(Resilience4J)，阿里Sentinel</td></tr></tbody></table><blockquote><p>由于Zuul性能一般，zuul 2.x(一直跳票，虽最终开源）但是Spring Cloud官方已经推出Spring Cloud gateway,Spring Cloud中国社区很久之前已经证实，Spring Cloud将不会集成zuul 2.x，也就是说在不就未来Zuul将从Spring Cloud生态圈中退出。</p></blockquote><hr><blockquote><p>ribbon由于不支持webFlux的负载均衡，Spring Cloud官方很早就在孵化器项目中孵化spring-cloud-loadbalancer，目前已经将代码合并到spring-cloud-common中，预计在Spring Cloud G版可以使用，预计2018年12月底realese。</p></blockquote><hr><blockquote><p>至于Hystrix，Netflix在2018年11月19号左右，Netflix的开源项目Hystrix宣布状态，不再开发新功能，处于维护状态，其实在之前Spring Cloud官方就在孵化spring-cloud-r4j.</p></blockquote><h2 id="3-开源项目的链接"><a href="#3-开源项目的链接" class="headerlink" title="3.开源项目的链接"></a>3.开源项目的链接</h2><p>本文所提到的开源项目链接汇总如下所示：</p><p><a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel</a></p><p><a href="https://github.com/spring-cloud-incubator/spring-cloud-r4j" target="_blank" rel="noopener">https://github.com/spring-cloud-incubator/spring-cloud-r4j</a></p><p><a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener">阿里Nacos-https://github.com/alibaba/nacos</a></p><p><a href="https://github.com/sxfad/config-keeper" target="_blank" rel="noopener">随行付Config-keeper-https://github.com/sxfad/config-keeper</a></p><p><a href="https://github.com/spring-cloud-incubator/spring-cloud-loadbalancer" target="_blank" rel="noopener">spring-cloud-loadbalancer</a></p><p><a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo</a></p><p><a href="https://github.com/apache/incubator-skywalking" target="_blank" rel="noopener">https://github.com/apache/incubator-skywalking</a></p>]]></content>
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Nacos实现Spring Cloud Gateway的动态路由</title>
      <link href="/sc/gw/gw10/"/>
      <url>/sc/gw/gw10/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本文主要介绍通过Nacos下发路由配置实现Spring Cloud Gateway的动态路由。</p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>   网关中有两个重要的概念，那就是路由配置和路由规则，路由配置是指配置某请求路径路由到指定的目的地址。而路由规则是指匹配到路由配置之后，再根据路由规则进行转发处理。<br>   Spring Cloud Gateway作为所有请求流量的入口，在实际生产环境中为了保证高可靠和高可用，尽量避免重启,需要实现Spring Cloud Gateway动态路由配置。前面章节介绍了Spring Cloud Gateway提供的两种方法去配置路由规则，但都是在Spring Cloud Gateway启动时候，就将路由配置和规则加载到内存里，无法做到不重启网关就可以动态的对应路由的配置和规则进行增加，修改和删除。本文是基于<a href="http://xujin.org/sc/gw/gw09/">Spring Cloud Gateway的动态路由实现</a><br>基础之上编写，通过Nacos配置服务下发路由配置实现动态路由。</p><a id="more"></a><h2 id="2-Spring-Cloud-Gateway简单的动态路由实现"><a href="#2-Spring-Cloud-Gateway简单的动态路由实现" class="headerlink" title="2. Spring Cloud Gateway简单的动态路由实现"></a>2. Spring Cloud Gateway简单的动态路由实现</h2><p>Spring Cloud Gateway的官方文档并没有讲如何动态配置，查看 Spring Cloud Gateway的源码，发现<code>在org.springframework.cloud.gateway.actuate.GatewayControllerEndpoint</code>类中提供了动态配置的Rest接口，但是<code>需要开启Gateway的端点</code>，而且提供的功能不是很强大。通过参考和GatewayControllerEndpoint相关的代码，可以自己编码实际动态路由配置。<br>下面通过案例的方式去讲解怎么通Nacos实现Spring Cloud Gateway的动态路由。案例工程如spring-cloud-gateway-nacos所示。</p><blockquote><p>代码地址:<a href="https://github.com/SpringCloud/spring-cloud-gateway-nacos" target="_blank" rel="noopener">https://github.com/SpringCloud/spring-cloud-gateway-nacos</a></p></blockquote><h2 id="3-简单动态路由的实现"><a href="#3-简单动态路由的实现" class="headerlink" title="3. 简单动态路由的实现"></a>3. 简单动态路由的实现</h2><h3 id="3-1-新建Maven工程sc-gateway-server"><a href="#3-1-新建Maven工程sc-gateway-server" class="headerlink" title="3.1 新建Maven工程sc-gateway-server"></a>3.1 新建Maven工程sc-gateway-server</h3><p>  配置主要的核心依赖如代码清单所示：<br>  代码清单: spring-cloud-gateway-nacos/sc-gateway-server/pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.nacos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="3-2-根据Spring-Cloud-Gateway的路由模型定义数据传输模型"><a href="#3-2-根据Spring-Cloud-Gateway的路由模型定义数据传输模型" class="headerlink" title="3.2 根据Spring Cloud Gateway的路由模型定义数据传输模型"></a>3.2 根据Spring Cloud Gateway的路由模型定义数据传输模型</h3><p> 分别创建GatewayRouteDefinition.java, GatewayPredicateDefinition.java, GatewayFilterDefinition.java这三个类。<br>(1) 创建路由定义模型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayRouteDefinition</span> </span>&#123;</span><br><span class="line">    <span class="comment">//路由的Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">//路由断言集合配置</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;GatewayPredicateDefinition&gt; predicates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//路由过滤器集合配置</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;GatewayFilterDefinition&gt; filters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//路由规则转发的目标uri</span></span><br><span class="line">    <span class="keyword">private</span> String uri;</span><br><span class="line">    <span class="comment">//路由执行的顺序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> order = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//此处省略get和set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)创建过滤器定义模型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayFilterDefinition</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Filter Name</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//对应的路由规则</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; args = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//此处省略Get和Set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)创建路由断言定义模型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayPredicateDefinition</span> </span>&#123;</span><br><span class="line">    <span class="comment">//断言对应的Name</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//配置的断言规则</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; args = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//此处省略Get和Set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-编写动态路由实现类"><a href="#3-3-编写动态路由实现类" class="headerlink" title="3.3 编写动态路由实现类"></a>3.3 编写动态路由实现类</h3><p>编写DynamicRouteServiceImpl并实现ApplicationEventPublisherAware接口，代码如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicRouteServiceImpl</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RouteDefinitionWriter routeDefinitionWriter;</span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line">    <span class="comment">//增加路由</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(RouteDefinition definition)</span> </span>&#123;</span><br><span class="line">        routeDefinitionWriter.save(Mono.just(definition)).subscribe();</span><br><span class="line">        <span class="keyword">this</span>.publisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新路由</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(RouteDefinition definition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.routeDefinitionWriter.delete(Mono.just(definition.getId()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"update fail,not find route  routeId: "</span>+definition.getId();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            routeDefinitionWriter.save(Mono.just(definition)).subscribe();</span><br><span class="line">            <span class="keyword">this</span>.publisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"update route  fail"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除路由</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ResponseEntity&lt;Object&gt;&gt; delete(String id) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.routeDefinitionWriter.delete(Mono.just(id))</span><br><span class="line">                .then(Mono.defer(() -&gt; Mono.just(ResponseEntity.ok().build())))</span><br><span class="line">                .onErrorResume(t -&gt; t <span class="keyword">instanceof</span> NotFoundException, t -&gt; Mono.just(ResponseEntity.notFound().build()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-编写Nacos监听接收下发的路由配置"><a href="#3-4-编写Nacos监听接收下发的路由配置" class="headerlink" title="3.4 编写Nacos监听接收下发的路由配置"></a>3.4 编写Nacos监听接收下发的路由配置</h3><h3 id="3-4-1-使用Nacos监听下发的配置"><a href="#3-4-1-使用Nacos监听下发的配置" class="headerlink" title="3.4.1 使用Nacos监听下发的配置"></a>3.4.1 使用Nacos监听下发的配置</h3><p>监听Nacos Config Server下发配置的代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicRouteServiceImplByNacos</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DynamicRouteServiceImpl dynamicRouteService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicRouteServiceImplByNacos</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        dynamicRouteByNacosListener(<span class="string">"sc-gateway"</span>,<span class="string">"xujin_test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听Nacos Server下发的动态路由配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> group</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dynamicRouteByNacosListener</span> <span class="params">(String dataId, String group)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ConfigService configService=NacosFactory.createConfigService(<span class="string">"127.0.0.1:8848"</span>);</span><br><span class="line">            String content = configService.getConfig(dataId, group, <span class="number">5000</span>);</span><br><span class="line">            System.out.println(content);</span><br><span class="line">            configService.addListener(dataId, group, <span class="keyword">new</span> Listener()  &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveConfigInfo</span><span class="params">(String configInfo)</span> </span>&#123;</span><br><span class="line">                    RouteDefinition definition= JSON.parseObject(configInfo,RouteDefinition.class);</span><br><span class="line">                    dynamicRouteService.update(definition);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Executor <span class="title">getExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NacosException e) &#123;</span><br><span class="line">            <span class="comment">//todo 提醒:异常自行处理此处省略</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-2-两种方式创建ConfigService"><a href="#3-4-2-两种方式创建ConfigService" class="headerlink" title="3.4.2 两种方式创建ConfigService"></a>3.4.2 两种方式创建ConfigService</h4><p>使用两种方式创建com.alibaba.nacos.api.config.ConfigService</p><ul><li>1.构建Properties创建</li></ul><p>使用createConfigService(Properties properties)，代码如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.put(<span class="string">"nacos.server-addr"</span>, <span class="string">""</span>);</span><br><span class="line">            properties.put(PropertyKeyConst.SERVER_ADDR, <span class="string">"127.0.0.1:8848"</span>);</span><br><span class="line">            ConfigService configService=NacosFactory.createConfigService(properties);</span><br></pre></td></tr></table></figure></p><blockquote><p>注意:PropertyKeyConst是com.alibaba.nacos.api.PropertyKeyConst</p></blockquote><ul><li>2.只传递Nacos Config Server的地址</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConfigService configService=NacosFactory.createConfigService(<span class="string">"127.0.0.1:8848"</span>);</span><br></pre></td></tr></table></figure><h2 id="4-使用Nacos下发配置"><a href="#4-使用Nacos下发配置" class="headerlink" title="4. 使用Nacos下发配置"></a>4. 使用Nacos下发配置</h2><h3 id="4-1-Nacos概述"><a href="#4-1-Nacos概述" class="headerlink" title="4.1 Nacos概述"></a>4.1 Nacos概述</h3><p>   Naocs由阿里开源，Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。<br>   Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。github地址:<a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener">https://github.com/alibaba/nacos</a></p><blockquote><p>更多Nacos的介绍，请访问官方网站:<a href="https://nacos.io/" target="_blank" rel="noopener">https://nacos.io/</a></p></blockquote><h3 id="4-2-在IDE中启动-Nacos"><a href="#4-2-在IDE中启动-Nacos" class="headerlink" title="4.2 在IDE中启动 Nacos"></a>4.2 在IDE中启动 Nacos</h3><p>访问<a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener">https://github.com/alibaba/nacos</a> ,使用Git克隆Nacos代码，直接导入到IDEA中，如下所示设置启动参数，直接启动。</p><p><img src="/images/mw/nacos/nacos0.jpg" alt=""></p><blockquote><p>从IDE中启动Nacos是我比较推荐的方式，因为可以随时Debug Nacos任何代码，其它启动方式请参考官网。</p></blockquote><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h2><h3 id="5-1-Nacos中下发Spring-Cloud-Gateway的路由配置"><a href="#5-1-Nacos中下发Spring-Cloud-Gateway的路由配置" class="headerlink" title="5.1  Nacos中下发Spring Cloud Gateway的路由配置"></a>5.1  Nacos中下发Spring Cloud Gateway的路由配置</h3><ul><li>1.打开浏览器访问URL:<a href="http://localhost:8848/nacos/index.html" target="_blank" rel="noopener">http://localhost:8848/nacos/index.html</a> ,Nacos的管控平台如下所示:</li></ul><p><img src="/images/mw/nacos/nacos1.jpg" alt=""></p><ul><li>2.在Nacos的配置列表点击<code>+</code>按钮，下发Spring Cloud Gateway的路由配置，如下所示:</li></ul><p><img src="/images/mw/nacos/nacos2.jpg" alt=""></p><hr><p>用于测试的示例数据，如下所示:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"filters"</span>: [],</span><br><span class="line"><span class="attr">"id"</span>: <span class="string">"jd_route"</span>,</span><br><span class="line"><span class="attr">"order"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"predicates"</span>: [&#123;</span><br><span class="line"><span class="attr">"args"</span>: &#123;</span><br><span class="line"><span class="attr">"pattern"</span>: <span class="string">"/jd"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Path"</span></span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">"uri"</span>: <span class="string">"http://www.jd.com"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/mw/nacos/nacos3.jpg" alt=""><br><img src="/images/mw/nacos/nacos4.jpg" alt=""></p><h3 id="5-2-启动sc-gateway-server"><a href="#5-2-启动sc-gateway-server" class="headerlink" title="5.2 启动sc-gateway-server"></a>5.2 启动sc-gateway-server</h3><ul><li>1.Debug启动sc-gateway-server,调试截图如下所示:</li></ul><p><img src="/images/mw/nacos/nacos5.jpg" alt=""></p><ul><li>2.通过Spring Cloud gateway的端点，查看路由信息</li></ul><p><img src="/images/mw/nacos/nacos6.jpg" alt=""></p><ul><li>3.通过访问<a href="http://localhost:8080/jd" target="_blank" rel="noopener">http://localhost:8080/jd</a> ,可以转发到京东商城主页</li></ul><h3 id="5-3-更新路由配置"><a href="#5-3-更新路由配置" class="headerlink" title="5.3 更新路由配置"></a>5.3 更新路由配置</h3><ul><li>1.通过Nacos下发配置，修改Spring Cloud Gateway的动态路由规则</li></ul><p><img src="/images/mw/nacos/nacos7.jpg" alt=""></p><ul><li>2.查看访问Spring Cloud gateway的端点配置，可以看到动态路由修改如下:</li></ul><p><img src="/images/mw/nacos/nacos8.jpg" alt=""></p><ul><li>3.通过访问<a href="http://localhost:8080/jd" target="_blank" rel="noopener">http://localhost:8080/jd</a> ,可以转发到百度相关页面</li></ul>]]></content>
      
      <categories>
          
          <category> Spring Cloud Gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Gateway </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Gateway的动态路由实现</title>
      <link href="/sc/gw/gw09/"/>
      <url>/sc/gw/gw09/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本文主要介绍了Spring Cloud Gateway的动态路由的简单实现方式。</p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>   网关中有两个重要的概念，那就是路由配置和路由规则，路由配置是指配置某请求路径路由到指定的目的地址。而路由规则是指匹配到路由配置之后，再根据路由规则进行转发处理。<br>   Spring Cloud Gateway作为所有请求流量的入口，在实际生产环境中为了保证高可靠和高可用，尽量避免重启,需要实现Spring Cloud Gateway动态路由配置。前面章节介绍了Spring Cloud Gateway提供的两种方法去配置路由规则，但都是在Spring Cloud Gateway启动时候，就将路由配置和规则加载到内存里，无法做到不重启网关就可以动态的对应路由的配置和规则进行增加，修改和删除。<code>本篇文章简单介绍如何实现Spring Cloud Gateway的动态路由。</code><br><a id="more"></a></p><h2 id="2-Spring-Cloud-Gateway简单的动态路由实现"><a href="#2-Spring-Cloud-Gateway简单的动态路由实现" class="headerlink" title="2. Spring Cloud Gateway简单的动态路由实现"></a>2. Spring Cloud Gateway简单的动态路由实现</h2><p>Spring Cloud Gateway的官方文档并没有讲如何动态配置，查看 Spring Cloud Gateway的源码，发现<code>在org.springframework.cloud.gateway.actuate.GatewayControllerEndpoint</code>类中提供了动态配置的Rest接口，但是<code>需要开启Gateway的端点</code>，而且提供的功能不是很强大。通过参考和GatewayControllerEndpoint相关的代码，可以自己编码实际动态路由配置。<br>下面通过案例的方式去讲解怎么实现Gateway的动态路由配置。案例工程如ch18-7-gateway所示。</p><blockquote><p>代码地址:<a href="https://github.com/SpringCloud/spring-cloud-code/blob/master/ch18-7/ch18-7-gateway" target="_blank" rel="noopener">https://github.com/SpringCloud/spring-cloud-code/blob/master/ch18-7/ch18-7-gateway</a></p></blockquote><h2 id="3-简单动态路由的实现"><a href="#3-简单动态路由的实现" class="headerlink" title="3. 简单动态路由的实现"></a>3. 简单动态路由的实现</h2><h3 id="3-1-新建Maven工程ch18-7-gateway"><a href="#3-1-新建Maven工程ch18-7-gateway" class="headerlink" title="3.1 新建Maven工程ch18-7-gateway"></a>3.1 新建Maven工程ch18-7-gateway</h3><p>  配置主要的核心依赖如代码清单18-33所示：<br>  代码清单: ch18-7/ch18-7-gateway/pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="3-2-根据Spring-Cloud-Gateway的路由模型定义数据传输模型"><a href="#3-2-根据Spring-Cloud-Gateway的路由模型定义数据传输模型" class="headerlink" title="3.2 根据Spring Cloud Gateway的路由模型定义数据传输模型"></a>3.2 根据Spring Cloud Gateway的路由模型定义数据传输模型</h3><p> 分别创建GatewayRouteDefinition.java, GatewayPredicateDefinition.java, GatewayFilterDefinition.java这三个类。<br>(1) <code>创建路由定义模型</code>如下代码清单18-34所示：<br>代码清单 18-34: ch18-7/ch18-7-gateway/src/main/java/cn/springcloud/book/gateway/model/GatewayRouteDefinition.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayRouteDefinition</span> </span>&#123;</span><br><span class="line">    <span class="comment">//路由的Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">//路由断言集合配置</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;GatewayPredicateDefinition&gt; predicates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//路由过滤器集合配置</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;GatewayFilterDefinition&gt; filters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//路由规则转发的目标uri</span></span><br><span class="line">    <span class="keyword">private</span> String uri;</span><br><span class="line">    <span class="comment">//路由执行的顺序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> order = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//此处省略get和set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)<code>创建过滤器定义模型</code>,代码如代码清单18-35所示：<br>代码清单18-35: ch18-7/ch18-7-gateway/src/main/java/cn/springcloud/book/gateway/model/GatewayFilterDefinition.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayFilterDefinition</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Filter Name</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//对应的路由规则</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; args = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//此处省略Get和Set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)<code>路由断言定义模型</code>，代码如代码清单18-36所示:<br>代码清单18-36: ch18-7/ch18-7-gateway/src/main/java/cn/springcloud/book/gateway/model/GatewayPredicateDefinition.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayPredicateDefinition</span> </span>&#123;</span><br><span class="line">    <span class="comment">//断言对应的Name</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//配置的断言规则</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; args = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//此处省略Get和Set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-编写动态路由实现类"><a href="#3-3-编写动态路由实现类" class="headerlink" title="3.3 编写动态路由实现类"></a>3.3 编写动态路由实现类</h3><p>编写DynamicRouteServiceImpl并实现ApplicationEventPublisherAware接口，代码如代码清单18-37所示: ch18-37/ch18-7-gateway/src/main/java/cn/springcloud/book/gateway/route/DynamicRouteServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicRouteServiceImpl</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RouteDefinitionWriter routeDefinitionWriter;</span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line">    <span class="comment">//增加路由</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(RouteDefinition definition)</span> </span>&#123;</span><br><span class="line">        routeDefinitionWriter.save(Mono.just(definition)).subscribe();</span><br><span class="line">        <span class="keyword">this</span>.publisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新路由</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(RouteDefinition definition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.routeDefinitionWriter.delete(Mono.just(definition.getId()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"update fail,not find route  routeId: "</span>+definition.getId();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            routeDefinitionWriter.save(Mono.just(definition)).subscribe();</span><br><span class="line">            <span class="keyword">this</span>.publisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"update route  fail"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除路由</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ResponseEntity&lt;Object&gt;&gt; delete(String id) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.routeDefinitionWriter.delete(Mono.just(id))</span><br><span class="line">                .then(Mono.defer(() -&gt; Mono.just(ResponseEntity.ok().build())))</span><br><span class="line">                .onErrorResume(t -&gt; t <span class="keyword">instanceof</span> NotFoundException, t -&gt; Mono.just(ResponseEntity.notFound().build()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-编写Rest接口"><a href="#3-4-编写Rest接口" class="headerlink" title="3.4 编写Rest接口"></a>3.4 编写Rest接口</h3><p>编写RouteController类的提供Rest接口，用于动态路由配置。代码如代码清单18-38所示:<br>代码清单 18-38: ch18-7/ch18-7-gateway/src/main/java/cn/springcloud/book/gateway/controller/RouteController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/route"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DynamicRouteServiceImpl dynamicRouteService;</span><br><span class="line">    <span class="comment">//增加路由</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(@RequestBody GatewayRouteDefinition gwdefinition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RouteDefinition definition = assembleRouteDefinition(gwdefinition);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.dynamicRouteService.add(definition);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"succss"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除路由</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/routes/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ResponseEntity&lt;Object&gt;&gt; delete(<span class="meta">@PathVariable</span> String id) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.dynamicRouteService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新路由</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(@RequestBody GatewayRouteDefinition gwdefinition)</span> </span>&#123;</span><br><span class="line">        RouteDefinition definition = assembleRouteDefinition(gwdefinition);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.dynamicRouteService.update(definition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-配置application-yml文件"><a href="#3-5-配置application-yml文件" class="headerlink" title="3.5 配置application.yml文件"></a>3.5 配置application.yml文件</h3><p>在application.yml文件配置应用的配置信息，并开启Spring Cloud Gateway对外提供的端点Rest接口。代码如代码清单18-39所示:<br>代码清单 18-39: ch18-7/ch18-7-gateway/src/main/resources/application.yml<br>配置输出日志如下所示:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置输出日志</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">org.springframework.cloud.gateway:</span> <span class="string">TRACE</span></span><br><span class="line">    <span class="string">org.springframework.http.server.reactive:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="string">org.springframework.web.reactive:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="string">reactor.ipc.netty:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="comment">#开启端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">'*'</span></span><br><span class="line"><span class="attr">  security:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><h3 id="3-6-启动ch18-7-gateway应用测试"><a href="#3-6-启动ch18-7-gateway应用测试" class="headerlink" title="3.6 启动ch18-7-gateway应用测试"></a>3.6 启动ch18-7-gateway应用测试</h3><p>(1) 启动ch18-7-gateway应用之后，由于开启了端点，首先打开浏览器访问端点URL:<br><a href="http://localhost:8080/actuator/gateway/routes" target="_blank" rel="noopener">http://localhost:8080/actuator/gateway/routes</a>  ,查看路由信息返回为空，如下图所示:</p><p><img src="/images/sc-g-route/1.png" alt="空的路由信息"></p><p>(2)打开PostMan，访问<a href="http://localhost:8080/route/add" target="_blank" rel="noopener">http://localhost:8080/route/add</a>, 发起Post请求，如下图所示,返回success说明向Gateway增加路由配置成功。<br><img src="/images/sc-g-route/2.png" alt="动态添加路由成功"></p><p> 然后再打开PostMan访问端点URL:<a href="http://localhost:8080/actuator/gateway/routes" target="_blank" rel="noopener">http://localhost:8080/actuator/gateway/routes</a> ,<br> 查看路由信息返回如下图所示，可以看到已经添加的路由配置。<br><img src="/images/sc-g-route/3.png" alt="路由端点返回结果"></p><p>(3) 打开浏览器访问<a href="http://localhost:8080/jd" target="_blank" rel="noopener">http://localhost:8080/jd</a>, 可以正常转发<a href="https://www.jd.com/对应的京东商城首页。" target="_blank" rel="noopener">https://www.jd.com/对应的京东商城首页。</a><br>(4) 通过访问<a href="http://localhost:8080/route/update" target="_blank" rel="noopener">http://localhost:8080/route/update</a>, 对id为jd_route的路由更新配置，如下图所示：<br><img src="/images/sc-g-route/4.png" alt="更新路由配置"></p><p> 然后再访问路由端点URL,发现路由配置已经被更新，如下图所示:<br><img src="/images/sc-g-route/5.png" alt="查看路由端点"></p><p>然后通过浏览器访问<a href="http://localhost:8080/taobao" target="_blank" rel="noopener">http://localhost:8080/taobao</a> ,可以成功转发到淘宝网。<br>(5) 通过访问http: //localhost:8080/route/delete/jd_route,其中的id为路由对应的id，删除路由结果如下图所示:<br><img src="/images/sc-g-route/6.png" alt="删除路由成功"></p><h2 id="4-Spring-Cloud-Gateway推荐文章"><a href="#4-Spring-Cloud-Gateway推荐文章" class="headerlink" title="4.Spring Cloud Gateway推荐文章"></a>4.Spring Cloud Gateway推荐文章</h2><p><a href="http://xujin.org/sc/gw/gw08/">Spring Cloud Gateway中的权重路由</a><br><a href="http://xujin.org/sc/gw/gw07/">Spring Cloud Gateway中的GatewayFilter和GlobalFilter</a><br><a href="http://xujin.org/sc/gw/gw06/">Spring Cloud Gateway只有Pre和POST两种类型的Filter</a><br><a href="http://xujin.org/sc/gw/gw05/">Spring Cloud Gateway基于服务发现的默认路由规则</a><br><a href="http://xujin.org/sc/gw/gw04/">Spring Cloud Gateway的Before路由断言工厂</a><br><a href="http://xujin.org/sc/gw/gw03/">Spring Cloud Gateway的After路由断言工厂</a><br><a href="http://xujin.org/sc/gw/gw02/">Spring Cloud Gateway揭秘之处理请求流程</a><br><a href="http://xujin.org/sc/gw/gw-01/">Spring Cloud Gateway入门案例</a></p><h2 id="5-《重新定义Spring-Cloud实战》中的Spring-Cloud-Gateway"><a href="#5-《重新定义Spring-Cloud实战》中的Spring-Cloud-Gateway" class="headerlink" title="5.《重新定义Spring Cloud实战》中的Spring Cloud Gateway"></a>5.《重新定义Spring Cloud实战》中的Spring Cloud Gateway</h2><p>第17章Spring Cloud Gateway上篇399<br>17.1 Spring Cloud Gateway概述399<br>17.1.1 什么是Spring Cloud Gateway399<br>17.1.2 Spring Cloud Gateway的核心概念399<br>17.2 Spring Cloud Gateway的工作原理400<br>17.3 Spring Cloud Gateway入门案例401<br>17.4 Spring Cloud Gateway的路由断言404<br>17.4.1 After路由断言工厂404<br>17.4.2 Before路由断言工厂406<br>17.4.3 Between路由断言工厂406<br>17.4.4 Cookie路由断言工厂407<br>17.4.5 Header路由断言工厂408<br>17.4.6 Host路由断言工厂410<br>17.4.7 Method路由断言工厂411<br>17.4.8 Query路由断言工厂411<br>17.4.9 RemoteAddr路由断言工厂412<br>17.5 Spring Cloud Gateway的内置Filter413<br>17.5.1 AddRequestHeader过滤器工厂413<br>17.5.2 AddRequestParameter过滤器413<br>17.5.3 RewritePath过滤器414<br>17.5.4 AddResponseHeader过滤器415<br>17.5.5 StripPrefix过滤器416<br>17.5.6 Retry过滤器417<br>17.5.7 Hystrix过滤器418<br>17.6 本章小结420<br>第18章 Spring Cloud Gateway下篇421<br>18.1 Gateway基于服务发现的路由规则421<br>18.1.1 Gateway的服务发现路由概述421<br>18.1.2 服务发现的路由规则案例422<br>18.2 Gateway Filter和Global Filter425<br>18.2.1 Gateway Filter和Global Filter概述425<br>18.2.2 自定义Gateway Filter案例425<br>18.2.3 自定义Global Filter案例427<br>18.3 Spring Cloud Gateway实战428<br>18.3.1 Spring Cloud Gateway权重路由428<br>18.3.2 Spring Cloud Gateway中Https的使用技巧431<br>18.3.3 Spring Cloud Gateway集成Swagger436<br>18.3.4 Spring Cloud Gateway限流442<br>18.3.5 Spring Cloud Gateway的动态路由450<br>18.4 Spring Cloud Gateway源码篇458<br>18.4.1 Spring Cloud Gateway的处理流程458<br>18.4.2 Gateway中ServerWebExchange构建分析459<br>18.4.3 DispatcherHandler源码分析460<br>18.4.4 RoutePredicateHandlerMapping源码分析461<br>18.4.5 FilteringWebHandler源码分析462<br>18.4.6 执行Filter源码分析463<br>18.5 本章小结465</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">├── ch17-1</span><br><span class="line">│   ├── ch17-1-1-gateway</span><br><span class="line">│   ├── ch17-1-2-gateway</span><br><span class="line">│   ├── ch17-1.iml</span><br><span class="line">│   └── pom.xml</span><br><span class="line">├── ch17-2</span><br><span class="line">│   ├── ch17-2-1-gateway</span><br><span class="line">│   ├── ch17-2-2-gateway</span><br><span class="line">│   ├── ch17-2-3-gateway</span><br><span class="line">│   ├── ch17-2-4-gateway</span><br><span class="line">│   ├── ch17-2-5-gateway</span><br><span class="line">│   ├── ch17-2-6-gateway</span><br><span class="line">│   ├── ch17-2-7-gateway</span><br><span class="line">│   ├── ch17-2-8-gateway</span><br><span class="line">│   ├── ch17-2-9-gateway</span><br><span class="line">│   ├── ch17-2-service</span><br><span class="line">│   ├── ch17-2.iml</span><br><span class="line">│   └── pom.xml</span><br><span class="line">├── ch17-3</span><br><span class="line">│   ├── ch17-3-1-gateway</span><br><span class="line">│   ├── ch17-3-2-gateway</span><br><span class="line">│   ├── ch17-3-3-gateway</span><br><span class="line">│   ├── ch17-3-4-gateway</span><br><span class="line">│   ├── ch17-3-5-gateway</span><br><span class="line">│   ├── ch17-3-6-gateway</span><br><span class="line">│   ├── ch17-3-7-gateway</span><br><span class="line">│   ├── ch17-3-service</span><br><span class="line">│   ├── ch17-3.iml</span><br><span class="line">│   └── pom.xml</span><br><span class="line">├── ch18-1</span><br><span class="line">│   ├── ch18-1-consumer</span><br><span class="line">│   ├── ch18-1-eureka</span><br><span class="line">│   ├── ch18-1-gateway</span><br><span class="line">│   ├── ch18-1-provider</span><br><span class="line">│   ├── ch18-1.iml</span><br><span class="line">│   └── pom.xml</span><br><span class="line">├── ch18-2</span><br><span class="line">│   ├── ch18-2-gateway</span><br><span class="line">│   ├── ch18-2-provider</span><br><span class="line">│   ├── ch18-2.iml</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── reademe.txt</span><br><span class="line">├── ch18-3</span><br><span class="line">│   ├── ch18-3-gateway</span><br><span class="line">│   ├── ch18-3-provider</span><br><span class="line">│   ├── ch18-3.iml</span><br><span class="line">│   └── pom.xml</span><br><span class="line">├── ch18-4</span><br><span class="line">│   ├── ch18-4-eureka</span><br><span class="line">│   ├── ch18-4-gateway-https</span><br><span class="line">│   ├── ch18-4-service-a</span><br><span class="line">│   ├── ch18-4-service-b</span><br><span class="line">│   ├── ch18-4.iml</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── reademe.md</span><br><span class="line">├── ch18-5</span><br><span class="line">│   ├── ch18-5-eureka</span><br><span class="line">│   ├── ch18-5-gateway</span><br><span class="line">│   ├── ch18-5-service</span><br><span class="line">│   ├── ch18-5.iml</span><br><span class="line">│   └── pom.xml</span><br><span class="line">├── ch18-6</span><br><span class="line">│   ├── ch18-6-1-gateway</span><br><span class="line">│   ├── ch18-6-2-gateway</span><br><span class="line">│   ├── ch18-6-3-gateway</span><br><span class="line">│   ├── ch18-6-provider</span><br><span class="line">│   ├── ch18-6.iml</span><br><span class="line">│   └── pom.xml</span><br><span class="line">├── ch18-7</span><br><span class="line">│   ├── ch18-7-gateway</span><br><span class="line">│   ├── ch18-7.iml</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── readme.md</span><br></pre></td></tr></table></figure><blockquote><p>Spring Cloud Gateway所有示例代码地址:<a href="https://github.com/SpringCloud/spring-cloud-code" target="_blank" rel="noopener">https://github.com/SpringCloud/spring-cloud-code</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> Spring Cloud Gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Gateway </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《重新定义Spring Cloud实战》</title>
      <link href="/re/01/"/>
      <url>/re/01/</url>
      <content type="html"><![CDATA[<p><strong>摘要:</strong> 今天是2018年9月24号中秋节，祝福大家中秋节快乐，本文主要介绍《重新定义Spring Cloud实战》。</p><a id="more"></a><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>   随着互联网的快速普及，云计算近年来得到蓬勃发展，企业的IT环境和架构体系也逐渐发生变革，其中最典型的就是<code>过去的单体应用架构发展为当今流行的微服务架构</code>。微服务是一种架构风格，其优势是为软件应用开发带来很大的便利，让敏捷开发和复杂的企业应用快速持续交付成为可能。随着微服务架构的流行，很多企业纷纷使用微服务架构来搭建新的系统或者对历史系统进行重构，但是微服务架构的实施和落地会面临很大的挑战。<code>虽然微服务架构的解决方案很多，但是对于如何真正落地微服务架构，目前还没有公认的技术标准和规范</code>。幸运的是，业界已经有一些很有影响力的开源微服务解决方案，<code>比如2015年年初，Spring团队推出的Spring Cloud，其目标是成为Java领域微服务架构落地的标准。Spring Cloud经过高速迭代和发展，至今已经成为Java领域落地微服务架构的推荐解决方案，为企业IT架构变革保驾护航</code>。</p><p>   Spring Cloud是一个<code>优质的开源项目</code>，<code>它的稳健发展离不开众多开发人员的实践与反馈，开发人员通过一个社区化的平台去交流学习从而使Spring Cloud逐渐完善</code>。Spring Cloud发展到2016年，得到国内越来越多的人的关注，但是相应的学习交流平台和材料比较分散，这阻碍了Spring Cloud在我国的普及和发展。因此Spring Cloud中国社区应运而生。Spring Cloud中国社区 (<a href="http://springcloud.cn" target="_blank" rel="noopener">http://springcloud.cn</a>) 是国内基于Spring Cloud微服务体系创建的非盈利技术社区，是专为Spring Boot或Spring Cloud技术人员提供分享和交流服务的平台，目的是推动Spring Cloud在中国的普及和应用。</p><h2 id="2-背景概述"><a href="#2-背景概述" class="headerlink" title="2.背景概述"></a>2.背景概述</h2><p>   Spring Cloud中国社区(<a href="http://springcloud.cn" target="_blank" rel="noopener">http://springcloud.cn</a>) 是国内基于Spring Cloud微服务体系创建的非盈利技术社区。自2016年10月份创建以来，在北京，上海，深圳，成都等地举办了多次技术沙龙，提供技术交流平台,帮助数万开发者快速学习Spring Cloud并用于生产。为更好的推动Spring Cloud在中国的发展，让更多的开发者受益。社区针对Spring Cloud在国内的使用情况，结合国内企业使用Spring Cloud落地微服务架构遇到的问题给出实战解决方案，特推出此书。《重新定义Spring Cloud实战》封面如下图所示:</p><p><img src="/images/re/fm.png" width="350px" height="450px"></p><p>   本书基于<code>Spring Cloud的Finchley.RELEASE版编写</code>，由7位作者著，<code>共25章，共670页</code>，我们7位作者并不是Spring Cloud微服务落地的架构专家，我们只是Spring Cloud微服务架构的实践者，把我们自己的实践经验分享给大家，帮助大家解决学习和工作上遇到的问题。<code>三人行，必有我师焉，由于我们学识有限，难免会有不足之处，还请读者多多包涵，一起交流学习，共同进步</code>。</p><p><img src="/images/re/gmqd.png" width="350px" height="450px"></p><h2 id="3-本书介绍"><a href="#3-本书介绍" class="headerlink" title="3.本书介绍"></a>3.本书介绍</h2><h3 id="3-1-填坑记录"><a href="#3-1-填坑记录" class="headerlink" title="3.1 填坑记录"></a>3.1 填坑记录</h3><p><img src="/images/re/tkjl.png"></p><h3 id="3-2-BATJ部分书评"><a href="#3-2-BATJ部分书评" class="headerlink" title="3.2 BATJ部分书评"></a>3.2 BATJ部分书评</h3><p>过去十几年里，广义的“微服务”架构以其小团队快速创建和迭代服务带来的架构弹性、扩展性、敏捷性，天然匹配了互联网业务快速发展和变化的特点，在各大互联网公司取得了巨大的成功。时至云原生应用时代，已不再是是否采用微服务架构的问题，而是何时采用以及如何在生产上实战的问题。本书将如何基于Spring Cloud生态体系进行微服务实战的方方面面的细节都涵盖了，，从这个意义上来讲，确实做到了“重新定义”。</p><p><code>—— 坤宇 Nacos开源项目创始人/阿里巴巴高级技术专家</code></p><p>微服务以敏捷为目标，以降低复杂的系统结构为基础，带给我们更好的系统可用性和稳定性。Spring Cloud作为一套完善的微服务治理的典型框架，涵盖了微服务治理的方方面面。本书详细介绍了Spring Cloud的每一个核心模块，以理论与实际相结合的方式，透彻地讲述了Spring Cloud的精髓，是每一位奋战在服务化领域一线的工程师、架构师的*选技术书籍。</p><p><code>——李艳鹏 蚂蚁金服高级技术专家/《分布式服务架构》《可伸缩服务架构》作者</code></p><p>本书可以说是后端架构师的进阶宝典，全面地讲解了如何打造一套强大、健壮的微服务体系，深入分析了涉及到的各个组件。*难得的是，书中结合了作者多年积累的架构经验，分析了各种组件适用的场景，平实地说明了实际使用中的各种考量和细节优化，简直是奋斗在一线的工程师的心血结晶。任何想掌握大型后端架构的工程师，无论使用什么技术框架，都能从本书获益匪浅。</p><p><code>——李双涛 饿了么中间件资深架构师</code></p><p>Spring Cloud已然成为Java领域应用微服务化的*选框架，但国内一直缺少全面论述Spring Cloud商用实践相关的书籍。本书围绕Spring Cloud框架中的服务注册发现、服务路由、服务网关、分布式配置、服务治理、容器化及微服务设计等关键领域进行了深入浅出的讲解，并给予了大量的真实应用案例，新手和老手都可以从中受益良多。作者作为Spring Cloud中国的资深专家，对于Spring Cloud及微服务有着深刻的架构和实战经验，值得信赖。</p><p><code>——单家骏 腾讯中间件高级工程师</code></p><p>在微服务体系中，Spring Cloud是目前最热门的构建微服务体系的解决方案，它提供了构建微服务架构的一些基础设施。本书内容上覆盖了Spring Cloud的一些主要组件，不仅在如何使用上做了详细的介绍，也从原理上深入浅出地剖析了其中的技术要点，同时部分组件也跟周边的一些开源项目进行了对比，且提供了一些原理分析和相关的示例，是一本不可多得的Spring Cloud实战书籍。新手和有微服务实践经验的读者都能从书中得到一些不一样的收获。<br>     <code>——张艺辰 腾讯高级研发工程师</code></p><p>本书不仅对Spring Cloud各核心组件进行了细致入微的介绍，同时也跳出了框架本身，为微服务的实施和分布式架构所面临的基本问题交出了Spring Cloud式答卷，是开发者快速掌握Spring Cloud技术栈的神兵利器。不仅如此，本书还凝聚着Spring Cloud中国社区的智慧结晶，让我们看到了国人在开源领域的研发力量， 可喜可贺。<br>     <code>——王鸿飞 百度高级研发工程师</code></p><p>在微服务如火如荼的今天，各种微服务框架层出不穷，而Spring Cloud无疑是那颗最闪亮的星。从Spring Framework到Spring Boot，再到如今的Spring Cloud，Spring全家桶给众多程序员带来了真正的春天。由于分布式和服务化是极具挑战的任务，因此Spring Cloud也不可避免的愈加复杂。Spring CLoud中国社区为Spring Cloud的普及做出了巨大的贡献，并迅速的降低了语言问题所带来的学习门槛。这本书由Spring CLoud中国社区倾力打造，书籍涵盖了Spring Cloud的服务发现、网关、熔断器、配置、全链路监控等最核心组件，并很接地气地详述了Dubbo向Spring Cloud迁移以及Spring Cloud与分布式事务相关内容，值得一看。<br><code>——张亮 京东金融数据研发负责人/分布式数据库中间件Sharding-Sphere负责人</code></p><p>Spring Cloud提供了完整的微服务技术体系，可以帮助开发者快速地实现架构升级。《重新定义Spring Cloud实战》一书完整地介绍了Spring Cloud中各个组件的使用方法并深度剖析了其中的原理，文章深入浅出帮助开发者快速掌握和理解Spring Cloud。<br><code>——李艺恒 腾讯研发工程师</code></p><h3 id="3-3-读者反馈"><a href="#3-3-读者反馈" class="headerlink" title="3.3 读者反馈"></a>3.3 读者反馈</h3><p><a href="https://github.com/SpringCloud/spring-cloud-code/issues/1" target="_blank" rel="noopener">https://github.com/SpringCloud/spring-cloud-code/issues/1</a></p><h3 id="3-4-源码相关"><a href="#3-4-源码相关" class="headerlink" title="3.4 源码相关"></a>3.4 源码相关</h3><p>书籍目录：<a href="https://github.com/SpringCloud/spring-cloud-catalog" target="_blank" rel="noopener">https://github.com/SpringCloud/spring-cloud-catalog</a></p><p>源码地址:<a href="https://github.com/SpringCloud/spring-cloud-code" target="_blank" rel="noopener">https://github.com/SpringCloud/spring-cloud-code</a></p><h3 id="3-5-内容简介"><a href="#3-5-内容简介" class="headerlink" title="3.5 内容简介"></a>3.5 内容简介</h3><p>这是一本实践与理论并重、广度与深度兼顾的Spring Cloud生产实践开发指南，由Spring Cloud中国社区倾力打造，作者来自阿里、蚂蚁金服、京东金融等企业，本书针对Spring Cloud在国内的使用情况，结合国内企业使用Spring Cloud落地微服务架构遇到的问题，提出可落地的解决方案。</p><p>本书内容有3大特色：</p><ul><li><p><code>足够广</code>：详细讲解了Spring Cloud的核心常用组件以及Spring Cloud的增强生态，针对生产实践中常见问题给出可落地的最佳实践方案，无论您是初学者还是开发人员，还是架构师，都能从此书获益。</p></li><li><p><code>有深度</code>：本书对涉及的Spring Cloud组件按照从入门、进阶、实战、扩展增强的顺序循序渐进进行剖析和讲解,帮助作者知其然并知其所以然，授之以渔。</p></li><li><p><code>重实践</code>：注重生产实践，通过案例驱动，给出优秀的生产实践方案和优秀的生产配置，帮助读者快速落地企业微服务架构。</p></li></ul><p>全书共25章，分为三个部分：</p><ul><li><p>第一部分 核心组件篇（第1~10章）<br>主要讲解Spring Cloud的核心组件。首先从应用架构的发展历程讲起，介绍了微服务出现的背景，并对微服务架构的落地提出了相应的解决方案；然后分别详细介绍了Spring Cloud微服务体系中的核心常用组件，如Eureka、Feign、Ribbon、Hystrix、Zuul等；最后通过一个综合案例将前面介绍的组件连接起来，帮助大家融会贯通。</p></li><li><p>第二部分 进阶实战篇（第11~18章）<br>在核心组件的基础上，对Config、Consul、认证和鉴权、全链路监控以及对Spring Cloud生态圈中第二代网关Spring Cloud Gateway进行了详细阐述，循序渐进、案例驱动，帮助读者加深对组件的理解和运用，更好地掌握相关内容运用于生产实践。</p></li><li><p>第三部分 解决方案篇（第19~25章）<br> 主要从解决方案着手，内容包括Spring Cloud与gRPC的整合方式、版本控制与灰度发布、Spring Cloud容器化、Dubbo向Spring Cloud的迁移、分布式事务、领域驱动等生产级实用解决方案，为企业IT架构微服务化和变革保驾护航。</p></li></ul><h3 id="3-6-推荐理由"><a href="#3-6-推荐理由" class="headerlink" title="3.6 推荐理由"></a>3.6 推荐理由</h3><ul><li><p>本书由Spring Cloud社区官方撰写，核心成员来自原阿里、蚂蚁金服、京东金融等互联网企业，经验丰富。</p></li><li><p>本书内容有3大特色：宽度足够广、深度足够深，而且立足于生产实践，直接从生产实践出发，包含大量生产实践的配置</p></li><li><p>本书得到了来自阿里、腾讯、百度、京东等大型互联网企业的近10位专家的鼎力推荐。</p></li></ul><h3 id="3-7-作者介绍"><a href="#3-7-作者介绍" class="headerlink" title="3.7 作者介绍"></a>3.7 作者介绍</h3><ol><li><p>许进:Spring Cloud中国社区创始人，阿里原资深工程师，花名玹霖，专注于基础架构与中间件研发，曾就职于唯品会平台架构部和饿了么。个人网站：<a href="http://xujin.org。" target="_blank" rel="noopener">http://xujin.org。</a></p></li><li><p>钟尊发:Spring Cloud中国社区联合创始人，现就职于京东金融，对微服务有深入研究。</p></li><li><p>叶志远:Spring Cloud中国社区联合创始人，现就职于蚂蚁金服，花名梓尧。CSDN博客专家，开源社区活跃者，国内Spring Cloud早期实践者</p></li><li><p>方志朋:Spring Cloud中国社区联合创始人，硕士学历，《深入理解Spring Cloud与微服务构建》作者，CSDN博客专家（阅读量600万+），在社区具有较高活跃度与影响力。</p></li><li><p>蔡波斯:拥有多年Java开发经验，曾就职于美团、腾讯。国内Spring Cloud领域的早期实践者，现在金融行业从事FinTech相关研发</p></li><li><p>郭芳碧:多年微服务实践经验，现任职于某互联网金融公司中间件部门。</p></li><li><p>朱德明:拥有10年Java开发经验，多年技术架构和解决方案经验，现任灵雀云微服务架构师，在微服务领域有着丰富的落地经验，曾任某创业公司技术负责人。</p></li></ol>]]></content>
      
      <categories>
          
          <category> 重新定义 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目经验 </tag>
            
            <tag> 重新定义 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>个人博客-有争议文章版权问题复盘声明</title>
      <link href="/ex/bqsm/"/>
      <url>/ex/bqsm/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:大家好，我是许进沉思录的博主许进，感谢大家对我的博客进行阅读，之所以网站<code>取名为沉思录</code>主要想用<code>博客的方式记录我人生每个阶段的技术思考和技术学习快照，和感悟</code>。由于最近有网友对我博客上的内容的<code>版权问题产生争议</code>，因此本文主要对我个人博客内容的版权问题争议<code>进行复盘声明</code>。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章为什么会出现呢？</p><ul><li>第一,因为最近发生了让我匪夷所思的事情，至于什么事情我不想做过多解释。我只想<code>做好我自己，尊师重道，有则改之，无责加勉</code>。</li><li>第二,最近有幸和另外6位作者写完一本名为《重新定义Spring Cloud实战》技术书，起初规划了32章，最后实在写不动了，保留了精华的25章，由于工作特别忙，7位作者经过无数个夜晚熬夜，最终初稿汇总之后 1400页，我第一感觉我的天呀，纸张这么贵。而且我们在写的过程中，站在读者的角度+降低成本的角度，做了很多思考。最后我们7人进行缩减，能用一句话说明白的就不要用两句话，经过对整本书进行调整，在保持内容不变的情况下最后初稿为1187页。好像跑题了，言归正传，最近电子鲜读版本已公开。好多技术朋友看完之后，有人问我:我可以在我博客上写一下关于这本书的读书笔记吗？我说可以呀，然后他问了我版权署名的问题。我回答是:我不太介意这个问题，我们做好自己就可以。但是为了避免引起不必要的麻烦，我建议他可以写为《某某某书的读书笔记》</li></ul><blockquote><p>针对上述两个问题，和最近发生的事情，真的有必要进行复盘进行声明。</p></blockquote><h2 id="1-博客概述"><a href="#1-博客概述" class="headerlink" title="1.博客概述"></a>1.博客概述</h2><p>   我开始接触写博客的时候是从新浪博客开始，后来经过多次折腾进行迁移。在写这篇文章之前，我想介绍一下什么是<code>博客</code>。百度百科对博客的描述如下图片所示:<br><img src="/images/csl/bkgs.png" width="650px" height="450px"></p><blockquote><p>简单的来说博客就是对<code>学习</code>，<code>生活</code>，<code>感悟</code>，<code>思考</code>的一种记录方式。仅代表个人观点。</p></blockquote><h2 id="2-博客版权声明"><a href="#2-博客版权声明" class="headerlink" title="2. 博客版权声明"></a>2. 博客版权声明</h2><p>  近几年随着知识产权和版权意识的增强，很多人开始对自己在网上发表的博客信息或网络日志，或者想法和感悟增加版权信息。</p><h3 id="2-1-Hexo博客版权增加"><a href="#2-1-Hexo博客版权增加" class="headerlink" title="2.1 Hexo博客版权增加"></a>2.1 Hexo博客版权增加</h3><p>用过Hexo或者Hugo的可以知道，有时为了反复添加重复内容，会统一添加版权信息。代码如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;! -- 添加版权信息 --&gt;</span><br><span class="line">&lt;div class=&quot;article-footer-copyright&quot;&gt;</span><br><span class="line">&lt;i class=&quot;fa fa-lightbulb-o&quot;&gt;&lt;/i&gt;</span><br><span class="line">本文由&lt;b&gt;&lt;a href=&quot;&lt;%= config.root %&gt;index.html&quot; target=&quot;_blank&quot; title=&quot;&lt;%= config.author %&gt;&quot;&gt;&lt;%= config.author %&gt;&lt;/a&gt;&lt;/b&gt;创作和发表,采用&lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CC BY 3.0 CN协议&lt;/a&gt; 进行许可。转载请注明作者及出处,本文作者为&lt;b&gt;&lt;a href=&quot;&lt;%= config.root %&gt;index.html&quot; target=&quot;_blank&quot; title=&quot;&lt;%= config.author %&gt;&quot;&gt;&lt;%= config.author %&gt;&lt;/a&gt;&lt;/b&gt;,本文标题为&lt;b&gt;&lt;a href=&quot;&lt;%- config.root %&gt;&lt;%- post.path %&gt;&quot; target=&quot;_blank&quot; title=&quot;&lt;%= post.title %&gt;&quot;&gt;&lt;%= post.title %&gt;&lt;/a&gt;&lt;/b&gt;</span><br><span class="line">本文链接为&lt;b&gt;&lt;a href=&quot;&lt;%- config.root %&gt;&lt;%- post.path %&gt;&quot; target=&quot;_blank&quot; title=&quot;&lt;%= post.title %&gt;&quot;&gt;&lt;%- config.url %&gt;/&lt;%- post.path %&gt;&lt;/a&gt;&lt;/b&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;! -- 添加版权信息 --&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>优点</code>:统一添加版权信息<br><code>缺点</code>:如果遗漏容易产生误解</p><p>统一添加的方式，虽然方便，即便你指明了作者是谁，但是也容易引起误会，可能会给自己造成困扰。比如下面争议的几篇文章。</p></blockquote><h2 id="3-博客版权-争议问题复盘说明"><a href="#3-博客版权-争议问题复盘说明" class="headerlink" title="3.博客版权-争议问题复盘说明"></a>3.博客版权-争议问题复盘说明</h2><h3 id="3-1-博客主题版权声明"><a href="#3-1-博客主题版权声明" class="headerlink" title="3.1 博客主题版权声明"></a>3.1 博客主题版权声明</h3><p>  我博客基于Hexo构建，主题基于<a href="https://github.com/ppoffice/hexo-theme-icarus优化美化进行定制DIY。感谢原作者贡献了分享了该主题。" target="_blank" rel="noopener">https://github.com/ppoffice/hexo-theme-icarus优化美化进行定制DIY。感谢原作者贡献了分享了该主题。</a></p><h3 id="3-2-Spring-Cloud-Zuul异常处理文章-版权说明"><a href="#3-2-Spring-Cloud-Zuul异常处理文章-版权说明" class="headerlink" title="3.2 Spring Cloud Zuul异常处理文章-版权说明"></a>3.2 Spring Cloud Zuul异常处理文章-版权说明</h3><p>如下图所示Spring Cloud Zuul异常处理文章来自于Spring Cloud中国社区博客投稿，文稿署名张劲，为了让更多的人学习了解。放了一份到我博客已注明作者。</p><p><img src="/images/csl/zywz1.jpg" width="650px" height="850px"></p><p>跟<code>作者沟通了解之后</code>，<code>作者没有参加过上海技术沙龙也没看过对应的PPT</code>，<br><img src="/images/csl/zjsm2.png" width="650px" height="850px"></p><h3 id="3-3-数据库连性池性能测试-文章版权声明"><a href="#3-3-数据库连性池性能测试-文章版权声明" class="headerlink" title="3.3 数据库连性池性能测试-文章版权声明"></a>3.3 数据库连性池性能测试-文章版权声明</h3><p> 本篇文章链接在我博客上地址是:<a href="http://xujin.org/mw/dcp-test/">http://xujin.org/mw/dcp-test/</a>， 是我在唯品会中间件团队时学习中间件的记录，收集整理成MD文稿而来。</p><ul><li><p>通过百度搜索结果如下，最下面的两个截图类似的文章。<br><img src="/images/csl/zjzh1.png" width="650px" height="850px"></p></li><li><p>跟原作者沟通声明版权为唯品会中间件团队<br>沟通结果如下:<br><img src="/images/csl/htjl.jpg" width="650px" height="850px"></p></li></ul><p>处理结果如下:<br><img src="/images/csl/zhsh.jpg" width="650px" height="850px"></p><h2 id="4-总结处理方式"><a href="#4-总结处理方式" class="headerlink" title="4.总结处理方式"></a>4.总结处理方式</h2><p>博客后期优化方式:<br>1.<code>修改统一加版权方式为手动添加，减少不必要的误会</code>。<br>2.<code>增加反馈机制</code>，第一时间<code>反馈处理</code></p>]]></content>
      
      <categories>
          
          <category> 沉思录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 沉思录 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Gateway中的权重路由</title>
      <link href="/sc/gw/gw08/"/>
      <url>/sc/gw/gw08/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本文主要通过运用Spring Cloud Gateway的WeightRoutePredicateFactory对URL进行权重路由。</p><a id="more"></a><h2 id="1-权重路由"><a href="#1-权重路由" class="headerlink" title="1.权重路由"></a>1.权重路由</h2><h3 id="1-1-权重路由使用场景"><a href="#1-1-权重路由使用场景" class="headerlink" title="1.1 权重路由使用场景"></a>1.1 权重路由使用场景</h3><p>在开发或者测试的时候，或者线上发布，线上服务多版本控制的时候，需要对服务提供权重路由，最常见的使用就是，一个服务有两个版本，旧版本V1，新版本v2。在线上灰度的时候，需要通过网关动态实时推送，路由权重信息。比如95%的流量走服务v1版本，5%的流量走服务v2版本。</p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/ce44017f07ce3a1b1d30e87995227ef4.jpg?Expires=1843884992&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=DBIQ%2BF%2BgIkpjik7x0CmmfaSrglU%3D" alt=""></p><blockquote><p>issue: The Spring Cloud Gateway issue of Allow Rolling Deployments <a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/67" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-gateway/issues/67</a></p></blockquote><h3 id="1-2-Spring-Cloud-Gateway权重路由原理"><a href="#1-2-Spring-Cloud-Gateway权重路由原理" class="headerlink" title="1.2 Spring Cloud Gateway权重路由原理"></a>1.2 Spring Cloud Gateway权重路由原理</h3><p>Spring Cloud Gateway中提供了<code>org.springframework.cloud.gateway.handler.predicate.WeightRoutePredicateFactory</code>去实现根据分组设置权重进行路由，因此使用起来相对比较简单，有兴趣的可以debug阅读源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeightRoutePredicateFactory</span> <span class="keyword">extends</span> <span class="title">AbstractRoutePredicateFactory</span>&lt;<span class="title">WeightConfig</span>&gt; <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(WeightRoutePredicateFactory.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_KEY = WeightConfig.CONFIG_PREFIX + <span class="string">".group"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String WEIGHT_KEY = WeightConfig.CONFIG_PREFIX + <span class="string">".weight"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeightRoutePredicateFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(WeightConfig.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher publisher)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.publisher = publisher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">shortcutFieldOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Arrays.asList(GROUP_KEY, WEIGHT_KEY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">shortcutFieldPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> WeightConfig.CONFIG_PREFIX;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeApply</span><span class="params">(WeightConfig config)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (publisher != <span class="keyword">null</span>) &#123;</span><br><span class="line">publisher.publishEvent(<span class="keyword">new</span> WeightDefinedEvent(<span class="keyword">this</span>, config));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title">apply</span><span class="params">(WeightConfig config)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> exchange -&gt; &#123;</span><br><span class="line">Map&lt;String, String&gt; weights = exchange.getAttributeOrDefault(WEIGHT_ATTR,</span><br><span class="line">Collections.emptyMap());</span><br><span class="line"></span><br><span class="line">String routeId = exchange.getAttribute(GATEWAY_PREDICATE_ROUTE_ATTR);</span><br><span class="line"></span><br><span class="line"><span class="comment">// all calculations and comparison against random num happened in</span></span><br><span class="line"><span class="comment">// WeightCalculatorWebFilter</span></span><br><span class="line">String group = config.getGroup();</span><br><span class="line"><span class="keyword">if</span> (weights.containsKey(group)) &#123;</span><br><span class="line"></span><br><span class="line">String chosenRoute = weights.get(group);</span><br><span class="line"><span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">log.trace(<span class="string">"in group weight: "</span>+ group + <span class="string">", current route: "</span> + routeId +<span class="string">", chosen route: "</span> + chosenRoute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> routeId.equals(chosenRoute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Spring-Cloud-Gateway中的权重路由案例"><a href="#2-Spring-Cloud-Gateway中的权重路由案例" class="headerlink" title="2.Spring Cloud Gateway中的权重路由案例"></a>2.Spring Cloud Gateway中的权重路由案例</h2><h3 id="2-1-案例代码地址"><a href="#2-1-案例代码地址" class="headerlink" title="2.1 案例代码地址"></a>2.1 案例代码地址</h3><p><a href="https://github.com/SoftwareKing/sc-gateway/tree/master/ch4" target="_blank" rel="noopener">https://github.com/SoftwareKing/sc-gateway/tree/master/ch4</a></p><h3 id="2-2-Spring-Cloud-Gateway-Server说明"><a href="#2-2-Spring-Cloud-Gateway-Server说明" class="headerlink" title="2.2 Spring Cloud Gateway Server说明"></a>2.2 Spring Cloud Gateway Server说明</h3><p>Spring Cloud Gateway will dispatch 95% of the requests to version 1 and 5% of the traffic to version 2 of a specified service, as shown by the following figure.</p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/f8e439776d6bbff94993fafdfc02b98c.png?Expires=1843885017&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=a8ZhI5O5y7Gs7TP4eusGOT7qdoE%3D" alt=""></p><p>我们通过在Spring Cloud Gateway中会配置不同的权重信息到不同URL上，Spring Cloud Gateway会根据我们配置的路由权重信息，将请求分发到不同的源服务组，权重信息如ch4/ch4-gateway中的application.yml所示，主要配置信息如下。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">ch4-gateway</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      routes:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - id:</span> <span class="string">service1_v1</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://localhost:8081/v1</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">Path=/test</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">Weight=service1,</span> <span class="number">95</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - id:</span> <span class="string">service1_v2</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://localhost:8081/v2</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">Path=/test</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">Weight=service1,</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p>Weight=service1, 95，Weight=service1, 5就是路由的权重信息。</p></blockquote><h3 id="2-3-源服务"><a href="#2-3-源服务" class="headerlink" title="2.3 源服务"></a>2.3 源服务</h3><p>源服务在本案例中源服务如ch4-service-provider所示，主要提提供Gateway Server权重路由对应的后端源服务。因为比较简单因此不做详细说明，主要代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.sc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/v1"</span>, produces = <span class="string">"text/plain;charset=UTF-8"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">v1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Mono.just(<span class="string">"v1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/v2"</span>, produces = <span class="string">"text/plain;charset=UTF-8"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">v2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Mono.just(<span class="string">"v2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4 测试"></a>2.4 测试</h3><p>分别启动ch4-gateway，ch4-service-provider进行访问:<a href="http://localhost:8080/test" target="_blank" rel="noopener">http://localhost:8080/test</a> 测试,发现会根据所设权重进行路由。</p>]]></content>
      
      <categories>
          
          <category> Spring Cloud Gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Gateway </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Gateway中的GatewayFilter和GlobalFilter</title>
      <link href="/sc/gw/gw07/"/>
      <url>/sc/gw/gw07/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本文主要介绍了什么是GatewayFilter和GlobalFilter，以及区别和联系。然后介绍如何在Spring Cloud Gateway中自定义使用GatewayFilter和GlobalFilter。</p><a id="more"></a><h2 id="1-Spring-Cloud-gateway的Filter"><a href="#1-Spring-Cloud-gateway的Filter" class="headerlink" title="1. Spring Cloud gateway的Filter"></a>1. Spring Cloud gateway的Filter</h2><p>Spring Cloud gateway中的Filter从接口实现上分为两种一种是GatewayFilter，另外一种是GlobalFilter。</p><h2 id="1-1-GatewayFilter与GlobalFilter的区别"><a href="#1-1-GatewayFilter与GlobalFilter的区别" class="headerlink" title="1.1 GatewayFilter与GlobalFilter的区别"></a>1.1 GatewayFilter与GlobalFilter的区别</h2><p>区别用英语可以总结如下:<br>At a high level global filters are applied to all routes, while a gateway filter will be applied to an individual route(s)</p><blockquote><p>在一个高的角度来看，Global filters会被应用到所有的路由上，而Gateway filter将应用到<code>单个路由</code>上或者<code>一个分组的路由</code>上。在下面的案例中将会进行说明。</p></blockquote><h2 id="1-2-本文代码地址"><a href="#1-2-本文代码地址" class="headerlink" title="1.2 本文代码地址"></a>1.2 本文代码地址</h2><blockquote><p><a href="https://github.com/SoftwareKing/sc-gateway/tree/master/ch2" target="_blank" rel="noopener">https://github.com/SoftwareKing/sc-gateway/tree/master/ch2</a></p></blockquote><h2 id="2-GatewayFilter和GlobalFilter"><a href="#2-GatewayFilter和GlobalFilter" class="headerlink" title="2. GatewayFilter和GlobalFilter"></a>2. GatewayFilter和GlobalFilter</h2><h3 id="2-1-GatewayFilter"><a href="#2-1-GatewayFilter" class="headerlink" title="2.1 GatewayFilter"></a>2.1 GatewayFilter</h3><h4 id="2-1-1-什么是GatewayFilter"><a href="#2-1-1-什么是GatewayFilter" class="headerlink" title="2.1.1 什么是GatewayFilter"></a>2.1.1 什么是GatewayFilter</h4><p>Contract for interception-style, chained processing of Web requests that may be used to implement cross-cutting, application-agnostic requirements such<br> as security, timeouts, and others. Specific to a Gateway Copied from WebFilter</p><blockquote><p>GatewayFilter是从WebFilter中Copy过来的，相当于一个Filter过滤器，可以对访问的URL过滤横切处理，应用场景比如超时，安全等。</p></blockquote><p>从Spring Cloud Gateway的源码中如下所示，可以看出GatewayFilter的使用场景:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Contract for interception-style, chained processing of Web requests that may</span></span><br><span class="line"><span class="comment"> * be used to implement cross-cutting, application-agnostic requirements such</span></span><br><span class="line"><span class="comment"> * as security, timeouts, and others. Specific to a Gateway</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Copied from WebFilter</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rossen Stoyanchev</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 5.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GatewayFilter</span> <span class="keyword">extends</span> <span class="title">ShortcutConfigurable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String NAME_KEY = <span class="string">"name"</span>;</span><br><span class="line">String VALUE_KEY = <span class="string">"value"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process the Web request and (optionally) delegate to the next</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> WebFilter&#125; through the given &#123;<span class="doctag">@link</span> GatewayFilterChain&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exchange the current server exchange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> chain provides a way to delegate to the next filter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125; to indicate when request processing is complete</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>GatewayFilter和GlobalFilter两个接口中定义的方法一样都是Mono<void> filter(ServerWebExchange exchange, GatewayFilterChain chain)，唯一的区别就是GatewayFilter继承了ShortcutConfigurable，GlobalFilter没有任何继承。</void></p></blockquote><h5 id="2-1-2-自定义GatewayFilter-Custom-GatewayFilter"><a href="#2-1-2-自定义GatewayFilter-Custom-GatewayFilter" class="headerlink" title="2.1.2 自定义GatewayFilter(Custom GatewayFilter)"></a>2.1.2 自定义GatewayFilter(Custom GatewayFilter)</h5><p>如org.xujin.sc.filter.CustomFilter代码所示，通过自定义GatewayFilter对路由转发的处理时长统计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.sc.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计某个或者某种路由的的处理时长</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomFilter</span> <span class="keyword">implements</span> <span class="title">GatewayFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(GatewayFilter.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String COUNT_Start_TIME = <span class="string">"countStartTime"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        exchange.getAttributes().put(COUNT_Start_TIME, System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange).then(</span><br><span class="line">                Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">                    Long startTime = exchange.getAttribute(COUNT_Start_TIME);</span><br><span class="line">                    Long endTime=(System.currentTimeMillis() - startTime);</span><br><span class="line">                    <span class="keyword">if</span> (startTime != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        log.info(exchange.getRequest().getURI().getRawPath() + <span class="string">": "</span> + endTime + <span class="string">"ms"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Ordered.LOWEST_PRECEDENCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-3-Gateway-Filter与RouteLocator绑定使用"><a href="#2-1-3-Gateway-Filter与RouteLocator绑定使用" class="headerlink" title="2.1.3 Gateway Filter与RouteLocator绑定使用"></a>2.1.3 Gateway Filter与RouteLocator绑定使用</h4><p>在org.xujin.sc.GatewayServerApplication中customerRouteLocator如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customerRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes()</span><br><span class="line">                .route(r -&gt; r.path(<span class="string">"/test/prefix/**"</span>)</span><br><span class="line">                        .filters(f -&gt; f.stripPrefix(<span class="number">2</span>)</span><br><span class="line">                                .filter(<span class="keyword">new</span> CustomFilter())</span><br><span class="line">                                .addResponseHeader(<span class="string">"X-Response-test"</span>, <span class="string">"test"</span>))</span><br><span class="line">                        .uri(<span class="string">"lb://SC-CONSUMER"</span>)</span><br><span class="line">                        .order(<span class="number">0</span>)</span><br><span class="line">                        .id(<span class="string">"test_consumer_service"</span>)</span><br><span class="line">                )</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GatewayServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>r.path(“/test/prefix/**”)表示自定义了访问前缀，在真正的Gateway进行路由转发的时候，会用过f.stripPrefix(2)把前缀去掉。</p><blockquote><p>使用场景:可以把对外暴露的URL通过加前缀分组打标。</p></blockquote></li><li><p>filter(new CustomFilter()</p><blockquote><p>filter(new CustomFilter()，表示把自定义的Filter加到Filter链里面执行，注意一点是自定义GlobalFilter不需要加进去。</p></blockquote></li><li><p>uri(“lb://SC-CONSUMER”)</p><blockquote><p>uri(“lb://SC-CONSUMER”)表示Spring Cloud Gateway对spring.application.name等于sc-consumer源服务应用中的URL进行协议适配转发。</p></blockquote></li></ol><h4 id="2-1-4-测试如下"><a href="#2-1-4-测试如下" class="headerlink" title="2.1.4 测试如下:"></a>2.1.4 测试如下:</h4><p>1.访问<a href="http://localhost:9000/SC-CONSUMER/hello/xujin" target="_blank" rel="noopener">http://localhost:9000/SC-CONSUMER/hello/xujin</a> 能正常访问。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DEBUG 31658 --- [ctor-http-nio-2] o.s.c.g.h.RoutePredicateHandlerMapping   : Route matched: CompositeDiscoveryClient_SC-CONSUMER</span><br><span class="line">2018-05-27 09:58:07.905 DEBUG 31658 --- [ctor-http-nio-2] o.s.c.g.h.RoutePredicateHandlerMapping   : Mapping [Exchange: GET http://localhost:9000/SC-CONSUMER/hello/xujin] to Route&#123;id='CompositeDiscoveryClient_SC-CONSUMER', uri=lb://SC-CONSUMER, order=0, predicate=org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory$$Lambda$337/1295338046@f2ff0c8, gatewayFilters=[OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.RewritePathGatewayFilterFactory$$Lambda$717/1168359877@1f74a2b, order=1&#125;]&#125;</span><br><span class="line">2018-05-27 09:58:07.905 DEBUG 31658 --- [ctor-http-nio-2] o.s.c.g.handler.FilteringWebHandler      : Sorted gatewayFilterFactories: [OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@f5bf288&#125;, order=-1&#125;, OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.RewritePathGatewayFilterFactory$$Lambda$717/1168359877@1f74a2b, order=1&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@26c77f54&#125;, order=10000&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.LoadBalancerClientFilter@4c38cd16&#125;, order=10100&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@2c1d57bc&#125;, order=2147483637&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@6e9a0bea&#125;, order=2147483646&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@7ddcb0dc&#125;, order=2147483647&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@3e856100&#125;, order=2147483647&#125;]</span><br></pre></td></tr></table></figure><blockquote><p>从上面的控制台打印日志可以看出，没有打印出该URL对应的耗时。</p></blockquote><p>2.加上URL前缀/test/prefix/访问，测试URL为<br><a href="http://localhost:9000/test/prefix/hello/testCustomFilter/xujin" target="_blank" rel="noopener">http://localhost:9000/test/prefix/hello/testCustomFilter/xujin</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-05-27 10:01:56.057 DEBUG 31658 --- [ctor-http-nio-2] o.s.c.g.h.RoutePredicateHandlerMapping   : Mapping [Exchange: GET http://localhost:9000/test/prefix/hello/testCustomFilter/xujin] to Route&#123;id='test_consumer_service', uri=lb://SC-CONSUMER, order=0, predicate=org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory$$Lambda$337/1295338046@6dbaa72e, gatewayFilters=[OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.StripPrefixGatewayFilterFactory$$Lambda$340/1149217113@41fb2078, order=0&#125;, org.xujin.sc.filter.CustomFilter@281885a3, OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.AddResponseHeaderGatewayFilterFactory$$Lambda$342/1099925775@4705cae6, order=0&#125;]&#125;</span><br><span class="line">2018-05-27 10:01:56.057 DEBUG 31658 --- [ctor-http-nio-2] o.s.c.g.handler.FilteringWebHandler      : Sorted gatewayFilterFactories: [OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@f5bf288&#125;, order=-1&#125;, OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.StripPrefixGatewayFilterFactory$$Lambda$340/1149217113@41fb2078, order=0&#125;, OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.AddResponseHeaderGatewayFilterFactory$$Lambda$342/1099925775@4705cae6, order=0&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@26c77f54&#125;, order=10000&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.LoadBalancerClientFilter@4c38cd16&#125;, order=10100&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@2c1d57bc&#125;, order=2147483637&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@6e9a0bea&#125;, order=2147483646&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@7ddcb0dc&#125;, order=2147483647&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@3e856100&#125;, order=2147483647&#125;, org.xujin.sc.filter.CustomFilter@281885a3]</span><br><span class="line">2018-05-27 10:02:00.347  INFO 31658 --- [ctor-http-nio-8] o.s.cloud.gateway.filter.GatewayFilter   : /hello/testCustomFilter/xujin: 859ms</span><br></pre></td></tr></table></figure><blockquote><p>如上日志可以看到/hello/testCustomFilter/xujin: 859ms，Gateway转发的时候去掉了前缀。</p></blockquote><h3 id="2-2-GlobalFilter"><a href="#2-2-GlobalFilter" class="headerlink" title="2.2 GlobalFilter"></a>2.2 GlobalFilter</h3><h4 id="2-2-1-什么是GlobalFilter"><a href="#2-2-1-什么是GlobalFilter" class="headerlink" title="2.2.1 什么是GlobalFilter"></a>2.2.1 什么是GlobalFilter</h4><blockquote><p>The GlobalFilter interface has the same signature as GatewayFilter. These are special filters that are conditionally applied to all routes. (This interface and usage are subject to change in future milestones).</p></blockquote><p>Spring Cloud gateway定义了GlobalFilter的接口让我们去自定义实现自己的的GlobalFilter。GlobalFilter是一个全局的Filter，作用于所有的路由。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GlobalFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process the Web request and (optionally) delegate to the next</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> WebFilter&#125; through the given &#123;<span class="doctag">@link</span> GatewayFilterChain&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exchange the current server exchange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> chain provides a way to delegate to the next filter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125; to indicate when request processing is complete</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-自定义全局过滤器-Custom-GlobalFilter"><a href="#2-2-2-自定义全局过滤器-Custom-GlobalFilter" class="headerlink" title="2.2.2 自定义全局过滤器(Custom GlobalFilter)"></a>2.2.2 自定义全局过滤器(Custom GlobalFilter)</h4><p>在这里简单定义AuthSignatureFilter实现<code>GlobalFilter</code>，使用场景就是Gateway对请求的URL校验权限，判断请求的URL是否是合法请求。通过从ServerWebExchange获取请求上下文中authToken对应的值，进行判null处理，其它的check逻辑可以自定定制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.sc.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用鉴权</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthSignatureFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        String token = exchange.getRequest().getQueryParams().getFirst(<span class="string">"authToken"</span>);</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span> || token.isEmpty()) &#123;</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>GlobalFilter写完了，那问题来了？如何让其在Gateway中运行生效，有两种方式一种直接加<code>@Component</code>注解，另外一种可以在 Spring Config 中配置这个 Bean如下所示:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthSignatureFilter <span class="title">authSignatureFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AuthSignatureFilter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>1.访问<a href="http://localhost:9000/test/prefix/hello/testCustomFilter/xujin" target="_blank" rel="noopener">http://localhost:9000/test/prefix/hello/testCustomFilter/xujin</a> 如下所示由于authToken为空401返回.</p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/91ce199f4af8f4bd9576aace65940253.jpeg?Expires=1842749245&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=Is0KT0QAVXkPS20EdSPvDqmlxmc%3D" alt=""></p><p>2.访问<a href="http://localhost:9000/test/prefix/hello/testCustomFilter/xujin?authToken=asdasdsddasadsadsadsdadsewew32rg" target="_blank" rel="noopener">http://localhost:9000/test/prefix/hello/testCustomFilter/xujin?authToken=asdasdsddasadsadsadsdadsewew32rg</a></p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/86509f882391c3a20d2f32778dd1c2e9.jpeg?Expires=1842749511&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=lAd7U0lj4WZ0HMWF9SpbfKJ4aR8%3D" alt=""></p>]]></content>
      
      <categories>
          
          <category> Spring Cloud Gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Gateway </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Gateway基于服务发现的默认路由规则</title>
      <link href="/sc/gw/gw05/"/>
      <url>/sc/gw/gw05/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本篇文章主要介绍了Spring Cloud Gateway的基于服务发现的默认路由规则，从中可以看出Gateway的路由规则:<a href="http://Gateway_HOST:Gateway_PORT/大写的serviceId/*" target="_blank" rel="noopener">http://Gateway_HOST:Gateway_PORT/大写的serviceId/*</a> 和 zuul的默认路由规则<a href="http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/*差不多。" target="_blank" rel="noopener">http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/*差不多。</a></p><a id="more"></a><h2 id="1-Spring-Gateway概述"><a href="#1-Spring-Gateway概述" class="headerlink" title="1.Spring Gateway概述"></a>1.Spring Gateway概述</h2><h3 id="1-1-什么是Spring-Cloud-Gateway"><a href="#1-1-什么是Spring-Cloud-Gateway" class="headerlink" title="1.1 什么是Spring Cloud Gateway"></a>1.1 什么是Spring Cloud Gateway</h3><p>   <code>Spring Cloud Gateway</code>是Spring官方基于Spring 5.0，Spring Boot 2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供一种简单而有效的统一的API路由管理方式。Spring Cloud Gateway作为Spring Cloud生态系中的网关，目标是替代Netflix ZUUL，其不仅提供统一的路由方式，并且基于Filter链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。</p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/3f25fcd95769a54eb391931449d5298f.jpg?Expires=1841935182&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=F%2BSKuTDpXoj5xCXwIIJ4u8D1C2A%3D" alt=""></p><h3 id="1-2-Spring-Cloud-Gateway的功能"><a href="#1-2-Spring-Cloud-Gateway的功能" class="headerlink" title="1.2 Spring Cloud Gateway的功能"></a>1.2 Spring Cloud Gateway的功能</h3><p>Spring Cloud Gateway 的特征：</p><ul><li>基于 Spring Framework 5，Project Reactor 和 Spring Boot 2.0<br>动态路由</li><li>Predicates 和 Filters 作用于特定路由</li><li>集成 Hystrix 断路器</li><li>集成 Spring Cloud DiscoveryClient</li><li>易于编写的 Predicates 和 Filters</li><li>限流</li><li>路径重写</li></ul><h2 id="2-Spring-Cloud-Gateway的工程流程"><a href="#2-Spring-Cloud-Gateway的工程流程" class="headerlink" title="2. Spring Cloud Gateway的工程流程"></a>2. Spring Cloud Gateway的工程流程</h2><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/22e4eccf2cbe09332678c04b8de98ebe.jpg?Expires=1841935407&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=NHcssduqPTQry7HCmudjphw0qC4%3D" alt=""></p><p>   客户端向 Spring Cloud Gateway 发出请求。然后在 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。<br>过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。</p><h3 id="2-1-Pre和POST两种类型的过滤器"><a href="#2-1-Pre和POST两种类型的过滤器" class="headerlink" title="2.1 Pre和POST两种类型的过滤器"></a>2.1 Pre和POST两种类型的过滤器</h3><h2 id="3-基于服务发现的默认路由规则"><a href="#3-基于服务发现的默认路由规则" class="headerlink" title="3.基于服务发现的默认路由规则"></a>3.基于服务发现的默认路由规则</h2><h3 id="3-1-zuul和gateway的默认路由规则"><a href="#3-1-zuul和gateway的默认路由规则" class="headerlink" title="3.1 zuul和gateway的默认路由规则"></a>3.1 zuul和gateway的默认路由规则</h3><h4 id="3-1-1-zuul的默认路由规则"><a href="#3-1-1-zuul的默认路由规则" class="headerlink" title="3.1.1 zuul的默认路由规则"></a>3.1.1 zuul的默认路由规则</h4><p>说明默认情况下，Zuul会代理所有注册到Eureka Server的微服务，并且Zuul的路由规则如下：<br>   <a href="http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/**" target="_blank" rel="noopener">http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/**</a> 会被转发到serviceId对应的微服务。<br>   <a href="http://localhost:8040/sc-zuul-first-provider/sc/order/2" target="_blank" rel="noopener">http://localhost:8040/sc-zuul-first-provider/sc/order/2</a><br>   <img src="http://xujin.org/images/sc-study/sc-zuul-01-t1.png" alt="默认路由规则"></p><h4 id="3-1-2-gateway的默认路由规则"><a href="#3-1-2-gateway的默认路由规则" class="headerlink" title="3.1.2 gateway的默认路由规则"></a>3.1.2 gateway的默认路由规则</h4><p>下面的案例中会演示：<a href="http://localhost:9000/SC-CONSUMER/hello/xujin" target="_blank" rel="noopener">http://localhost:9000/SC-CONSUMER/hello/xujin</a></p><blockquote><p><a href="http://Gateway_HOST:Gateway_PORT/大写的serviceId/**，其中微服务应用名默认大写访问。" target="_blank" rel="noopener">http://Gateway_HOST:Gateway_PORT/大写的serviceId/**，其中微服务应用名默认大写访问。</a></p></blockquote><h3 id="3-2-案例示例代码"><a href="#3-2-案例示例代码" class="headerlink" title="3.2  案例示例代码"></a>3.2  案例示例代码</h3><p><a href="https://github.com/SoftwareKing/sc-gateway/tree/master/ch1" target="_blank" rel="noopener">https://github.com/SoftwareKing/sc-gateway/tree/master/ch1</a></p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/74473f8fa112dbf946452dd234be9783.jpeg?Expires=1841935730&OSSAccessKeyId=LTAI57F52hRuWq3h&Signature=8hk%2BcIs0lpEA3S01TQsu%2BVdome8%3D" width="450px" height="252px"></p><table><thead><tr><th>模块</th><th>说明</th><th>端口</th></tr></thead><tbody><tr><td>ch1-sc-consumer</td><td>服务消费者</td><td>8000</td></tr><tr><td>ch1-sc-eureka</td><td>Eureka Server注册中心</td><td>8761</td></tr><tr><td>ch1-sc-gateway</td><td>Spring Cloud Gateway Sever</td><td>9000</td></tr><tr><td>ch1-sc-provider</td><td>服务提供者</td><td>8001</td></tr></tbody></table><h4 id="3-2-1-ch1-sc-gateway工程说明"><a href="#3-2-1-ch1-sc-gateway工程说明" class="headerlink" title="3.2.1 ch1-sc-gateway工程说明"></a>3.2.1 ch1-sc-gateway工程说明</h4><h4 id="3-2-1-1-Maven依赖"><a href="#3-2-1-1-Maven依赖" class="headerlink" title="3.2.1.1  Maven依赖"></a>3.2.1.1  Maven依赖</h4><p>Spring Cloud Gateway sever主要的maven依赖如下所示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-1-2-yml文件配置"><a href="#3-2-1-2-yml文件配置" class="headerlink" title="3.2.1.2 yml文件配置"></a>3.2.1.2 yml文件配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">sc-gateway-server</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        locator:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9000</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">org.springframework.cloud.gateway:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>配置说明：</p><blockquote><p>spring.cloud.gateway.discovery.locator.enabled：是否与服务发现组件进行结合，通过 serviceId 转发到具体的服务实例。默认为false，设为true便开启通过服务中心的自动根据 serviceId 创建路由的功能。</p></blockquote><hr><blockquote><p>修改spring cloud gateway server监听的端口为9000</p></blockquote><hr><blockquote><p>eureka.client.service-url.defaultZone: <a href="http://localhost:8761/eureka/,指定注册中心的地址，Spring" target="_blank" rel="noopener">http://localhost:8761/eureka/,指定注册中心的地址，Spring</a> Cloud Gateway从注册中心获取已经注册的服务列表。</p></blockquote><hr><blockquote><p>logging.level.org.springframework.cloud.gateway: debug,开启spring-Cloud-gateway的日志级别为debug，方便debug调试。</p></blockquote><h3 id="3-3-启动测试"><a href="#3-3-启动测试" class="headerlink" title="3.3 启动测试"></a>3.3 启动测试</h3><h4 id="3-3-1-错误的路由规则访问"><a href="#3-3-1-错误的路由规则访问" class="headerlink" title="3.3.1 错误的路由规则访问"></a>3.3.1 错误的路由规则访问</h4><p>访问Spring Cloud Gateway对应的server，当访问<a href="http://localhost:9000/sc-consumer/hello/xujin的时候，报错如下所示，正确的Spring" target="_blank" rel="noopener">http://localhost:9000/sc-consumer/hello/xujin的时候，报错如下所示，正确的Spring</a> Cloud Gateway的默认路由规则:<code>http://Gateway_HOST:Gateway_PORT/大写的serviceId/**</code></p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/d98d829455d0f1a180eb1b4561c7d530.jpeg?Expires=1842311197&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=bIbKneLe1y%2B32zADPV6uQP4B2QY%3D" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2018-05-18 01:10:49.742 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-CONSUMER applying &#123;pattern=/SC-CONSUMER/**&#125; to Path</span><br><span class="line">2018-05-18 01:10:49.743 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-CONSUMER applying filter &#123;regexp=/SC-CONSUMER/(?&lt;remaining&gt;.*), replacement=/$&#123;remaining&#125;&#125; to RewritePath</span><br><span class="line">2018-05-18 01:10:49.743 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition matched: CompositeDiscoveryClient_SC-CONSUMER</span><br><span class="line">2018-05-18 01:10:49.744 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-PRODUCER applying &#123;pattern=/SC-PRODUCER/**&#125; to Path</span><br><span class="line">2018-05-18 01:10:49.744 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-PRODUCER applying filter &#123;regexp=/SC-PRODUCER/(?&lt;remaining&gt;.*), replacement=/$&#123;remaining&#125;&#125; to RewritePath</span><br><span class="line">2018-05-18 01:10:49.745 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition matched: CompositeDiscoveryClient_SC-PRODUCER</span><br><span class="line">2018-05-18 01:10:49.745 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-GATEWAY-SERVER applying &#123;pattern=/SC-GATEWAY-SERVER/**&#125; to Path</span><br><span class="line">2018-05-18 01:10:49.747 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-GATEWAY-SERVER applying filter &#123;regexp=/SC-GATEWAY-SERVER/(?&lt;remaining&gt;.*), replacement=/$&#123;remaining&#125;&#125; to RewritePath</span><br><span class="line">2018-05-18 01:10:49.748 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition matched: CompositeDiscoveryClient_SC-GATEWAY-SERVER</span><br><span class="line">2018-05-18 01:10:49.748 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.h.RoutePredicateHandlerMapping   : Route matched: CompositeDiscoveryClient_SC-CONSUMER</span><br><span class="line">2018-05-18 01:10:49.749 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.h.RoutePredicateHandlerMapping   : Mapping [Exchange: GET http://localhost:9000/SC-CONSUMER/hello/xujin] to Route&#123;id='CompositeDiscoveryClient_SC-CONSUMER', uri=lb://SC-CONSUMER, order=0, predicate=org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory$$Lambda$707/751096818@7f4c6373, gatewayFilters=[OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.RewritePathGatewayFilterFactory$$Lambda$709/672603106@293895d2, order=1&#125;]&#125;</span><br><span class="line">2018-05-18 01:10:49.749 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.handler.FilteringWebHandler      : Sorted gatewayFilterFactories: [OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@5e85c21b&#125;, order=-1&#125;, OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.RewritePathGatewayFilterFactory$$Lambda$709/672603106@293895d2, order=1&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@38e83838&#125;, order=10000&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.LoadBalancerClientFilter@6ef2f7ad&#125;, order=10100&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@41def031&#125;, order=2147483637&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@4966bab1&#125;, order=2147483646&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@22d477c2&#125;, order=2147483647&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@39832280&#125;, order=2147483647&#125;]</span><br></pre></td></tr></table></figure><p>从上面的log，看到返回了 404 错误，进一步可以看到 Spring Cloud Gateway 已经为我们的 provider 和 consumer 自动创建了对应的路由转发规则，但是这里的 pattern/regexp 里都是大写的，下面换成大写的测试一下。</p><h4 id="3-3-2-Gateway正确的路由规则测试"><a href="#3-3-2-Gateway正确的路由规则测试" class="headerlink" title="3.3.2 Gateway正确的路由规则测试"></a>3.3.2 Gateway正确的路由规则测试</h4><p>访问正确的<a href="http://localhost:9000/SC-CONSUMER/hello/xujin，可以成功访问。" target="_blank" rel="noopener">http://localhost:9000/SC-CONSUMER/hello/xujin，可以成功访问。</a></p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/42059405c29359bcca90c14e3e1f34ca.jpeg?Expires=1842311310&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=eEHIkLTtbPzvhXI2OhoK0TUXwtE%3D" alt=""></p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/ff700908c44140ec692956f4f1b526cc.jpeg?Expires=1842311231&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=ZPi13%2BGvvb2eEIHEqRIkzL3mwKw%3D" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2018-05-22 09:04:21.204 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-CONSUMER applying &#123;pattern=/SC-CONSUMER/**&#125; to Path</span><br><span class="line">2018-05-22 09:04:21.205 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-CONSUMER applying filter &#123;regexp=/SC-CONSUMER/(?&lt;remaining&gt;.*), replacement=/$&#123;remaining&#125;&#125; to RewritePath</span><br><span class="line">2018-05-22 09:04:21.205 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition matched: CompositeDiscoveryClient_SC-CONSUMER</span><br><span class="line">2018-05-22 09:04:21.206 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-PRODUCER applying &#123;pattern=/SC-PRODUCER/**&#125; to Path</span><br><span class="line">2018-05-22 09:04:21.207 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-PRODUCER applying filter &#123;regexp=/SC-PRODUCER/(?&lt;remaining&gt;.*), replacement=/$&#123;remaining&#125;&#125; to RewritePath</span><br><span class="line">2018-05-22 09:04:21.207 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition matched: CompositeDiscoveryClient_SC-PRODUCER</span><br><span class="line">2018-05-22 09:04:21.208 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-GATEWAY-SERVER applying &#123;pattern=/SC-GATEWAY-SERVER/**&#125; to Path</span><br><span class="line">2018-05-22 09:04:21.208 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-GATEWAY-SERVER applying filter &#123;regexp=/SC-GATEWAY-SERVER/(?&lt;remaining&gt;.*), replacement=/$&#123;remaining&#125;&#125; to RewritePath</span><br><span class="line">2018-05-22 09:04:21.209 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition matched: CompositeDiscoveryClient_SC-GATEWAY-SERVER</span><br><span class="line">2018-05-22 09:04:21.209 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.h.RoutePredicateHandlerMapping   : Route matched: CompositeDiscoveryClient_SC-CONSUMER</span><br><span class="line">2018-05-22 09:04:21.209 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.h.RoutePredicateHandlerMapping   : Mapping [Exchange: GET http://localhost:9000/SC-CONSUMER/hello/xujin] to Route&#123;id='CompositeDiscoveryClient_SC-CONSUMER', uri=lb://SC-CONSUMER, order=0, predicate=org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory$$Lambda$706/57023854@24f1a91e, gatewayFilters=[OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.RewritePathGatewayFilterFactory$$Lambda$708/2036079541@cbb7393, order=1&#125;]&#125;</span><br><span class="line">2018-05-22 09:04:21.209 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.handler.FilteringWebHandler      : Sorted gatewayFilterFactories: [OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@29a98d9f&#125;, order=-1&#125;, OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.RewritePathGatewayFilterFactory$$Lambda$708/2036079541@cbb7393, order=1&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@544e8149&#125;, order=10000&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.LoadBalancerClientFilter@55d58825&#125;, order=10100&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@2da3b078&#125;, order=2147483637&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@1a96d94c&#125;, order=2147483646&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@19a64eae&#125;, order=2147483647&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@7fb66650&#125;, order=2147483647&#125;]</span><br></pre></td></tr></table></figure><p>可以看出，Spring Cloud Gateway 自动的为我们的 consumer 创建了一个路由，类似于下边这样<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line"><span class="attr">    - id:</span> <span class="string">CompositeDiscoveryClient_SC-CONSUMER</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">lb://SC-CONSUMER</span></span><br><span class="line"><span class="attr">      order:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">      predicates:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">Path=/SC-CONSUMER/**</span></span><br><span class="line"><span class="attr">      filters:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">RewritePath=/SC-CONSUMER/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>所以从zuul迁移到gateway的时候，服务路由规则中的微服务应用Id默认从小写变为大写。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Spring Cloud Gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Gateway </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Gateway只有Pre和POST两种类型的Filter</title>
      <link href="/sc/gw/gw06/"/>
      <url>/sc/gw/gw06/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:Spring Cloud Gateway只有两种类型的Filter，本文介绍如何在Spring Cloud Gateway中创建一个Pre或Post类型的Filter。</p><a id="more"></a><h2 id="zuul的Filter类型"><a href="#zuul的Filter类型" class="headerlink" title="zuul的Filter类型"></a>zuul的Filter类型</h2><p>Zuul 的 Filter 是通过filterType()方法来指定，一个 Filter 只能对应一种类型，要么是 “pre” 要么是“post”</p><h3 id="Spring-Cloud-Gateway的Filter类型"><a href="#Spring-Cloud-Gateway的Filter类型" class="headerlink" title="Spring Cloud Gateway的Filter类型"></a>Spring Cloud Gateway的Filter类型</h3><p>Spring Cloud Gateway 基于 Project Reactor 和 WebFlux，采用响应式编程风格，打开它的 Filter 的接口GatewayFilter你会发现它只有一个方法filter</p><h2 id="Pre类型的Filter"><a href="#Pre类型的Filter" class="headerlink" title="Pre类型的Filter"></a>Pre类型的Filter</h2><p>在Spring Cloud Gateway源码中定义了一个Pre类型的Filter，code将会在chain.filter() 之前被执行,代码:<a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/filter/factory/AddRequestHeaderGatewayFilterFactory.java" target="_blank" rel="noopener">AddRequestHeader</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.cloud.gateway.filter.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddRequestHeaderGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title">AbstractNameValueGatewayFilterFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(NameValueConfig config)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (exchange, chain) -&gt; &#123;</span><br><span class="line">ServerHttpRequest request = exchange.getRequest().mutate()</span><br><span class="line">.header(config.getName(), config.getValue())</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> chain.filter(exchange.mutate().request(request).build());</span><br><span class="line">&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Post类型的Filter"><a href="#Post类型的Filter" class="headerlink" title="Post类型的Filter"></a>Post类型的Filter</h2><p>对于Post类型的Filter，<a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/filter/factory/SetStatusGatewayFilterFactory.java" target="_blank" rel="noopener">SetStatus</a><br>代码将会在chain.filter(exchange).then()里面的代码运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetStatusGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title">AbstractGatewayFilterFactory</span>&lt;<span class="title">SetStatusGatewayFilterFactory</span>.<span class="title">Config</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Config config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> HttpStatus status = ServerWebExchangeUtils.parse(config.status);</span><br><span class="line">        <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// check not really needed, since it is guarded in setStatusCode,</span></span><br><span class="line">                <span class="comment">// but it's a good example</span></span><br><span class="line">                <span class="keyword">if</span> (!exchange.getResponse().isCommitted()) &#123;</span><br><span class="line">                    setResponseStatus(exchange, status);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Spring Cloud Gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Gateway </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>公益Eureka Server与定制方法</title>
      <link href="/sc/sc-diy-eureka/"/>
      <url>/sc/sc-diy-eureka/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>: 本文主要简单介绍如何定制一个eureka server，并直接指出最优的定制方式。</p><a id="more"></a><h2 id="1-Spring-Cloud中国公益Eureka-Server"><a href="#1-Spring-Cloud中国公益Eureka-Server" class="headerlink" title="1. Spring Cloud中国公益Eureka Server"></a>1. Spring Cloud中国公益Eureka Server</h2><p>Eureka Server为作为Spring Cloud开发过程中常用的注册中心组件，作为基础设施组件，开发学习过程中，经常需要自己创建Eureka Server应用和重启。为了帮助开发者快速学习入门。Spring Cloud中国社区特搭建一个公益注册中心，仅作为帮助Spring Cloud的开发者进行学习和调试。为了更好服务大家，请勿对本注册中心进行压测。定制的Eureka Server注册中心UI如下所示。</p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/1966ed6f184d06c2ab793dcaf2c41c8b.jpeg?Expires=1841654009&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=OeNSoXly3WYi9wfNq3guMPq%2Bt48%3D" alt=""></p><h3 id="1-1-访问地址"><a href="#1-1-访问地址" class="headerlink" title="1.1 访问地址"></a>1.1 访问地址</h3><p> <a href="http://eureka.springcloud.cn" title="http://eureka.springcloud.cn" target="_blank" rel="noopener">http://eureka.springcloud.cn</a></p><h2 id="2-定制Eureka-Serrver的UI"><a href="#2-定制Eureka-Serrver的UI" class="headerlink" title="2.定制Eureka Serrver的UI"></a>2.定制Eureka Serrver的UI</h2><h3 id="2-1-为什么要定制Eureka-Server"><a href="#2-1-为什么要定制Eureka-Server" class="headerlink" title="2.1 为什么要定制Eureka Server"></a>2.1 为什么要定制Eureka Server</h3><p> 原因两点:</p><ul><li>1.觉得默认的UI比较丑  </li><li>2.Eureka Server想客制化一下</li></ul><blockquote><p>至于Spring Cloud Eureka的UI客制化成什么样子由你而定！</p></blockquote><h2 id="3-两种方法定制Eureka-Server"><a href="#3-两种方法定制Eureka-Server" class="headerlink" title="3. 两种方法定制Eureka Server"></a>3. 两种方法定制Eureka Server</h2><h3 id="3-1-直接修改eureka-server的源代码"><a href="#3-1-直接修改eureka-server的源代码" class="headerlink" title="3.1 直接修改eureka server的源代码"></a>3.1 直接修改eureka server的源代码</h3><p>   直接修改eureka server的源代码，该方法是最纯的方式，而且每次有一个Eureka Server的版本都需要去修改。</p><h3 id="3-2-只修改Eureka-Server的UI"><a href="#3-2-只修改Eureka-Server的UI" class="headerlink" title="3.2 只修改Eureka Server的UI"></a>3.2 只修改Eureka Server的UI</h3><p>只需要修改对应的html+css+文案即可，完全不用去修改Eureka Server的源码,强烈推荐。</p><blockquote><p>源码参考地址:<a href="https://github.com/SpringCloud/spring-cloud-eureka" target="_blank" rel="noopener">https://github.com/SpringCloud/spring-cloud-eureka</a></p></blockquote><h3 id="3-3-为什么我定制自己的UI加进去"><a href="#3-3-为什么我定制自己的UI加进去" class="headerlink" title="3.3 为什么我定制自己的UI加进去"></a>3.3 为什么我定制自己的UI加进去</h3><p> 为什么我定制自己的UI加进去，就可以直接Run，那源码代码中的UI是不是被覆盖了？<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.springcloud.eureka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-server-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>如上maven配置所示，官方的spring-cloud-starter-netflix-eureka-server依赖信息配置在下面，由maven的依赖加载顺序决定，定制的UI优先加载显示。</p></blockquote><h2 id="4-如何在项目中使用DIY的Eureka-Server"><a href="#4-如何在项目中使用DIY的Eureka-Server" class="headerlink" title="4. 如何在项目中使用DIY的Eureka Server"></a>4. 如何在项目中使用DIY的Eureka Server</h2><p>只需要配置maven依赖即可:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.springcloud.eureka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-server-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Eureka Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eureka Server </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Gateway的Before路由断言工厂</title>
      <link href="/sc/gw/gw04/"/>
      <url>/sc/gw/gw04/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:在上本篇文章Spring Cloud Gateway的After路由断言工厂介绍了Spring Cloud Gateway核心概念和After路由断言，本文简单介绍Before路由断言工厂。因为比较简单所以就<code>抛砖引玉，旨在帮助大家快速入门Spring Cloud Gateway</code>，欢迎大家<code>加我微信Software_King</code>，进入Spring Cloud中国社区微信群交流。</p><a id="more"></a><h2 id="1-Spring-Cloud-Gateway核心概念"><a href="#1-Spring-Cloud-Gateway核心概念" class="headerlink" title="1. Spring Cloud Gateway核心概念"></a>1. Spring Cloud Gateway核心概念</h2><p>   网关简单的说就是提供一个对外统一的API入口和出口，统管企业对外的所有API出口。一般来说，网关对外暴露的URL或者接口信息，我们统称之为路由信息。如果研发过网关中间件，或者使用或了解过ZUUL的，网关的核心肯定是Filter以及Filter Chain(Filter责任链)。Spring Cloud Gateway也具有路由信息和Filter。下面介绍一下Spring Cloud gateway中最重要的几个概念:</p><ul><li><code>路由(route)</code>:路由是网关最基础的部分，路由信息由一个ID、一个目的url、一组断言工厂和一组Filter组成。如果路由断言工厂为真，则说明请求的Url和配置的路由匹配。</li><li><code>断言(Predicate)</code>: java 8中的断言函数。Spring Cloud Gateway中的断言函数输入类型是Spring 5.0框架中的ServerWebExchange。Spring Cloud Gateway中的断言函数允许开发者去定义匹配来自于http request中的任何信息，比如请求头和参数等。</li><li><code>过滤器(filter)</code>:一个标准的Spring webFilter。Spring Cloud Gateway中的Filter分为两种类型的Filter，分别是Gateway Filter和Global Filter.网关 Filter实例是由Spring 框架中的网关Filter的特殊工厂构造。request在转发到目前服务之前，response在返回到调用端之前都可以被修改或者自定义。</li></ul><h2 id="2-什么是Before路由断言"><a href="#2-什么是Before路由断言" class="headerlink" title="2. 什么是Before路由断言"></a>2. 什么是Before路由断言</h2><p>  <code>Before路由断言工厂</code>带有一个<code>UTC时间格式</code>的时间参数，当请求进来的<code>当前时间在路由断言工厂之前</code>会成功匹配，否则不能成功匹配。</p><h2 id="3-Before路由断言工厂的案例"><a href="#3-Before路由断言工厂的案例" class="headerlink" title="3. Before路由断言工厂的案例"></a>3. Before路由断言工厂的案例</h2><h3 id="3-1-引入pom依赖"><a href="#3-1-引入pom依赖" class="headerlink" title="3.1 引入pom依赖"></a>3.1 引入pom依赖</h3><p>pom.xml依赖配置如下所示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.M9<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-application-yml文件配置"><a href="#3-2-application-yml文件配置" class="headerlink" title="3.2 application.yml文件配置:"></a>3.2 application.yml文件配置:</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      routes:</span></span><br><span class="line"><span class="attr">      - id:</span> <span class="string">before_route</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://xujin.org</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">Before=2022-03-13T00:54:30.877+08:00[Asia/Shanghai]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">org.springframework.cloud.gateway:</span> <span class="string">TRACE</span></span><br><span class="line">    <span class="string">org.springframework.http.server.reactive:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="string">org.springframework.web.reactive:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="string">reactor.ipc.netty:</span> <span class="string">DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="string">management.endpoints.web.exposure.include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure><blockquote><p>Spring Cloud Gateway提供两种方式去配置Before路由断言工厂，这里介绍的是yml文件的配置方式。</p></blockquote><h3 id="3-3-等价的-Bean配置"><a href="#3-3-等价的-Bean配置" class="headerlink" title="3.3 等价的@Bean配置"></a>3.3 等价的@Bean配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ZonedDateTime datetime = LocalDateTime.now().plusDays(<span class="number">1</span>).atZone(ZoneId.systemDefault());</span><br><span class="line"></span><br><span class="line"><span class="comment">//@formatter:off</span></span><br><span class="line"><span class="keyword">return</span> builder.routes()</span><br><span class="line">.route(<span class="string">"before_route"</span>, r -&gt; r.before(datetime)</span><br><span class="line">.uri(<span class="string">"http://xujin.org"</span>))</span><br><span class="line"></span><br><span class="line">.build();</span><br><span class="line"><span class="comment">//@formatter:on</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Spring Cloud Gateway提供两种方式去配置After路由断言工厂，这里介绍的是@Bean的配置方式。不管通过<code>yml文件配置或者通过@Bean</code>的方式配置是等价的。</p></blockquote><h3 id="3-4-测试如下"><a href="#3-4-测试如下" class="headerlink" title="3.4 测试如下:"></a>3.4 测试如下:</h3><p>访问<a href="http://localhost:8082/" target="_blank" rel="noopener">http://localhost:8082/</a> 成功转发到<a href="http://xujin.org。" target="_blank" rel="noopener">http://xujin.org。</a></p>]]></content>
      
      <categories>
          
          <category> Spring Cloud Gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Gateway </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Gateway的After路由断言工厂</title>
      <link href="/sc/gw/gw03/"/>
      <url>/sc/gw/gw03/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本篇文章主要介绍了Spring Cloud Gateway核心概念和After路由断言，因为比较简单所以就<code>抛砖引玉，旨在帮助大家快速入门Spring Cloud Gateway</code>，欢迎大家<code>加我微信Software_King</code>，进入Spring Cloud中国社区微信群交流。<br><a id="more"></a></p><h2 id="1-Spring-Cloud-Gateway核心概念"><a href="#1-Spring-Cloud-Gateway核心概念" class="headerlink" title="1.Spring Cloud Gateway核心概念"></a>1.Spring Cloud Gateway核心概念</h2><p>   网关简单的说就是提供一个对外统一的API入口和出口，统管企业对外的所有API出口。一般来说，网关对外暴露的URL或者接口信息，我们统称之为路由信息。如果研发过网关中间件，或者使用或了解过ZUUL的，网关的核心肯定是Filter以及Filter Chain(Filter责任链)。Spring Cloud Gateway也具有路由信息和Filter。下面介绍一下Spring Cloud gateway中最重要的几个概念:</p><ul><li><code>路由(route)</code>:路由是网关最基础的部分，路由信息由一个ID、一个目的url、一组断言工厂和一组Filter组成。如果路由断言工厂为真，则说明请求的Url和配置的路由匹配。</li><li><code>断言(Predicate)</code>: java 8中的断言函数。Spring Cloud Gateway中的断言函数输入类型是Spring 5.0框架中的ServerWebExchange。Spring Cloud Gateway中的断言函数允许开发者去定义匹配来自于http request中的任何信息，比如请求头和参数等。</li><li><code>过滤器(filter)</code>:一个标准的Spring webFilter。Spring Cloud Gateway中的Filter分为两种类型的Filter，分别是Gateway Filter和Global Filter.网关 Filter实例是由Spring 框架中的网关Filter的特殊工厂构造。request在转发到目前服务之前，response在返回到调用端之前都可以被修改或者自定义。</li></ul><h2 id="2-什么是After路由断言"><a href="#2-什么是After路由断言" class="headerlink" title="2.什么是After路由断言"></a>2.什么是After路由断言</h2><p>   After Route Predicate Factory带有一个UTC时间格式的时间参数，当请求进来的当前时间在路由断言工厂之后会成功匹配，否则不能成功匹配。</p><h2 id="3-After路由断言工厂的案例"><a href="#3-After路由断言工厂的案例" class="headerlink" title="3.After路由断言工厂的案例"></a>3.After路由断言工厂的案例</h2><h3 id="3-1-引入pom依赖"><a href="#3-1-引入pom依赖" class="headerlink" title="3.1 引入pom依赖"></a>3.1 引入pom依赖</h3><p>pom.xml依赖配置如下所示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.M9<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-application-yml文件配置"><a href="#3-2-application-yml文件配置" class="headerlink" title="3.2  application.yml文件配置:"></a>3.2  application.yml文件配置:</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      routes:</span></span><br><span class="line"><span class="attr">      - id:</span> <span class="string">after_route</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://xujin.org</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">After=2018-03-18T17:32:58.129+08:00[Asia/Shanghai]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">org.springframework.cloud.gateway:</span> <span class="string">TRACE</span></span><br><span class="line">    <span class="string">org.springframework.http.server.reactive:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="string">org.springframework.web.reactive:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="string">reactor.ipc.netty:</span> <span class="string">DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="string">management.endpoints.web.exposure.include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure><blockquote><p>Spring Cloud Gateway提供两种方式去配置After路由断言工厂，这里介绍的是yml文件的配置方式。</p></blockquote><h3 id="3-3-等价的-Bean配置"><a href="#3-3-等价的-Bean配置" class="headerlink" title="3.3 等价的@Bean配置"></a>3.3 等价的@Bean配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line">ZonedDateTime minusTime = LocalDateTime.now().minusDays(<span class="number">1</span>).atZone(ZoneId.systemDefault());</span><br><span class="line"><span class="keyword">return</span> builder.routes()</span><br><span class="line">.route(<span class="string">"after_route"</span>, r -&gt; r.after(minusTime)</span><br><span class="line">.uri(<span class="string">"http://xujin.org"</span>))</span><br><span class="line"></span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Spring Cloud Gateway提供两种方式去配置After路由断言工厂，这里介绍的是@Bean的配置方式。不管通过yml文件配置或者通过@Bean的方式配置是等价的。</p></blockquote><h3 id="3-4-测试如下"><a href="#3-4-测试如下" class="headerlink" title="3.4 测试如下:"></a>3.4 测试如下:</h3><p>访问<a href="http://localhost:8081/成功转发到http://xujin.org" target="_blank" rel="noopener">http://localhost:8081/成功转发到http://xujin.org</a></p>]]></content>
      
      <categories>
          
          <category> Spring Cloud Gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Gateway </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Gateway揭秘之处理请求流程</title>
      <link href="/sc/gw/gw02/"/>
      <url>/sc/gw/gw02/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本篇文章主要从源码的角度揭秘Spring Cloud Gateway的怎么处理请求流程。</p><a id="more"></a><h2 id="1-Spring-Gateway概述"><a href="#1-Spring-Gateway概述" class="headerlink" title="1.Spring Gateway概述"></a>1.Spring Gateway概述</h2><p>   <code>Spring Cloud Gateway</code>是Spring官方基于Spring 5.0，Spring Boot 2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供一种简单而有效的统一的API路由管理方式。Spring Cloud Gateway作为Spring Cloud生态系中的网关，目标是替代Netflix ZUUL，其不仅提供统一的路由方式，并且基于Filter链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。</p><h2 id="2-Spring-Cloud-gateway请求入口分析"><a href="#2-Spring-Cloud-gateway请求入口分析" class="headerlink" title="2. Spring Cloud gateway请求入口分析"></a>2. Spring Cloud gateway请求入口分析</h2><p>  不管是Zuul，还是Spring Cloud Gateway还是基于Netty的自研网关，都会把请求进来的Request，或者返回的Response进行包装，转换提取为网关运行的上下文信息，而在Spring Cloud gateway中网关的上下文为ServerWebExchange。</p><h3 id="2-1-入口HttpServerRequest和HttpServerResponse转换"><a href="#2-1-入口HttpServerRequest和HttpServerResponse转换" class="headerlink" title="2.1 入口HttpServerRequest和HttpServerResponse转换"></a>2.1 入口HttpServerRequest和HttpServerResponse转换</h3><p>Spring Cloud Gateway的请求入口，org.springframework.http.server.reactive.ReactorHttpHandlerAdapter#apply方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">apply</span><span class="params">(HttpServerRequest request, HttpServerResponse response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">NettyDataBufferFactory bufferFactory = <span class="keyword">new</span> NettyDataBufferFactory(response.alloc());</span><br><span class="line">ServerHttpRequest adaptedRequest;</span><br><span class="line">ServerHttpResponse adaptedResponse;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">adaptedRequest = <span class="keyword">new</span> ReactorServerHttpRequest(request, bufferFactory);</span><br><span class="line">adaptedResponse = <span class="keyword">new</span> ReactorServerHttpResponse(response, bufferFactory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (URISyntaxException ex) &#123;</span><br><span class="line">logger.error(<span class="string">"Invalid URL "</span> + ex.getMessage(), ex);</span><br><span class="line">response.status(HttpResponseStatus.BAD_REQUEST);</span><br><span class="line"><span class="keyword">return</span> Mono.empty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (adaptedRequest.getMethod() == HttpMethod.HEAD) &#123;</span><br><span class="line">adaptedResponse = <span class="keyword">new</span> HttpHeadResponseDecorator(adaptedResponse);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.httpHandler.handle(adaptedRequest, adaptedResponse)</span><br><span class="line">.doOnError(ex -&gt; logger.error(<span class="string">"Handling completed with error"</span>, ex))</span><br><span class="line">.doOnSuccess(aVoid -&gt; logger.debug(<span class="string">"Handling completed with success"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PS，代码来源于spring-web-5.0.4.RELEASE.jar<br>此方法为Spring Cloud Gateway的请求入口方法，该方法的作用就是把接收到的HttpServerRequest或者最终需要返回的HttpServerResponse，包装转换为ReactorServerHttpRequest和ReactorServerHttpResponse。</p></blockquote><h3 id="2-2-构造Spring-Cloud-gateway的上下文ServerWebExchange"><a href="#2-2-构造Spring-Cloud-gateway的上下文ServerWebExchange" class="headerlink" title="2.2 构造Spring Cloud gateway的上下文ServerWebExchange"></a>2.2 构造Spring Cloud gateway的上下文ServerWebExchange</h3><p>在org.springframework.web.server.adapter.HttpWebHandlerAdapter的182行，代码如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">handle</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response)</span> </span>&#123;</span><br><span class="line">ServerWebExchange exchange = createExchange(request, response);</span><br><span class="line"><span class="keyword">return</span> getDelegate().handle(exchange)</span><br><span class="line">.onErrorResume(ex -&gt; handleFailure(request, response, ex))</span><br><span class="line">.then(Mono.defer(response::setComplete));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>createExchange()将ServerHttpRequest ServerHttpResponse构建网关上下文ServerWebExchange。</p></blockquote><hr><blockquote><p>PS:其中org.springframework.web.server.handler.WebHandlerDecorator.getDelegate()通过委托的方式获取一系列需要处理的WebHandler.</p></blockquote><h3 id="2-3-进入Filter链"><a href="#2-3-进入Filter链" class="headerlink" title="2.3 进入Filter链"></a>2.3 进入Filter链</h3><p>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle方法，即77行，代码如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">handle</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">    Route route = exchange.getRequiredAttribute(GATEWAY_ROUTE_ATTR);</span><br><span class="line">    List&lt;GatewayFilter&gt; gatewayFilters = route.getFilters();</span><br><span class="line"></span><br><span class="line">    List&lt;GatewayFilter&gt; combined = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.globalFilters);</span><br><span class="line">    combined.addAll(gatewayFilters);</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> needed or cached?</span></span><br><span class="line">    AnnotationAwareOrderComparator.sort(combined);</span><br><span class="line"></span><br><span class="line">    logger.debug(<span class="string">"Sorted gatewayFilterFactories: "</span>+ combined);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultGatewayFilterChain(combined).filter(exchange);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-执行Filter链"><a href="#2-4-执行Filter链" class="headerlink" title="2.4 执行Filter链"></a>2.4 执行Filter链</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultGatewayFilterChain</span> <span class="keyword">implements</span> <span class="title">GatewayFilterChain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;GatewayFilter&gt; filters;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultGatewayFilterChain</span><span class="params">(List&lt;GatewayFilter&gt; filters)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.filters = filters;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.index &lt; filters.size()) &#123;</span><br><span class="line">GatewayFilter filter = filters.get(<span class="keyword">this</span>.index++);</span><br><span class="line"><span class="keyword">return</span> filter.filter(exchange, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Mono.empty(); <span class="comment">// complete</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-Gateway-Filter委托为Gloable-Filter执行"><a href="#2-5-Gateway-Filter委托为Gloable-Filter执行" class="headerlink" title="2.5 Gateway Filter委托为Gloable Filter执行"></a>2.5 Gateway Filter委托为Gloable Filter执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayFilterAdapter</span> <span class="keyword">implements</span> <span class="title">GatewayFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> GlobalFilter delegate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GatewayFilterAdapter</span><span class="params">(GlobalFilter delegate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.delegate.filter(exchange, chain);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"GatewayFilterAdapter&#123;"</span>);</span><br><span class="line">sb.append(<span class="string">"delegate="</span>).append(delegate);</span><br><span class="line">sb.append(<span class="string">'&#125;'</span>);</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-预告待续"><a href="#2-6-预告待续" class="headerlink" title="2.6 预告待续"></a>2.6 预告待续</h3><p>在之后的文章中，将会揭秘Spring Cloud Gateway的架构设计，Filter链设计，以及启动装在流程等。</p>]]></content>
      
      <categories>
          
          <category> Spring Cloud Gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud 源码分析 </tag>
            
            <tag> Spring Cloud Gateway </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Gateway入门案例</title>
      <link href="/sc/gw/gw-01/"/>
      <url>/sc/gw/gw-01/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本篇文章主要介绍了什么是<code>Spring Cloud Gateway</code>，并基于Spring Cloud Gateway的Finchley.M8版本编写一个Spring Cloud Gateway的入门案例，即基本代理的路由转发配置。</p><a id="more"></a><h2 id="1-Spring-Gateway概述"><a href="#1-Spring-Gateway概述" class="headerlink" title="1.Spring Gateway概述"></a>1.Spring Gateway概述</h2><h3 id="1-1-什么是Spring-Cloud-Gateway"><a href="#1-1-什么是Spring-Cloud-Gateway" class="headerlink" title="1.1 什么是Spring Cloud Gateway"></a>1.1 什么是Spring Cloud Gateway</h3><p>   <code>Spring Cloud Gateway</code>是Spring官方基于Spring 5.0，Spring Boot 2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供一种简单而有效的统一的API路由管理方式。Spring Cloud Gateway作为Spring Cloud生态系中的网关，目标是替代Netflix ZUUL，其不仅提供统一的路由方式，并且基于Filter链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。</p><h2 id="2-Spring-Cloud-Gateway入门案例"><a href="#2-Spring-Cloud-Gateway入门案例" class="headerlink" title="2. Spring Cloud Gateway入门案例"></a>2. Spring Cloud Gateway入门案例</h2><h3 id="2-1-创建maven工程"><a href="#2-1-创建maven工程" class="headerlink" title="2.1 创建maven工程"></a>2.1 创建maven工程</h3><p>配置Spring  Cloud Gateway的相关Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch18-1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.springcloud.book<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch18-1-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>ch18-1-gateway<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://springcloud.cn<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.M8<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-Spring-Cloud-Gateway主程序"><a href="#2-2-Spring-Cloud-Gateway主程序" class="headerlink" title="2.2  Spring Cloud Gateway主程序"></a>2.2  Spring Cloud Gateway主程序</h3><p>SpringCloudGatewayApplication.java，代码如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.springcloud.book.gateway;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudGatewayApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder.routes()</span><br><span class="line"><span class="comment">//basic proxy</span></span><br><span class="line">.route(r -&gt; r.path(<span class="string">"/baidu"</span>)</span><br><span class="line">.uri(<span class="string">"http://baidu.com:80/"</span>)</span><br><span class="line">).build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SpringCloudGatewayApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-编写application-yml文件"><a href="#2-3-编写application-yml文件" class="headerlink" title="2.3 编写application.yml文件"></a>2.3 编写application.yml文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-gateway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      routes:</span></span><br><span class="line"><span class="attr">      - id:</span> <span class="string">xujin_route</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://www.xujin.org:80/</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">Path=/xujin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">org.springframework.cloud.gateway:</span> <span class="string">TRACE</span></span><br><span class="line">    <span class="string">org.springframework.http.server.reactive:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="string">org.springframework.web.reactive:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="string">reactor.ipc.netty:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><h3 id="2-4-基本代理路由配置等同写法"><a href="#2-4-基本代理路由配置等同写法" class="headerlink" title="2.4 基本代理路由配置等同写法"></a>2.4 基本代理路由配置等同写法</h3><p>Spring Cloud Gateway提供了两种配置路由规则的方法</p><ul><li>第一:通过@Bean自定义RouteLocator<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder.routes()</span><br><span class="line"><span class="comment">//basic proxy</span></span><br><span class="line">.route(r -&gt; r.path(<span class="string">"/baidu"</span>)</span><br><span class="line">.uri(<span class="string">"http://baidu.com:80/"</span>)</span><br><span class="line">).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>第二:通过属于文件或者yml文件配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      routes:</span></span><br><span class="line"><span class="attr">      - id:</span> <span class="string">xujin_route</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://www.xujin.org:80/</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">Path=/xujin</span></span><br></pre></td></tr></table></figure><blockquote><p>PS,以上两种方式等同。</p></blockquote><h3 id="2-5-错误的示范代码如下"><a href="#2-5-错误的示范代码如下" class="headerlink" title="2.5 错误的示范代码如下:"></a>2.5 错误的示范代码如下:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RouteLocator <span class="title">routingConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Routes.locator()</span><br><span class="line">      .route(<span class="string">"xujin_route"</span>)</span><br><span class="line">      .uri(<span class="string">"http://xujin.org"</span>)</span><br><span class="line">      .predicate(host(<span class="string">"**.xujin.org"</span>))</span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>温馨提示，上面这种写法是基于Spring Cloud Gateway FM4的版本，相关代码已废弃，目前Spring Cloud Gateway将会在FM9之后Realese。</p></blockquote><h3 id="2-6-运行测试"><a href="#2-6-运行测试" class="headerlink" title="2.6 运行测试"></a>2.6 运行测试</h3><ol><li>访问<a href="http://localhost:8080/baidu" target="_blank" rel="noopener">http://localhost:8080/baidu</a>,路由转发到<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></li><li>访问<a href="http://localhost:8080/xujin" target="_blank" rel="noopener">http://localhost:8080/xujin</a>,路由转发到<a href="http://xujin.org">http://xujin.orgyml</a></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder.routes()</span><br><span class="line"><span class="comment">//basic proxy</span></span><br><span class="line">.route(r -&gt; r.path(<span class="string">"/baidu"</span>)</span><br><span class="line">.uri(<span class="string">"http://baidu.com:80/"</span>)</span><br><span class="line">).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      routes:</span></span><br><span class="line"><span class="attr">      - id:</span> <span class="string">xujin_route</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://www.xujin.org:80/</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">Path=/xujin</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Spring Cloud Gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud 源码分析 </tag>
            
            <tag> Spring Cloud Gateway </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mysql批量执行更新shell脚本</title>
      <link href="/ex/mysql-batch-update/"/>
      <url>/ex/mysql-batch-update/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:在生产上执行更新sql，当更新的数据超过上100万的时候，执行更新操作会造成卡表或者锁表。本文主要记录一个了批量更新Mysql某张表的数据的脚本代码片。</p><a id="more"></a><h3 id="mysql的批量执行更新"><a href="#mysql的批量执行更新" class="headerlink" title="mysql的批量执行更新"></a>mysql的批量执行更新</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">. ~/.bash_profile</span><br><span class="line"></span><br><span class="line">log=/home/apps/update/update_log_1_$(date +%F).log</span><br><span class="line">vstart=1</span><br><span class="line">step=10000</span><br><span class="line">vstop=$(($&#123;vstart&#125;+$&#123;step&#125;))</span><br><span class="line">max=14800000</span><br><span class="line"></span><br><span class="line">echo "stop value is $vstop"</span><br><span class="line"></span><br><span class="line">while [ $&#123;vstart&#125; -lt $(($&#123;max&#125;+1)) ] </span><br><span class="line">do</span><br><span class="line">        echo "`date +%F-%T`; mysql -uusername -ppwd --default-character-set=utf8 -S /tmp/mysql3306.sock vip_dbname -e\"UPDATE tbname set limit_days=3, update_time=now() where pid between $&#123;vstart&#125;  and $&#123;vstop&#125;\"" &gt;&gt; $&#123;log&#125;</span><br><span class="line">        /apps/svr/mysql5/bin/mysql -uusername -ppwd --default-character-set=utf8 -S /tmp/mysql3306.sock vip_dbname -e"UPDATE  tbname set limit_days=3, update_time=now() where pid between $&#123;vstart&#125;  and $&#123;vstop&#125; "</span><br><span class="line"></span><br><span class="line">        vstart=$(($&#123;vstop&#125;+1))</span><br><span class="line">        vstop=$(($&#123;vstop&#125;+$&#123;step&#125;))</span><br><span class="line"></span><br><span class="line">        if [ $&#123;vstop&#125; -gt $&#123;max&#125; ]; then</span><br><span class="line">                vstop=$&#123;max&#125;</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        sleep 1</span><br><span class="line">        #echo "start at $&#123;vstart&#125;, stop at $&#123;vstop&#125;"</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目经验 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud中基于Sleuth的参数透传功能探索</title>
      <link href="/sc/sq/sc-gfb/"/>
      <url>/sc/sq/sc-gfb/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本文由<code>郭芳碧</code>投稿分享。投<code>稿请加微信Software_King</code>,本篇文章主要介绍Spring Cloud中基于Sleuth的参数透传功能探索的经历和相关解决方案。</p><a id="more"></a><h2 id="一-需求"><a href="#一-需求" class="headerlink" title="一.需求"></a>一.需求</h2><p>微服务环境，有A，B，C，D四个服务，调用关系为：A-&gt;B-&gt;C-&gt;D。用户在A的页面选择当前“语言”环境为“英文”,在某些业务场景下，其它几个服务需获取到这个“语言”信息。</p><h2 id="二-分析"><a href="#二-分析" class="headerlink" title="二.分析"></a>二.分析</h2><p>这个需求还是很简单的，类似于“击鼓传花”：当前服务从上一个服务中获取参数，并传给下一个服务。个人感觉基本上所有的RPC框架都会遇到这个问题，只是以前SOA架构下，服务层级比较少，将“语言”、“登陆”等附加信息放在参数列表中并不会带来太多工作量，所以这个问题并不是太突出。而引入了微服务架构思想后，服务调用层级急剧增长，这就需要一个更加优雅的方式来解决附加信息的传递问题。</p><h2 id="三-方案探索"><a href="#三-方案探索" class="headerlink" title="三.方案探索"></a>三.方案探索</h2><h3 id="3-1-方案一：参数放在接口参数列表中"><a href="#3-1-方案一：参数放在接口参数列表中" class="headerlink" title="3.1 方案一：参数放在接口参数列表中"></a>3.1 方案一：参数放在接口参数列表中</h3><p><strong>优点</strong>：思路简单，开发没有学习成本</p><p><strong>缺点</strong>：</p><ul><li>代码高度耦合：附加信息却要每个接口都显式维护</li><li>升级困难：如果将来再加一个参数，所有层级的接都要改动</li><li>引起迷惑：如果B服务的逻辑不需要“语言“参数，但是因为D需要，它也必须维护</li><li>太傻了，Big不够</li></ul><blockquote><p>思考：微服务之间绝大多数情况是通过HTTP调用的，HTTP的header中也可以放参数信息。这样，接口参数中就不用维护这些附加信了。</p></blockquote><hr><h3 id="3-2-方案二：参数放在httpRequest的header中"><a href="#3-2-方案二：参数放在httpRequest的header中" class="headerlink" title="3.2 方案二：参数放在httpRequest的header中"></a>3.2 方案二：参数放在httpRequest的header中</h3><p><strong>实现</strong>：<br> 1.自定义一个Filter，获取Request中自己需要的附加信息，<br> 2.将这些信息放入ThreadLocal中,<br> 3.实现feign.Client(这里先忽略RestTemplate)的execute()方法，将附件信息在调用下一层服务前塞入request的header中</p><p><strong>优点</strong>：参数解耦</p><p><strong>缺点</strong>：如果B在获取到附加信息后，新起了一个线程”T1“来调用服务C，这时T1就无法从HhreaLocal拿到附加信息了</p><blockquote><p>思考：</p><ol><li>如果我知道怎么用无侵入的方式，在当前线程”T”创建子孙线程”T1”、”T1-1”时，将数据传给后代，就能解决这个问题了</li><li>微服务调用链框架<a href="https://github.com/spring-cloud/spring-cloud-sleuth.git" target="_blank" rel="noopener">Sleuth</a>的核心功能即是跟踪一次请求从A到D的全过程，它肯定支持多线程调用下的traceId的传递。因此，我可以复用Sleuth的相关功能夹带私货</li></ol></blockquote><hr><h3 id="3-3-方案三：修改Sleuth源码，将附加信息跟着TraceId一起往后传递"><a href="#3-3-方案三：修改Sleuth源码，将附加信息跟着TraceId一起往后传递" class="headerlink" title="3.3 方案三：修改Sleuth源码，将附加信息跟着TraceId一起往后传递"></a>3.3 方案三：修改Sleuth源码，将附加信息跟着TraceId一起往后传递</h3><p><strong>优点</strong>：</p><ul><li>原理简单，不用考虑底层实现</li><li>不用考虑兼容性等问题，Sleuth都已经实现好</li><li>快(对，就是这一个字)<br><strong>缺点</strong>：</li><li>维护困难，很容易忘记以前修改了哪些地方，更别提移交给别人维护了</li><li>升级困难，以后每次Spring或者Sleuth升级，都要重新下载源码修改</li></ul><blockquote><p>思考：<br> 目前获取参数的问题解决了，用Filter，只剩下保存并传给下一层的问题<br> 既然Sleuth已经解决了多线程下traceId的传递问题，那我就直接用traceId来解决我的问题</p></blockquote><h3 id="3-4-方案四：充分利用traceId"><a href="#3-4-方案四：充分利用traceId" class="headerlink" title="3.4 方案四：充分利用traceId"></a>3.4 方案四：充分利用traceId</h3><p><strong>实现</strong>：</p><ul><li>自定义Filter(优先级要低于TraceFilter,因为你要获取TraceFilter里的traceId)，拿到traceId和附加信息后，将它们存在本地缓存中，traceId为key，附加信息为value</li><li>参考方案二的实现3。重写execute()方法，获取当前线程的traceId(这个Sleuth有接口，不再介绍)，然后再通过traceId去本地缓存中拿到附加信息，放进Request的header中</li></ul><p><strong>优点</strong>：拥有上述方案所有的优点,解决上述方案所有缺点</p><p><strong>缺点</strong>：看着很完美，但是你忽略了一件事：Sleuth要想传递自己的traceId，想必它已经重写了execute()方法(肯定的，那就是TraceFeignClient)，你要想用，那就要想办法在复用TraceFeignClient.execute()的同时，将自己的私货带进去</p><h3 id="3-5-方案五：重写TraceFeignClient"><a href="#3-5-方案五：重写TraceFeignClient" class="headerlink" title="3.5 方案五：重写TraceFeignClient"></a>3.5 方案五：重写TraceFeignClient</h3><p><strong>实现</strong>：有时候，改动源码并不需要直接在原有包里修改。比如：A-&gt;B-&gt;C-&gt;D，如果你要修改C的源码，那就将AB源码也copy出，作为A1,B1,C#，然后重写组件的入口，将组件加载顺序变为：A1-&gt;B1-&gt;C#-&gt;D，即可达到重写源码的目的。这时候注意的是，加载A1的条件必须跟加载A的相反。具体可参考我之前重写Consul的入口例子，示例代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnExpression</span>(<span class="string">"$&#123;spring.cloud.consul.ribbon.enabled:true&#125;==false"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRibbonConsulAutoConfiguration</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原有入口：</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"spring.cloud.consul.ribbon.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonConsulAutoConfiguration</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>综上，可以重写TraceFeigClient的入口 TraceFeignClientAutoConfiguration-&gt;TraceFeignObjectWrapper&gt;TraceFeignClient,即可达到自己的目的.</p></blockquote><p><strong>优点</strong>：感觉事儿基本就成了</p><p><strong>缺点</strong>：配置为false生效，使用者会觉得比较怪,Sleuth仿佛知道别人会这么干似的，它的类的访问权限基本都是default，为了copy过来的几个类能正常编译通过，你还要再copy九个它们的依赖类,程序太丑</p><blockquote><p>思考:突然想起来，还有一种改代码的方式叫字节码替换，如果我能在程序启动的时，将我的execute()直接替换掉Sleuth的execute(),就一劳永逸了</p></blockquote><h3 id="3-6-方案六：字节码替换代源码修改"><a href="#3-6-方案六：字节码替换代源码修改" class="headerlink" title="3.6 方案六：字节码替换代源码修改"></a>3.6 方案六：字节码替换代源码修改</h3><p><strong>优点</strong>：高大上,不在源码级替换，却在字节码级替换，虚虚实实</p><p><strong>缺点</strong>：没这么干过，总觉得说着容易做着难</p><blockquote><p>思考：基本上觉得方案五已经能解决问题了。本着精益求精的态度，去技术群里问了下，很快有<a href="https://github.com/saleson" target="_blank" rel="noopener">大神</a>发来<a href="https://github.com/saleson/fm-cloud.git" target="_blank" rel="noopener">Demo</a>,看过代码后顿觉惭愧：我一直在想怎么重写TraceFeignClient的execute()，其实这个execute()真正做http请求时，调用的是feign.Client的另外一个实现类,注意那句”this.delegate.execute”，只要想办法用自己的Client替换掉delegate即可</p></blockquote><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(MethodHandles.lookup().lookupClass());</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Client delegate;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">execute</span><span class="params">(Request request, Request.Options options)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String spanName = getSpanName(request);</span><br><span class="line">Span span = getTracer().createSpan(spanName);</span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">log.debug(<span class="string">"Created new Feign span "</span> + span);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">AtomicReference&lt;Request&gt; feignRequest = <span class="keyword">new</span> AtomicReference&lt;&gt;(request);</span><br><span class="line">spanInjector().inject(span, <span class="keyword">new</span> FeignRequestTextMap(feignRequest));</span><br><span class="line">span.logEvent(Span.CLIENT_SEND);</span><br><span class="line">addRequestTags(request);</span><br><span class="line">Request modifiedRequest = feignRequest.get();</span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">log.debug(<span class="string">"The modified request equals "</span> + modifiedRequest);</span><br><span class="line">&#125;</span><br><span class="line">Response response = <span class="keyword">this</span>.delegate.execute(modifiedRequest, options);</span><br><span class="line">logCr();</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125; <span class="keyword">catch</span> (RuntimeException | IOException e) &#123;</span><br><span class="line">logCr();</span><br><span class="line">logError(e);</span><br><span class="line"><span class="keyword">throw</span> e;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">closeSpan(span);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-方案七：替换掉TraceFeigClient的delegate即可"><a href="#3-7-方案七：替换掉TraceFeigClient的delegate即可" class="headerlink" title="3.7 方案七：替换掉TraceFeigClient的delegate即可"></a>3.7 方案七：替换掉TraceFeigClient的delegate即可</h3><p> <strong>实现</strong>:通过<strong>再次认真</strong>Debug源码知道，TraceFeignClient默认会加载你的Client实现类作为delegate(汗！)，因此你只要直接实现feign.Client接口即可。我偷懒了一把，自己写个实现类，直接复用了LoadBalancerFeignClient.execute()<br> <strong>优点</strong>:基本什么都有了吧<br> <strong>缺点</strong>:如果你以为只是简单地重写个execute()就行，那就大错特了。因为TraceFeignClient直接用了你的方法post过去，因此你要想办法把ribbon手动集成进来。如果不觉得麻烦的话，可以好好看下TraceFeignClient怎么生成Client的实例：TraceFeignObjectWrapper.wrap(Object bean)</p><blockquote><p>思考:既然你可以在程序里获取到trace和span，那为何不将你的信息放到span里呢。如果span中能放点额外信息就好了，就不用自己写这么多东西。经<a href="https://github.com/huanglc1988" target="_blank" rel="noopener">大神</a>提醒，Sleuth中有个baggage可以试试</p></blockquote><h3 id="3-8-方案八：使用baggage"><a href="#3-8-方案八：使用baggage" class="headerlink" title="3.8 方案八：使用baggage"></a>3.8 方案八：使用baggage</h3><p> <strong>实现:</strong>获取参数的方式不变，取得的参数放在baggage中</p><p> <strong>优点:</strong>简单,支持RestTemplate调用的情况,跟其他组件兼容性好</p><p> <strong>缺点:</strong>Sleuth的缺点</p><h2 id="四-项目源码"><a href="#四-项目源码" class="headerlink" title="四.项目源码"></a>四.项目源码</h2><h3 id="4-1-基于slueth的参数透传插件"><a href="#4-1-基于slueth的参数透传插件" class="headerlink" title="4.1 基于slueth的参数透传插件"></a>4.1 基于slueth的参数透传插件</h3><p>Github地址:<a href="https://github.com/bishion/sleuth-plugin" target="_blank" rel="noopener">https://github.com/bishion/sleuth-plugin</a></p><p><strong>简介</strong>:微服务下使用,调用过程中用户信息，页面语言信息的透传<br><strong>使用方式</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bizi:</span></span><br><span class="line"><span class="attr">  sleuth:</span> </span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      headers:</span> <span class="string">lang_info</span> <span class="comment">#如果由多个，逗号隔开.这里配置从filter里需要获取的headerName</span></span><br></pre></td></tr></table></figure><p><strong>调用方式</strong></p><figure class="highlight java"><figcaption><span>first_line:22   </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionInfoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SessionInfoOperator sessionInfoOperator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLangInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sessionInfoOperator.getSessionInfo(<span class="string">"lang_info"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sessionInfoOperator.setSessionInfo(<span class="string">"user_id"</span>,<span class="string">"bishion"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五-留下的坑"><a href="#五-留下的坑" class="headerlink" title="五.留下的坑"></a>五.留下的坑</h2><ol><li>Sleuth通过<em>LazyTraceExecutor</em>解决多线程下的问题，但是它并没有解决<strong>给手动创建的Thread传递信息</strong>的问题</li><li>有机会试试java字节码替换怎么操作</li><li>Sleuth如何重写RestTemplate的</li><li>TraceFeignClient怎么生成Client的实例</li></ol><h2 id="六-后记"><a href="#六-后记" class="headerlink" title="六.后记"></a>六.后记</h2><p>因为附加信息的传递在RPC中扮演了很重要的角色，我潜意识里觉得，肯定会有更加简洁的方法或者框架我还没有了解到。希望各位各位读者老师能不吝珠玉，批评指正</p>]]></content>
      
      <categories>
          
          <category> 社区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 使用 HTTP2的性能压测对比</title>
      <link href="/sc/sq/sc-http2/"/>
      <url>/sc/sq/sc-http2/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本文由<code>何鹰</code>投稿分享。投<code>稿请加微信Software_King</code>,本文主要是对Spring Cloud中的HTTP2的性能进行压测分析，生成压测结果。<a href="https://github.com/charlesvhe/spring-cloud-practice/tree/http2" target="_blank" rel="noopener">spring cloud 使用 HTTP2源码地址</a></p><a id="more"></a><h2 id="一-Spring-Cloud-使用-HTTP2"><a href="#一-Spring-Cloud-使用-HTTP2" class="headerlink" title="一.Spring Cloud 使用 HTTP2"></a>一.Spring Cloud 使用 HTTP2</h2><p>  我本人是从 Dubbo 转用 Spring cloud。2016年9月左右刚接触 Spring cloud，那个时候跟大家一样做了很多 dubbo vs Spring cloud 的对比分析。当时最大的疑问是性能对比，问 Josh Long 后续有无支持类似于 dubbo 的其他RPC、序列化协议，他说 HTTP2性能已经足够好了，没有计划支持。当时想到 HTTP2是多路复用，长连接，性能损失仅仅是序列化反序列化的区别，因此就此打住没有深入测试。</p><p><img src="https://raw.githubusercontent.com/charlesvhe/spring-cloud-practice/http2/chrome.net-internals.png" alt="Chrome HTTP2"></p><p>上周在 W3上看到张琦的帖子里说到 ServiceCombo以性能问题第一个就把 Spring cloud 淘汰了，加上之前的dubbo vs Spring cloud 性能测试结果，就想到用 HTTP2进一步优化 Spring cloud 性能。<br><a href="https://mp.weixin.qq.com/s?__biz=MzA5MzQ2NTY0OA==&amp;mid=2650796496&amp;idx=1&amp;sn=a544b76660484b9914b65f038cc39e6d&amp;chksm=88562c8fbf21a5995909ffa9f172f31651b1ebd04897917e43caef3491954e24ed0d0477a5a1&amp;mpshare=1&amp;scene=23&amp;srcid=01245faqrBlQETYK9c7zVmd3#rd" target="_blank" rel="noopener">孰优孰劣？Dubbo VS Spring Cloud性能测试大对决！</a></p><h2 id="二-启动顺序"><a href="#二-启动顺序" class="headerlink" title="二.启动顺序"></a>二.启动顺序</h2><h3 id="2-1-启动-config"><a href="#2-1-启动-config" class="headerlink" title="2.1 启动 config"></a>2.1 启动 config</h3><h3 id="2-2-启动-eureka"><a href="#2-2-启动-eureka" class="headerlink" title="2.2 启动 eureka"></a>2.2 启动 eureka</h3><h3 id="2-3-启动-provider"><a href="#2-3-启动-provider" class="headerlink" title="2.3 启动 provider"></a>2.3 启动 provider</h3><h3 id="2-4-启动-consumer"><a href="#2-4-启动-consumer" class="headerlink" title="2.4 启动 consumer"></a>2.4 启动 consumer</h3><p>JDK9以下不默认支持HTTP2，需要添加启动参数：</p><blockquote><p>-Xbootclasspath/p:/Users/charles/.m2/repository/org/mortbay/jetty/alpn/alpn-boot/8.1.12-SNAPSHOT/alpn-boot-8.1.12-SNAPSHOT.jar</p></blockquote><h2 id="三-测试-HTTP2"><a href="#三-测试-HTTP2" class="headerlink" title="三.测试 HTTP2"></a>三.测试 HTTP2</h2><h3 id="3-1-测试服务提供者"><a href="#3-1-测试服务提供者" class="headerlink" title="3.1 测试服务提供者"></a>3.1 测试服务提供者</h3><p>访问 <a href="https://localhost:8443/user" target="_blank" rel="noopener">https://localhost:8443/user</a><br>访问 chrome://net-internals/#http2<br>确认服务器HTTP2支持已经开启</p><h3 id="3-2-测试服务消费者"><a href="#3-2-测试服务消费者" class="headerlink" title="3.2 测试服务消费者"></a>3.2 测试服务消费者</h3><p>访问 <a href="http://localhost:18090/test" target="_blank" rel="noopener">http://localhost:18090/test</a><br>在服务提供者控制台查看日志 是否是 http2 协议</p><blockquote><p>2017-12-17 11:36:59.479  INFO 663 — [  XNIO-2 task-7] c.g.c.s.p.p.controller.UserController    : query all HTTP/2.0  [accept-language:en-US,en;q=0.9]  [upgrade-insecure-requests:1]  [Host:localhost:8443]  [accept-encoding:gzip, deflate, br]  [accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,<em>/</em>;q=0.8]  [user-agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36] </p></blockquote><h3 id="3-3-测试性能"><a href="#3-3-测试性能" class="headerlink" title="3.3 测试性能"></a>3.3 测试性能</h3><p>访问：</p><blockquote><p><a href="http://localhost:18090/test/count?thread=200&amp;api=test100" target="_blank" rel="noopener">http://localhost:18090/test/count?thread=200&amp;api=test100</a></p></blockquote><p>thread 可以为任意值<br>api为 test10 test100 test1000<br>服务消费者控制台查看吞吐量</p><h2 id="四-性能对比"><a href="#四-性能对比" class="headerlink" title="四.性能对比"></a>四.性能对比</h2><h3 id="4-1-测试-HTTP-with-SSL-性能对比"><a href="#4-1-测试-HTTP-with-SSL-性能对比" class="headerlink" title="4.1 测试 HTTP with SSL 性能对比"></a>4.1 测试 HTTP with SSL 性能对比</h3><p>provider bootstrap.properties 注释 server.http2.enabled=true<br>和上面一样进行性能测试</p><h3 id="4-2-测试-HTTP-性能对比"><a href="#4-2-测试-HTTP-性能对比" class="headerlink" title="4.2 测试 HTTP 性能对比"></a>4.2 测试 HTTP 性能对比</h3><p>provider bootstrap.properties 注释 server.http2.enabled=true以及下方所有配置项<br>和上面一样进行性能测试</p><h3 id="4-3-测试-HTTP-without-Keep-Alive"><a href="#4-3-测试-HTTP-without-Keep-Alive" class="headerlink" title="4.3 测试 HTTP without Keep-Alive"></a>4.3 测试 HTTP without Keep-Alive</h3><p>修改TestController 每次 new RestTemplate (其实在 Header 中指定 Connection=close 可以关闭 Keep-Alive 但是会运行一段时间后超时 error)</p><blockquote><p>new RestTemplate().getForObject(“<a href="http://127.0.0.1:8080/user/" target="_blank" rel="noopener">http://127.0.0.1:8080/user/</a>“ + api, String.class);</p><p>// restTemplate.getForObject(“<a href="http://provider/user/" target="_blank" rel="noopener">http://provider/user/</a>“ + api, String.class);</p></blockquote><h3 id="4-4-测试结果-吞吐量-秒"><a href="#4-4-测试结果-吞吐量-秒" class="headerlink" title="4.4 测试结果 吞吐量/秒"></a>4.4 测试结果 吞吐量/秒</h3><table><thead><tr><th>测试组合</th><th>HTTP without Keep-Alive</th><th>HTTP with Keep-Alive</th><th>HTTP+SSL</th><th>HTTP2</th></tr></thead><tbody><tr><td>T100 O10</td><td>1210</td><td>8850</td><td>3310</td><td>6320</td></tr><tr><td>T100 0100</td><td>1115</td><td>7525</td><td>2225</td><td>3410</td></tr><tr><td>T100 01000</td><td>950</td><td>2710</td><td>1150</td><td>1080</td></tr><tr><td>T200 010</td><td>1050</td><td>8650+error</td><td>4200+error</td><td>6120</td></tr><tr><td>T200 0100</td><td>1035</td><td>7250</td><td>330+error</td><td>3250</td></tr><tr><td>T200 01000</td><td>870</td><td>2650</td><td>495</td><td>930</td></tr></tbody></table><p>分析：</p><p>测试结果与 Josh Long 所说不同，HTTP2并不能带来性能的提升。HTTP2 的多路复用相比 HTTP1.1 Keep-Alive 的”单路复用”相比优势并不大，反而带来了 SSL 加解密的性能损失(HTTP2协议本身不要求 SSL，但是目前实现均为 HTTP2强制 SSL)。HTTP2多路复用可以节省链接，避免链接超容器上限。</p><p>HTTP2+SSL 相比 HTTP1.1+SSL 有性能优势，但是针对 Spring cloud 内部调用场景我们并不会开启 HTTPS，因此是个废的，在此场景之下最佳选择是 <strong>HTTP1.1 + Keep-Alive</strong>。</p><blockquote><p>原文链接:<a href="http://www.jianshu.com/p/ed3f8f983764" target="_blank" rel="noopener">http://www.jianshu.com/p/ed3f8f983764</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> 社区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> http2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于Spring Cloud的几个自研微服务组件</title>
      <link href="/sc/sq/sc-zyzj/"/>
      <url>/sc/sq/sc-zyzj/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本文由<code>宜信-技术研发中心-高级架构师-梁鑫</code>投稿分享。投<code>稿请加微信Software_King</code>,之前分享了一下我在公司项目中搭建Spring Cloud框架的经验，在此基础之上，为了更好的满足业务功能需求和便捷运维的需要，我们开发了几个基于springcloud的微服务组件，在此做个总结跟大家共同探讨一下。</p><a id="more"></a><h2 id="基于SpringCloud的几个自研微服务组件"><a href="#基于SpringCloud的几个自研微服务组件" class="headerlink" title="基于SpringCloud的几个自研微服务组件"></a>基于SpringCloud的几个自研微服务组件</h2><h3 id="一-应用管理中心"><a href="#一-应用管理中心" class="headerlink" title="一.应用管理中心"></a>一.应用管理中心</h3><p>采用微服务架构以后，把原先单一的节点拆解成了多个微服务节点。公司虽然有一键发布平台，但是是针对每一个节点采取单独的发布，启动，停止操作，没有全局化统一管理功能。上线运维的工作量就变的非常庞大，因此我们开发了基于springcloud的应用管理中心来方便我们的工作。</p><h4 id="1-1-实现机制"><a href="#1-1-实现机制" class="headerlink" title="1.1 实现机制"></a>1.1 实现机制</h4><ul><li>每个微服务启动时，将自身的进程ID，当前路径，JDK路径，jar名称，系统用户，IP地址，端口号注册到zookeeper;</li><li>应用管理中心从zookeeper中查询到所有的微服务进程信息；</li><li>获取信息后构造启动命令，停止命令；</li><li>在数据库保存系统的用户名和密码；</li><li>在部署时指定git地址，分支，IP等调用jenkins，编译生成最新jar包拷贝到目标服务器指定位置；</li><li>通过远程jsch远程执行shell命令对微服务进程进行操作。</li></ul><h4 id="1-2-功能原理"><a href="#1-2-功能原理" class="headerlink" title="1.2 功能原理"></a>1.2 功能原理</h4><p><img src="/images/sq/app_yuanli.png" alt="功能原理"></p><h4 id="1-3-效果图"><a href="#1-3-效果图" class="headerlink" title="1.3 效果图"></a>1.3 效果图</h4><p><img src="/images/sq/app1.png" alt="Image text"><br><img src="/images/sq/app2.png" alt="Image text"><br><img src="/images/sq/app3.png" alt="Image text"></p><h3 id="二-微服务健康检测中心"><a href="#二-微服务健康检测中心" class="headerlink" title="二.微服务健康检测中心"></a>二.微服务健康检测中心</h3><p>基于actuator我们可以很好的针对每个微服务节点进行监控，当出现问题时及时报警。</p><h4 id="2-1-实现机制"><a href="#2-1-实现机制" class="headerlink" title="2.1 实现机制"></a>2.1 实现机制</h4><ul><li>保证所有的微服务节点都加载了actuator;</li><li>从eureka中获取所有的微服务注册信息；</li><li>定时任务轮询请求每个微服务的health信息；</li><li>Health返回status树壮结构信息；</li><li>如果status状态为down发送报警并包含health完整信息。</li></ul><h4 id="2-2-功能原理"><a href="#2-2-功能原理" class="headerlink" title="2.2 功能原理"></a>2.2 功能原理</h4><p><img src="/images/sq/health_yuanli.png" alt="Image text"></p><h4 id="2-3-效果图"><a href="#2-3-效果图" class="headerlink" title="2.3 效果图"></a>2.3 效果图</h4><p>我们在健康检测中心中同时加载了spring boot admin,可以随时查看微服务节点的所有运行信息。</p><p><img src="/images/sq/health1.png" alt="Image text"></p><h4 id="2-4-部分源码"><a href="#2-4-部分源码" class="headerlink" title="2.4 部分源码"></a>2.4 部分源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled</span>(initialDelay = <span class="number">10000L</span>, fixedRate = <span class="number">60000L</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduledTaskHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">    List&lt;String&gt; items = getIPAndPorts();</span><br><span class="line">    <span class="keyword">for</span> (String IPAndPort : items) &#123;</span><br><span class="line">        LOGGER.info(<span class="string">"prepare checking "</span> + IPAndPort);</span><br><span class="line">        <span class="keyword">if</span> (IPAndPort.isEmpty()) &#123;</span><br><span class="line">            LOGGER.warn(<span class="string">"checking "</span> + IPAndPort + <span class="string">" is empty"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] item = IPAndPort.split(<span class="string">":"</span>);</span><br><span class="line">            String info = healthService.getHealthInfo(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">            String prettyjson = getPrettyJSON(info);</span><br><span class="line">            ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">            Map&lt;?, ?&gt; infoMap = mapper.readValue(info, <span class="keyword">new</span> TypeReference&lt;Map&gt;() &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (infoMap.containsKey(STATUS)) &#123;</span><br><span class="line">                String status = infoMap.get(STATUS).toString();</span><br><span class="line">                <span class="keyword">if</span> (status.equals(UP)) &#123;</span><br><span class="line">                    LOGGER.info(<span class="string">"checking "</span> + IPAndPort + <span class="string">" is UP:\n"</span> + prettyjson);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            emailService.sendLimitedEmail(prettyjson, IPAndPort, IPAndPort, <span class="number">10</span> * <span class="number">60</span> * <span class="number">1000L</span>);</span><br><span class="line">            LOGGER.info(<span class="string">"checking "</span> + IPAndPort + <span class="string">" is DOWN:\n"</span> + prettyjson);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (feign.RetryableException ex) &#123;</span><br><span class="line">            String content = exception2String(ex);</span><br><span class="line">            emailService.sendEmail(content, <span class="string">"程序运行异常"</span>);</span><br><span class="line">            LOGGER.info(<span class="string">"checking "</span> + IPAndPort + <span class="string">" is DOWN"</span>);</span><br><span class="line">            LOGGER.error(<span class="string">""</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (FeignException fex) &#123;</span><br><span class="line">            String body = getBodyFromFeignException(fex);</span><br><span class="line">            String prettybody = getPrettyJSON(body);</span><br><span class="line">            emailService.sendLimitedEmail(prettybody, IPAndPort, IPAndPort, <span class="number">10</span> * <span class="number">60</span> * <span class="number">1000L</span>);</span><br><span class="line">            LOGGER.info(<span class="string">"checking "</span> + IPAndPort + <span class="string">" is DOWN:\n"</span> + prettybody);</span><br><span class="line">            LOGGER.error(<span class="string">""</span>, fex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            String content = exception2String(ex);</span><br><span class="line">            emailService.sendEmail(content, <span class="string">"程序运行异常"</span>);</span><br><span class="line">            LOGGER.info(<span class="string">"checking "</span> + IPAndPort + <span class="string">" is DOWN"</span>);</span><br><span class="line">            LOGGER.error(<span class="string">""</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LOGGER.info(<span class="string">"SkytrainHealthChecking cost: "</span> + (System.currentTimeMillis() - begin) + <span class="string">" Millis"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-定时任务管理中心"><a href="#三-定时任务管理中心" class="headerlink" title="三.定时任务管理中心"></a>三.定时任务管理中心</h3><p>我们需要建立定时任务全局视图，并希望对每一个定时任务具备启停的能力。我们采用了通过继承统一的AbstractScheduledTask，暴露定时任务的启动，停止接口。让每一个定时任务自动具备的启停功能。</p><h4 id="3-1-实现机制"><a href="#3-1-实现机制" class="headerlink" title="3.1 实现机制"></a>3.1 实现机制</h4><ul><li>通过BeanPostProcessor在bean初始完成后拦截所有的@Scheduled注解，获取ip，port，applicationName，className，beanName，scheduled等信息注册到zookeeper；</li><li>定时任务实现继承AbstractScheduledTaskInter接口，暴露startScheduledTask和stopScheduledTask，可以针对定时任务进行启动停止；</li><li>实现基准TaskScheduledController类，通过beanName获取定时任务类，调用该类的启动停止方法；</li><li>定时任务管理中心查询zookeeper展示全局注册的定时任务，提供启动停止操作对定时任务进行控制；</li><li>定时任务分为全局唯一定时任务和非唯一定时任务。</li></ul><h4 id="3-2-功能原理"><a href="#3-2-功能原理" class="headerlink" title="3.2 功能原理"></a>3.2 功能原理</h4><p><img src="/images/sq/task_yuanli.png" alt="Image text"></p><h4 id="3-3-效果图"><a href="#3-3-效果图" class="headerlink" title="3.3 效果图"></a>3.3 效果图</h4><p><img src="/images/sq/task1.png" alt="Image text"><br><img src="/images/sq/task2.png" alt="Image text"></p><h4 id="3-4-部分源码"><a href="#3-4-部分源码" class="headerlink" title="3.4 部分源码"></a>3.4 部分源码</h4><ul><li>获取定时任务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfter</span><span class="params">(Object bean, String beanName)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; targetClass = AopUtils.getTargetClass(bean);</span><br><span class="line">    Map&lt;Method, Set&lt;Scheduled&gt;&gt; annotatedMethods = MethodIntrospector.selectMethods(targetClass,</span><br><span class="line">            <span class="keyword">new</span> MethodIntrospector.MetadataLookup&lt;Set&lt;Scheduled&gt;&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Set&lt;Scheduled&gt; <span class="title">inspect</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">                    Set&lt;Scheduled&gt; scheduledMethods = AnnotatedElementUtils.getMergedRepeatableAnnotations(method,</span><br><span class="line">                            Scheduled.class, Schedules.class);</span><br><span class="line">                    <span class="keyword">return</span> (!scheduledMethods.isEmpty() ? scheduledMethods : <span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="keyword">if</span> (!annotatedMethods.isEmpty()) &#123;</span><br><span class="line">        String className = targetClass.getName();</span><br><span class="line">        className = SpringBeanUtil.getNormalClassName(className);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Method, Set&lt;Scheduled&gt;&gt; entry : annotatedMethods.entrySet()) &#123;</span><br><span class="line">            Method method = entry.getKey();</span><br><span class="line">            <span class="keyword">for</span> (Scheduled scheduled : entry.getValue()) &#123;</span><br><span class="line">                String key = className + <span class="string">":"</span> + method.getName();</span><br><span class="line">                Map&lt;String, String&gt; scheduledMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">                scheduledMap.put(<span class="string">"className"</span>, className);</span><br><span class="line">                scheduledMap.put(<span class="string">"methodName"</span>, method.getName());</span><br><span class="line">                scheduledMap.put(<span class="string">"beanName"</span>, beanName);</span><br><span class="line">                scheduledMap.put(<span class="string">"scheduled"</span>, scheduled.toString());</span><br><span class="line">                taskInfos.put(key, scheduledMap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AbstractScheduledTask</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractScheduledTask</span> <span class="keyword">implements</span> <span class="title">AbstractScheduledTaskInter</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> scheduledTaskStatus = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">startScheduledTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    scheduledTaskStatus = <span class="keyword">true</span>;</span><br><span class="line">    updateRegisterTaskStatus(scheduledTaskStatus);</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(scheduledTaskStatus);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">stopScheduledTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    scheduledTaskStatus = <span class="keyword">false</span>;</span><br><span class="line">    updateRegisterTaskStatus(scheduledTaskStatus);</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(scheduledTaskStatus);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateRegisterTaskStatus</span><span class="params">(<span class="keyword">boolean</span> status)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String className = <span class="keyword">this</span>.getClass().getName();</span><br><span class="line">        className=SpringBeanUtil.getNormalClassName(className);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">        LOGGER.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> isRegister = <span class="keyword">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRegister</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isRegister) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduledTaskController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isRegister()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (scheduledTaskStatus) &#123;</span><br><span class="line">            scheduledTaskHandler();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">scheduledTaskHandler</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具备启停能力</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskScheduledController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/start_scheduled_task"</span>, produces = <span class="string">"application/json;charset=UTF-8"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">start</span><span class="params">(@RequestParam()</span> String beanName) </span>&#123;</span><br><span class="line">        AbstractScheduledTaskInter scheduledTask = SpringBeanUtil.getBean(beanName);</span><br><span class="line">        <span class="keyword">return</span> scheduledTask.startScheduledTask();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/stop_scheduled_task"</span>, produces = <span class="string">"application/json;charset=UTF-8"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">stop</span><span class="params">(@RequestParam()</span> String beanName) </span>&#123;</span><br><span class="line">        AbstractScheduledTaskInter scheduledTask = SpringBeanUtil.getBean(beanName);</span><br><span class="line">        <span class="keyword">return</span> scheduledTask.stopScheduledTask();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-全局热备锁"><a href="#四-全局热备锁" class="headerlink" title="四.全局热备锁"></a>四.全局热备锁</h3><p>无论定时任务还是普通跑批任务，我们需要对这些任务实现热备，以便在单点故障时任务依然可以顺利的执行。</p><h4 id="4-1-实现机制"><a href="#4-1-实现机制" class="headerlink" title="4.1 实现机制"></a>4.1 实现机制</h4><ul><li>全局热备锁包括普通任务（例如监听rabbitmq消息）和定时任务；</li><li>任务以applicationName和className标识唯一，任务启动时把相关信息注册到zookeeper；</li><li>其他节点的任务启动时发现已经有任务运行，则监听zookeeper；</li><li>运行任务停止后，其它节点根据监听状态启动自身任务；</li><li>定时任务和普通任务不同，定时任务需要注册非运行节点，并对子节点数目变化和子节点数据变化都做监听。</li></ul><h4 id="4-2-功能原理"><a href="#4-2-功能原理" class="headerlink" title="4.2 功能原理"></a>4.2 功能原理</h4><p><img src="/images/sq/lock_yuanli.png" alt="Image text"></p><h4 id="4-3-效果图"><a href="#4-3-效果图" class="headerlink" title="4.3 效果图"></a>4.3 效果图</h4><p><img src="/images/sq/lock1.png" alt="Image text"></p><h4 id="4-4-部分源码"><a href="#4-4-部分源码" class="headerlink" title="4.4 部分源码"></a>4.4 部分源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractGlobalLockTask</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(<span class="keyword">final</span> String... strings)</span> </span>&#123;</span><br><span class="line">        String className = getClass().getName();</span><br><span class="line">        className = SpringBeanUtil.getNormalClassName(className);</span><br><span class="line">        <span class="keyword">final</span> String alarmConfigPath = SKYTRAIN_GlOBAL_LOCK_TASK_PREFIX + applicationName + <span class="string">":"</span> + className;</span><br><span class="line">        <span class="keyword">boolean</span> exists = zooKeeperExecutor.isExists(alarmConfigPath);</span><br><span class="line">        <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">            JSONObject info = <span class="keyword">new</span> JSONObject();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                info.put(<span class="string">"applicationName"</span>, applicationName);</span><br><span class="line">                info.put(<span class="string">"className"</span>, className);</span><br><span class="line">                info.put(<span class="string">"ip"</span>, ipAddress);</span><br><span class="line">                info.put(<span class="string">"port"</span>, serverPort);</span><br><span class="line">                info.put(<span class="string">"date"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">                LOGGER.error(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            createGlobalLockNode(alarmConfigPath, info.toString(), strings);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                zooKeeperExecutor.getZooKeeper().exists(alarmConfigPath, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class="line">                        LOGGER.info(<span class="string">"事件类型"</span> + watchedEvent.getType() + <span class="string">"，路径"</span> + watchedEvent.getPath());</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            register(strings);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            LOGGER.error(<span class="string">""</span>, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">                LOGGER.error(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                LOGGER.error(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createGlobalLockNode</span><span class="params">(String path, String value, String... strings)</span> </span>&#123;</span><br><span class="line">        zooKeeperExecutor.createZKNode(path, value);</span><br><span class="line">        handler(strings);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        register(strings);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(String... strings)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>作者：宜信-技术研发中心-高级架构师-梁鑫</p></blockquote>]]></content>
      
      <categories>
          
          <category> 社区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Spring Cloud自研组件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>走进Spring Cloud CodeGen上篇</title>
      <link href="/ex/sc-codegen/"/>
      <url>/ex/sc-codegen/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本文主要介绍由<code>Spring Cloud中国社区发起</code>的以<code>Spring Cloud为主</code>的代码生成器，目的是<code>快速，按需勾选，生成最优实践的Spring Cloud工程</code>。欢迎有想法的<code>小伙伴加入Spring Cloud中国社区开源战队</code>，关于代码生成器和spring-cloud-codegen的设计细节后面将有一系列的文章介绍。</p><a id="more"></a><h2 id="一-Spring-Cloud-CodeGen概述"><a href="#一-Spring-Cloud-CodeGen概述" class="headerlink" title="一.Spring Cloud CodeGen概述"></a>一.Spring Cloud CodeGen概述</h2><h3 id="1-1-为什么要开发Spring-Cloud-CodeGen"><a href="#1-1-为什么要开发Spring-Cloud-CodeGen" class="headerlink" title="1.1 为什么要开发Spring Cloud CodeGen"></a>1.1 为什么要开发Spring Cloud CodeGen</h3><p>  如何生成项目的代码？ 不少开发人员都会使用Maven的Archetype或IDEA的Gradle插件，通过几个简单的交互就可以快速完成项目的结构和对应的代码生成。但是Spring官方也给我们提供了<a href="http://start.spring.io" target="_blank" rel="noopener">http://start.spring.io</a> 生成，道理很简单：UI可视化，选择项多，更新快。但是例如:application.properties文件的生成,<code>官方是不会生成对应的配置项的</code> 因此也有不少公司对其进行代码增强处理二次开发处理。</p><hr><p>根据目前社区和现在使用代码生成器的现状，迫切希望打造一个如下的代码生成器:</p><ul><li>业界最佳Spring Cloud微服务实战经验打造最佳代码生成模板</li><li>容器化/Docker支持： 根据你选择的dependency，自动生成docker-compose.yml文件，如选择mysql，redis等，会在docker-compse.yml自动添加对应的镜像配置，方便使用docker compose进行环境配置和组件编排。</li><li>application.properties文件生成： <code>官方是不会生成对应的配置项的</code>，但是我们将会结合Spring Cloud的最优实践配置，不仅如此我们将会集成市面上口碑最好的中间件给出最优配置。</li><li>规范：pom.xml的规范，application.properties的规范等，提供默认配置，只需要稍微调整一下或者不需要任何调整就可以使用。</li><li>其他标准文件的规范：.gitignore, logback-spring.xml等。 如果你选择mybatis会自动生成mybatis-config.xml文件等。</li><li>持续集成：自动生成 .gitlab-ci.yml 文件，自动集成 Gitlab CI</li></ul><p>基于如上原因和愿景,因此我们需要开发一个最优Spring Cloud实践的代码生成器。</p><h3 id="1-2-Spring-Cloud-CodeGen概述"><a href="#1-2-Spring-Cloud-CodeGen概述" class="headerlink" title="1.2 Spring Cloud CodeGen概述"></a>1.2 Spring Cloud CodeGen概述</h3><p><code>spring-cloud-codegen</code>是由<code>Spring Cloud中国社区</code>发起的一个代码生成器开源项目，目前该开源项目由<code>许进，任浩军，李云龙，刘美胜奇</code>持续开发迭代。基于Freemarker+模板文件的代码生成器，可以按需勾选组件，轻松快速实现对框架代码的一键创建（例如业务部门实现对基础架构部提供的框架快速搭建），实现对Spring Cloud的最优实践和配置工具化和规范化。</p><h3 id="1-3-功能"><a href="#1-3-功能" class="headerlink" title="1.3 功能"></a>1.3 功能</h3><p>最终功能包含如下，包括屏蔽XXX注解和配置</p><ul><li>generate app structure   ——&gt;状态doing</li><li>generate java code and resources ——&gt;状态todo</li><li>generate docker-compose.yml  ——&gt;状态todo</li><li>generate .gitlab-ci.yml  ——&gt;状态todo</li><li>generate DDD structure  ——&gt;状态todo</li></ul><h2 id="二-走进Spring-Cloud-CodeGen"><a href="#二-走进Spring-Cloud-CodeGen" class="headerlink" title="二.走进Spring Cloud CodeGen"></a>二.走进Spring Cloud CodeGen</h2><h3 id="2-1-项目介绍"><a href="#2-1-项目介绍" class="headerlink" title="2.1 项目介绍"></a>2.1 项目介绍</h3><p><img src="/images/mw/project-ml.png" width="320px" height="350px"></p><p>项目Demo地址:<a href="http://start.springcloud.cn/" target="_blank" rel="noopener">http://start.springcloud.cn/</a><br>项目开发人员:<a href="http://www.xujin.org" target="_blank" rel="noopener">许进</a>,<a href="http://www.nepxion.com/" target="_blank" rel="noopener">任浩军</a>,<a href="http://www.liumapp.com" target="_blank" rel="noopener">刘美胜奇</a>,<a href="#">李云龙</a><br>github地址:<br><a href="https://github.com/springcloud/spring-cloud-codegen" target="_blank" rel="noopener">https://github.com/springcloud/spring-cloud-codegen</a><br><a href="https://github.com/springcloud/spring-cloud-skeleton" target="_blank" rel="noopener">https://github.com/springcloud/spring-cloud-skeleton</a></p><h3 id="2-2-项目技术选型"><a href="#2-2-项目技术选型" class="headerlink" title="2.2 项目技术选型"></a>2.2 项目技术选型</h3><p>Spring Boot+Spring MVC+FreeMarker+Vue</p><h3 id="2-3-代码生成器配置"><a href="#2-3-代码生成器配置" class="headerlink" title="2.3 代码生成器配置"></a>2.3 代码生成器配置</h3><p>1.skeleton-data.properties<br>   用来描述模板文件的全局配置值，里面的值替换模板文件里的动态变量(用${}表示)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># ---------- 工程配置 ----------</span><br><span class="line"># moduleName=sales-project</span><br><span class="line">moduleName=sales</span><br><span class="line">basePackage=cn.springcloud</span><br><span class="line">pomGroupId=cn.springcloud</span><br><span class="line">pomArtifactId=sales</span><br><span class="line">pomName=springcloud sales</span><br><span class="line">pomVersion=1.0.0</span><br><span class="line">springCloudVersion=Dalston.SR4</span><br><span class="line">springBootVersion=1.5.6.RELEASE</span><br><span class="line">javaVersion=1.8</span><br><span class="line"></span><br><span class="line"># ---------- 框架配置 ----------</span><br><span class="line">serviceName=spring-cloud-sales</span><br><span class="line">port=2222</span><br><span class="line">eurekaEnabled=true</span><br><span class="line">eurekaUrl=http://localhost:1111/eureka/</span><br></pre></td></tr></table></figure></p><ol><li>skeleton-description.xml</li></ol><p><img src="/images/mw/code-gen.png" width="520px" height="650px"></p><p>   如上图所示，用来描述模界面驱动和渲染的组件，分为Group和Entity结构，一个Group包含多个Entity，其他属性比较容易理解，主要介绍如下<br>   highlightable - 标识为高亮项，一般组件渲染成高亮方式，例如Label红色字体，提示使用者着重关注<br>   defaultable - 标识为默认项，一般组件渲染成默认项方式，提示使用者可以不修改对应值<br>   emptiable - 标识为留空项，一般组件渲染成留空项方式，提示使用者对应值可以为空<br>   editable - 标识为不可编辑项，一般组件渲染成不可编辑项方式，如果false则把组件灰掉，提示使用者对应值不可编辑</p><p>示例Demo数据如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">skeleton</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 工程基本配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>basic<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>pomGroupId<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Group<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>TEXTFIELD<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>pomArtifactId<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Artifact<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>TEXTFIELD<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>moduleName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>工程模块名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span>moduleName<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">note</span>&gt;</span>【必改项】首字母必须小写，中间只允许出现“-”<span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>TEXTFIELD<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>basePackage<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>上层包路径<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span>basePackage<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">note</span>&gt;</span>【必改项】该路径会作为所有Java代码的上层路径。moduleName、basePackage和projectType三者组合起来解析出相关目录和结构规则，例如moduleName=payment-ccb，basePackage=com.nepxion，projectType=server，那么工程名为payment-ccb-server，类路径为com.nepxion.payment.ccb.server</span><br><span class="line">            <span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>TEXTFIELD<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>javaVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Java Version<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>COMBOBOX<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">options</span>&gt;</span>1.8;1.7;1.6<span class="tag">&lt;/<span class="name">options</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 是否Docker化 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>docker-template<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Docker模板<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO_GROUP<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>HORIZONTAL<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>true<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>是<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>false<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>否<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 应用类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>appType<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>应用类型<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO_GROUP<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>HORIZONTAL<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>Spring Boot<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Spring Boot<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>Spring Cloud<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Spring Cloud<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">note</span>&gt;</span>Spring Cloud应用<span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>war<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>war应用<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud独立部署组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>sc-alone<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Spring Cloud<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO_GROUP<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>HORIZONTAL<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>独立组件<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>独立组件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>service-provider<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>服务提供者<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>service-consumer<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>服务消费者<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- web基础框架 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>basic-framework<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>基础框架<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>基础框架-1<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>CHECKBOX_GROUP<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>HORIZONTAL<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>spring-mvc<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Spring MVC<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring MVC<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>CHECKBOX<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>Mybatis<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Mybatis<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span>Mybatis<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>CHECKBOX<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud独立部署单选组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>sc-alone-radio<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>独立组件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO_GROUP<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>HORIZONTAL<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Eureka Server<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>zuul-server<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Zuul Server<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>sc-gateway<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>SC Gateway<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>config-server<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Config Server<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>zipkin-server<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Zipkin Server<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud可组合多选组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>sc-group-checkBox<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>可组合组件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Cloud组件<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>CHECKBOX_GROUP<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>HORIZONTAL<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>fegin<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Fegin<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring MVC<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>CHECKBOX<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>hystrix<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>hystrix<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span>hystrix<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>CHECKBOX<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>ribbon<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Ribbon<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span>Ribbon<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>CHECKBOX<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">skeleton</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-Spring-cloud-CodeGen开发接口"><a href="#2-4-Spring-cloud-CodeGen开发接口" class="headerlink" title="2.4 Spring-cloud-CodeGen开发接口"></a>2.4 Spring-cloud-CodeGen开发接口</h3><p>根据配置文件进行界面驱动的元数据接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/getMetaData"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SkeletonGroup&gt; <span class="title">getMetaData</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>返回JSON格式的文件，简单介绍一下格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"basic"</span>,</span><br><span class="line">        <span class="attr">"label"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"NORMAL_GROUP"</span>,</span><br><span class="line">        <span class="attr">"layoutType"</span>: <span class="string">"VERTICAL"</span>,</span><br><span class="line">        <span class="attr">"entityList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"pomGroupId"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Group"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="string">"cn.springcloud"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"TEXTFIELD"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"pomArtifactId"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Artifact"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="string">"sales"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"TEXTFIELD"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"moduleName"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"工程模块名"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"moduleName"</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="string">"【必改项】首字母必须小写，中间只允许出现“-”"</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="string">"sales"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"TEXTFIELD"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"basePackage"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"上层包路径"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"basePackage"</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="string">"【必改项】该路径会作为所有Java代码的上层路径。moduleName、basePackage和projectType三者组合起来解析出相关目录和结构规则，例如moduleName=payment-ccb，basePackage=com.nepxion，projectType=server，那么工程名为payment-ccb-server，类路径为com.nepxion.payment.ccb.server"</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="string">"cn.springcloud"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"TEXTFIELD"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"javaVersion"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Java Version"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="string">"1.8"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"COMBOBOX"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: [</span><br><span class="line">                    <span class="string">"1.8"</span>,</span><br><span class="line">                    <span class="string">"1.7"</span>,</span><br><span class="line">                    <span class="string">"1.6"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"docker-template"</span>,</span><br><span class="line">        <span class="attr">"label"</span>: <span class="string">"Docker模板"</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"RADIO_GROUP"</span>,</span><br><span class="line">        <span class="attr">"layoutType"</span>: <span class="string">"HORIZONTAL"</span>,</span><br><span class="line">        <span class="attr">"entityList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"true"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"是"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"false"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"否"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"appType"</span>,</span><br><span class="line">        <span class="attr">"label"</span>: <span class="string">"应用类型"</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"RADIO_GROUP"</span>,</span><br><span class="line">        <span class="attr">"layoutType"</span>: <span class="string">"HORIZONTAL"</span>,</span><br><span class="line">        <span class="attr">"entityList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"Spring Boot"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Spring Boot"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"Spring Cloud"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Spring Cloud"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="string">"Spring Cloud应用"</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"war"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"war应用"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"sc-alone"</span>,</span><br><span class="line">        <span class="attr">"label"</span>: <span class="string">"Spring Cloud"</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"RADIO_GROUP"</span>,</span><br><span class="line">        <span class="attr">"layoutType"</span>: <span class="string">"HORIZONTAL"</span>,</span><br><span class="line">        <span class="attr">"entityList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"独立组件"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"独立组件"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"service-provider"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"服务提供者"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"service-consumer"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"服务消费者"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"basic-framework"</span>,</span><br><span class="line">        <span class="attr">"label"</span>: <span class="string">"基础框架"</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"基础框架-1"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"CHECKBOX_GROUP"</span>,</span><br><span class="line">        <span class="attr">"layoutType"</span>: <span class="string">"HORIZONTAL"</span>,</span><br><span class="line">        <span class="attr">"entityList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"spring-mvc"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Spring MVC"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"Spring MVC"</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"CHECKBOX"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"Mybatis"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Mybatis"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"Mybatis"</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"CHECKBOX"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"sc-alone-radio"</span>,</span><br><span class="line">        <span class="attr">"label"</span>: <span class="string">"独立组件"</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"RADIO_GROUP"</span>,</span><br><span class="line">        <span class="attr">"layoutType"</span>: <span class="string">"HORIZONTAL"</span>,</span><br><span class="line">        <span class="attr">"entityList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"eureka-server"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Eureka Server"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"zuul-server"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Zuul Server"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"sc-gateway"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"SC Gateway"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"config-server"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Config Server"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"zipkin-server"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Zipkin Server"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"sc-group-checkBox"</span>,</span><br><span class="line">        <span class="attr">"label"</span>: <span class="string">"可组合组件"</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"Spring Cloud组件"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"CHECKBOX_GROUP"</span>,</span><br><span class="line">        <span class="attr">"layoutType"</span>: <span class="string">"HORIZONTAL"</span>,</span><br><span class="line">        <span class="attr">"entityList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"fegin"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Fegin"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"Spring MVC"</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"CHECKBOX"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"hystrix"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"hystrix"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"hystrix"</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"CHECKBOX"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"ribbon"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Ribbon"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"Ribbon"</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"CHECKBOX"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>下载脚手架Zip文件的接口，返回Zip文件的byte数组类型，Body的内容为src\main\resources\config\skeleton-data.properties </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/downloadBytes"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] downloadBytes(<span class="meta">@RequestBody</span> String config)</span><br></pre></td></tr></table></figure><p>下载脚手架Zip文件的接口，返回Zip文件的ResponseEntity类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/downloadResponse"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Resource&gt; <span class="title">downloadResponse</span><span class="params">(@RequestBody String config)</span></span></span><br></pre></td></tr></table></figure><h3 id="2-5-前端运行"><a href="#2-5-前端运行" class="headerlink" title="2.5 前端运行"></a>2.5 前端运行</h3><p>spring-cloud-codegen-ui采用Vue开发，本地开发调试，采用如下命令安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># install dependencies</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"># serve with hot reload at localhost:8081</span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"># build for production with minification</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目经验 </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> 代码生成器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring initializr源码工程解析</title>
      <link href="/ex/spring-initializr/"/>
      <url>/ex/spring-initializr/</url>
      <content type="html"><![CDATA[<h2 id="什么是Spring-initializr"><a href="#什么是Spring-initializr" class="headerlink" title="什么是Spring initializr"></a>什么是Spring initializr</h2><h3 id="什么是Spring-initializr-1"><a href="#什么是Spring-initializr-1" class="headerlink" title="什么是Spring initializr"></a>什么是Spring initializr</h3><p>initializr是Spring提供的一个快速根据按需生成带有Spring风格的工程的代码生成器。<br>代码地址:<a href="https://github.com/spring-io/initializr/" target="_blank" rel="noopener">https://github.com/spring-io/initializr/</a><br>在线地址:<a href="https://start.spring.io" target="_blank" rel="noopener">https://start.spring.io</a></p><a id="more"></a><h3 id="工程目录解读"><a href="#工程目录解读" class="headerlink" title="工程目录解读"></a>工程目录解读</h3><table><thead><tr><th>模块名</th><th>说明</th></tr></thead><tbody><tr><td>initializr-actuator</td><td>可选模块，提供统计数据和指标</td></tr><tr><td>initializr-docs</td><td>文档</td></tr><tr><td>initializr-generator</td><td>单独的生成类库，核心模块，可以引入自己的代码生成器工程中</td></tr><tr><td>initializr-service</td><td>Spring Boot的主入口应用工程</td></tr><tr><td>initializr-web</td><td>REST端点和web接口，主要是Controller类</td></tr></tbody></table><blockquote><p>未完待续</p></blockquote>]]></content>
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 项目经验 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>并发编程总结之同类容器和异步容器</title>
      <link href="/bf/bf01/"/>
      <url>/bf/bf01/</url>
      <content type="html"><![CDATA[<h2 id="一-同步类容器"><a href="#一-同步类容器" class="headerlink" title="一. 同步类容器"></a>一. 同步类容器</h2><p>1.1  同步类容器都是线程安全的，但在某些场景下可能需要<code>加锁来保护复合操作</code>。<br> 复合操作如：</p><ul><li>迭代(反复访问元素，遍历容器中所有的元素)，</li><li>跳转（根据指定的顺序找到当前元素的下一个元素），以及条件运算。<a id="more"></a><blockquote><p>这些复合操作在多线并发地修改容器时，可能会表现出意外的行为，最经典的便是ConcurrentModificationException，原因是当容器迭代的过程中，被并发的修改了内容，这是由于早期迭代器设计的时候并没有考虑并发修改的问题。</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tickets</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化火车票池并添加火车票:避免线程同步可采用Vector替代ArrayList  HashTable替代HashMap</span></span><br><span class="line">        <span class="keyword">final</span> Vector&lt;String&gt; tickets = <span class="keyword">new</span> Vector&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            tickets.add(<span class="string">"火车票"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Iterator iterator = tickets.iterator(); iterator.hasNext(); ) &#123;</span><br><span class="line">            String string = (String) iterator.next();</span><br><span class="line">            tickets.remove(<span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   运行出现，如下错误:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.util.ConcurrentModificationException</span><br><span class="line">at java.util.Vector$Itr.checkForComodification(Vector.java:1184)</span><br><span class="line">at java.util.Vector$Itr.next(Vector.java:1137)</span><br><span class="line">at org.xujin.janus.poc.server.Tickets.main(Tickets.java:35)</span><br></pre></td></tr></table></figure><p> 1.2 同步类容器:如古老的Vector，HashTable。这些容器的同步功能其实都是由jdk的<code>Collections.synchronized*** 比如:Collections.synchronizedMap</code>等工厂方法去创建实现的。比如,如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;String, String&gt;());</span><br></pre></td></tr></table></figure><blockquote><p>本身hashMap不是线程安全的，但是Collections.synchronizedMap(new HashMap<string, string="">())工厂方法包裹之后，就变成线程安全的。</string,></p></blockquote><p> 其底层的机制无非就是传统的synchronized关键字对每个公用的方法都进行同步，使得每次只能有一个线程访问容器的状态。这很明显不满足我们今天互联网时代高并发的需求，在保证线程安全的同时，也必须要有足够好的性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tickets</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Vector&lt;String&gt; tickets = <span class="keyword">new</span> Vector&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            tickets.add(<span class="string">"火车票"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="string">"线程"</span> + i) &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (tickets.isEmpty()) <span class="keyword">break</span>;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">"---"</span> + tickets.remove(<span class="number">0</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Ps:在实际开发中，尽量使用并发类容器替代同步类容器。</p></blockquote><h2 id="并发类容器"><a href="#并发类容器" class="headerlink" title="并发类容器"></a>并发类容器</h2><h3 id="并发类容器概述"><a href="#并发类容器概述" class="headerlink" title="并发类容器概述"></a>并发类容器概述</h3><p>jdk5.0之后提供了多种并发类容器来替代同步类容器从而改善性能。同步类容器的状态都是串行化的，他们虽然实现了线程安全，但是严重降低了并发性，在多线程环境时，严重降低了应用程序的吞吐量。<br> 并发类容器是专门针对并发设计的，使用ConcurrentHashMap来替代给予散列的传统hashTable，而且在ConcurrentHashMap中，添加了一些常见复合操作的支持。以及使用了CopyOnWriteArrayList代替Voctor，并发的CopOnwriteArraySet，以及并发的Queue，ConcurrentLinkedQueue和LinkedBlockingQueue，前者是高性能的队列，后者是以阻塞形式的队列，具体实现Queue还有很多，例如ArrayBlockQueue，PriorityBlockingQueue，SynchronousQueue等。</p><h3 id="ConcurrentMap"><a href="#ConcurrentMap" class="headerlink" title="ConcurrentMap"></a>ConcurrentMap</h3><p>ConcurrentMap接口下有两个重要的实现: ConcurrentHashMap,ConcurrentSkipListMap(支持并发排序功能，弥补ConcurrentHashMap) </p><p>ConcurrentHashMap内部使用分段锁(segment)来标识这些不同的部门，在每个段其实就是一个小的hashTable，它们有自己的锁。只要多个修改操作发生在不同的段上，它们就是可以并发进行。把一个整体划分成了16个段(segment)。也就是最高支持16个线程的并发修改操作，这也是在多线程场景时减小锁的粒度从而减低锁竞争的一种方案。并且代码中大多共享变量使用volatile关键字声明，目的是第一时间获取修改的内容，性能非常好。</p><blockquote><p>ConcurrentHashMap最高支持分16个段。</p></blockquote><h3 id="Copy-On-Write容器"><a href="#Copy-On-Write容器" class="headerlink" title="Copy-On-Write容器"></a>Copy-On-Write容器</h3><blockquote><p>未完待续。。。。。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot中自定义注解+AOP实现主备库切换</title>
      <link href="/sb/sb-aop/"/>
      <url>/sb/sb-aop/</url>
      <content type="html"><![CDATA[<p><strong>摘要:</strong> 本篇文章的场景是做调度中心和监控中心时的需求，后端使用TDDL实现分表分库，需求:实现关键业务的查询监控,当用Mybatis查询数据时需要从主库切换到备库或者直接连到备库上查询,从而减小主库的压力，在本篇文章中主要记录在Spring Boot中通过自定义注解结合AOP实现直接连接备库查询。</p><a id="more"></a><h2 id="一-通过AOP-自定义注解实现主库到备库的切换"><a href="#一-通过AOP-自定义注解实现主库到备库的切换" class="headerlink" title="一.通过AOP 自定义注解实现主库到备库的切换"></a>一.通过AOP 自定义注解实现主库到备库的切换</h2><h3 id="1-1-自定义注解"><a href="#1-1-自定义注解" class="headerlink" title="1.1 自定义注解"></a>1.1 自定义注解</h3><p> 自定义注解如下代码所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SwitchDataBase &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">switch2Backup</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-实现方法拦截器对自定义注解处理"><a href="#1-2-实现方法拦截器对自定义注解处理" class="headerlink" title="1.2  实现方法拦截器对自定义注解处理"></a>1.2  实现方法拦截器对自定义注解处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理走备库逻辑的注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchDataBaseInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(SwitchDataBaseInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Method method = invocation.getMethod();</span><br><span class="line">        SwitchDataBase annotation = getAnnotation(method);</span><br><span class="line">        <span class="keyword">if</span> (annotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        Object val = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(!ThreadLocalMap.containsKey(GroupDataSourceRouteHelper.DATASOURCE_INDEX)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (annotation.switch2Backup()) &#123;</span><br><span class="line">                log.info(<span class="string">"query back up DB, method: "</span> + method.getName());</span><br><span class="line">                GroupDataSourceRouteHelper.executeByGroupDataSourceIndex(<span class="number">1</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">"query primary DB, method: "</span> + method.getName());</span><br><span class="line">                GroupDataSourceRouteHelper.executeByGroupDataSourceIndex(<span class="number">0</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            val = invocation.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(method.getDeclaringClass().getName() + <span class="string">"."</span> +</span><br><span class="line">                    invocation.getMethod().getName() + <span class="string">"方法调用失败，arguments："</span> +</span><br><span class="line">                    Arrays.toString(invocation.getArguments()));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            GroupDataSourceRouteHelper.removeGroupDataSourceIndex();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找方法上面声明的注解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SwitchDataBase <span class="title">getAnnotation</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (method.isAnnotationPresent(SwitchDataBase.class)) &#123;</span><br><span class="line">            <span class="keyword">return</span> method.getAnnotation(SwitchDataBase.class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-配置OverallQueryConfiguration"><a href="#1-3-配置OverallQueryConfiguration" class="headerlink" title="1.3 配置OverallQueryConfiguration"></a>1.3 配置OverallQueryConfiguration</h3><p> 在Spring Boot中装配AOP Bean，实现扫描特定目录下的注解，实现切面变成形成通知处理。示例代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wdk.wms.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wdk.wms.annotation.SwitchDataBaseInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.Advisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.support.DefaultPointcutAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.support.JdkRegexpMethodPointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchDataBaseConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"overallQueryInterceptor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SwitchDataBaseInterceptor <span class="title">overallQueryInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SwitchDataBaseInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加aop的pointcut</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jdkRegexpMethodPointcut"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdkRegexpMethodPointcut <span class="title">jdkRegexpMethodPointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JdkRegexpMethodPointcut jdkRegexpMethodPointcut = <span class="keyword">new</span> JdkRegexpMethodPointcut();</span><br><span class="line">        jdkRegexpMethodPointcut.setPatterns(<span class="string">"com.wdk.wms.mapper.*"</span>);</span><br><span class="line">        <span class="keyword">return</span> jdkRegexpMethodPointcut;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置默认的aop配置对应的是原来的&lt;aop:advisor&gt;</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Advisor <span class="title">druidAdvisor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultPointcutAdvisor defaultPointcutAdvisor = <span class="keyword">new</span> DefaultPointcutAdvisor();</span><br><span class="line">        defaultPointcutAdvisor.setPointcut(jdkRegexpMethodPointcut());</span><br><span class="line">        defaultPointcutAdvisor.setAdvice(overallQueryInterceptor());</span><br><span class="line">        <span class="keyword">return</span> defaultPointcutAdvisor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-如何使用注解从主库到备库的切换"><a href="#1-4-如何使用注解从主库到备库的切换" class="headerlink" title="1.4 如何使用注解从主库到备库的切换"></a>1.4 如何使用注解从主库到备库的切换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SwitchDataBase</span>(switch2Backup = <span class="keyword">true</span>)</span><br><span class="line"><span class="function">List&lt;ConsumerNoticeMsg&gt; <span class="title">listByTemplateOver3</span><span class="params">(@Param(<span class="string">"templates"</span>)</span> List&lt;Integer&gt; templates)</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目经验 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>并发编程之ThreadLocal与单例的推荐写法</title>
      <link href="/bf/bf-th-sing/"/>
      <url>/bf/bf-th-sing/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本文结合最近网关项目代码重构，总结介绍了<code>ThreadLocal</code>是一种<code>多线程间并发访问变量</code>的解决方案，用空间换时间，并用代码示例说明，还介绍了什么是单例以及单例的推荐两种写法分别是<code>静态内部类</code>写法和<code>dubbl check instance</code>的写法，扩展介绍了其它懒汉，枚举,饿汉的写法等。</p><a id="more"></a><h2 id="一-ThreadLocal的概念"><a href="#一-ThreadLocal的概念" class="headerlink" title="一.ThreadLocal的概念"></a>一.ThreadLocal的概念</h2><h3 id="1-1-ThreadLocal概念"><a href="#1-1-ThreadLocal概念" class="headerlink" title="1.1 ThreadLocal概念"></a>1.1 ThreadLocal概念</h3><p>ThreadLocal概念：线程局部变量，是一种多线程间并发访问变量的解决方案。与其synchronized等加锁的方式不同，ThreadLocal完全不提供锁，而使用以空间换时间的手段，为每个线程提供变量的独立副本，以保障线程安全。</p><p>从性能上说，ThreadLocal不具有绝对的优势，在并发不是很高的时候，加锁的性能会更好，但作为一套与锁完全无关的线程安全解决方案，在高并发量或者竞争激烈的场景，使用ThreadLocal可以在一定程度上减少锁竞争。</p><blockquote><p>ThreadLocal多线程间并发访问变量的解决方案，为每个线程提供变量的副本，用空间换时间。<br>因为ThreadLocal在每个线程中对该变量会创建一个副本，即每个线程内部都会有一个该变量，且在线程内部任何地方都可以使用，线程之间互不影响，这样一来就不存在线程安全问题，也不会严重影响程序执行性能。</p></blockquote><hr><blockquote><p>虽然ThreadLocal能够解决上面说的问题，但是由于在每个线程中都创建了副本，所以要考虑它对资源的消耗，比如内存的占用会比不使用ThreadLocal要大。</p></blockquote><h3 id="1-2-ThreadLocal代码示例"><a href="#1-2-ThreadLocal代码示例" class="headerlink" title="1.2 ThreadLocal代码示例"></a>1.2 ThreadLocal代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.bf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnThreadLocal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用ThreadLocal去存储多线程下访问的变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;String&gt; th = <span class="keyword">new</span> ThreadLocal&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTh</span><span class="params">(String value)</span></span>&#123;</span><br><span class="line">th.set(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTh</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + <span class="keyword">this</span>.th.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> ConnThreadLocal ct = <span class="keyword">new</span> ConnThreadLocal();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ct.setTh(<span class="string">"张三"</span>);</span><br><span class="line">ct.getTh();</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">ct.setTh(<span class="string">"李四"</span>);</span><br><span class="line">ct.getTh();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t1:张三</span><br><span class="line">t2:李四</span><br></pre></td></tr></table></figure><hr><p>如上述代码所示，如果把ct.setTh(“李四”)注释，执行结果如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t1:张三</span><br><span class="line">t2:null</span><br></pre></td></tr></table></figure><blockquote><p>PS:两个线程之前都使用了ThreadLocal包装的变量th，但是Threadlocal两个线程之间数据独立，因此t1,t2两个线程之间数据访问隔离了。</p></blockquote><h2 id="二-单例与多线程"><a href="#二-单例与多线程" class="headerlink" title="二.单例与多线程"></a>二.单例与多线程</h2><p>什么是单例? 单例是应用或者系统中保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p>单例模式，最常见的就是饥饿模式和懒汉模式，一个直接实例化对象，一个是在调用方法时进行实例化对象。在多线程模式中，考虑到性能和线程安全，我们一般选择下面两种比较经典的单例模式，在性能提高的同时，又保证线程安全。</p><p>单例推荐的写法有<code>dubble check instance</code>，<code>static inner class</code>(静态内部类的模式)，因为简单安全，源生就支持多线程，对多线程比较友好，因此推荐静态内部的写法。</p><h3 id="2-1-饿汉模式"><a href="#2-1-饿汉模式" class="headerlink" title="2.1 饿汉模式"></a>2.1 饿汉模式</h3><p>这种方法非常简单，因为单例的实例被声明成 static 和 final 变量了，在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//类加载时就初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法如果完美的话，就没必要在啰嗦那么多双检锁的问题了。缺点是它不是一种懒加载模式（lazy initialization），单例会在加载类后一开始就被初始化，即使客户端没有调用 getInstance()方法。饿汉式的创建方式在一些场景中将无法使用：譬如 Singleton 实例的创建是依赖参数或者配置文件的，在 getInstance() 之前必须调用某个方法设置参数给它，那样这种单例写法就无法使用了。</p><h3 id="2-2-枚举写法"><a href="#2-2-枚举写法" class="headerlink" title="2.2 枚举写法"></a>2.2 枚举写法</h3><p> 用枚举写单例实在太简单了！这也是它最大的优点。下面这段代码就是声明枚举实例的通常做法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">enum</span> EasySingleton&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以通过EasySingleton.INSTANCE来访问实例，这比调用getInstance()方法简单多了。创建枚举默认就是线程安全的，所以不需要担心double checked locking，而且还能防止反序列化导致重新创建新的对象。</p></blockquote><h3 id="2-3-懒汉式，线程不安全"><a href="#2-3-懒汉式，线程不安全" class="headerlink" title="2.3 懒汉式，线程不安全"></a>2.3 懒汉式，线程不安全</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">         instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这段代码简单明了，而且使用了懒加载模式，但是却存在致命的问题。当有多个线程并行调用 getInstance() 的时候，就会创建多个实例。也就是说在多线程下不能正常工作。</p></blockquote><h3 id="2-4-懒汉式，线程安全"><a href="#2-4-懒汉式，线程安全" class="headerlink" title="2.4 懒汉式，线程安全"></a>2.4 懒汉式，线程安全</h3><p>为了解决上面的问题，最简单的方法是将整个 getInstance() 方法设为同步（synchronized）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>虽然做到了线程安全，并且解决了多实例的问题，但是它并不高效。因为在任何时候只能有一个线程调用 getInstance() 方法。但是同步操作只需要在第一次调用时才被需要，即第一次创建单例实例对象时。这就引出了双重检验锁。</p></blockquote><h3 id="2-5-单例模式的两种推荐写法"><a href="#2-5-单例模式的两种推荐写法" class="headerlink" title="2.5 单例模式的两种推荐写法"></a>2.5 单例模式的两种推荐写法</h3><h4 id="2-5-1-静态内部类-static-inner-class-的方式"><a href="#2-5-1-静态内部类-static-inner-class-的方式" class="headerlink" title="2.5.1 静态内部类(static inner class)的方式"></a>2.5.1 静态内部类(static inner class)的方式</h4><p>个人推荐使用静态内部类的方法，这种方法也是《Effective Java》上所推荐的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.bf;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用静态内部类，构造单例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Singletion</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singletion single = <span class="keyword">new</span> Singletion();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用过暴露getInstance方法，return静态内部类的方式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singletion <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Singletion.single;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法仍然使用JVM本身机制保证了线程安全问题；由于 Singletion 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本。</p><h4 id="2-5-2-Dubble-Check的方式"><a href="#2-5-2-Dubble-Check的方式" class="headerlink" title="2.5.2 Dubble Check的方式"></a>2.5.2 Dubble Check的方式</h4><p>理解成Dubble Check的写法之前，大家先看一下，我在Janus网关项目的中的写法，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigManager</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> ConfigManager instance;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">ConfigManager</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (ConfigManager.class) &#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> ConfigManager();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双重检验锁模式（double checked locking pattern），是一种使用同步块加锁的方法。程序员称其为双重检查锁，因为会有两次检查 instance == null，一次是在同步块外，一次是在同步块内。为什么在同步块内还要再检验一次？因为可能会有多个线程一起进入同步块外的 if，如果在同步块内不进行二次检验的话就会生成多个实例了。</p><h5 id="2-5-2-1-只做一次check的写法"><a href="#2-5-2-1-只做一次check的写法" class="headerlink" title="2.5.2.1 只做一次check的写法"></a>2.5.2.1 只做一次check的写法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubbleSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DubbleSingleton ds;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DubbleSingleton <span class="title">getDs</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//第一次check</span></span><br><span class="line"><span class="keyword">if</span>(ds == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//模拟初始化对象的准备时间...</span></span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (DubbleSingleton.class) &#123;</span><br><span class="line">ds = <span class="keyword">new</span> DubbleSingleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(DubbleSingleton.getDs().hashCode());</span><br><span class="line">&#125;</span><br><span class="line">&#125;,<span class="string">"t1"</span>);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(DubbleSingleton.getDs().hashCode());</span><br><span class="line">&#125;</span><br><span class="line">&#125;,<span class="string">"t2"</span>);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(DubbleSingleton.getDs().hashCode());</span><br><span class="line">&#125;</span><br><span class="line">&#125;,<span class="string">"t3"</span>);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个线程访问执行结果，打印出来的饿HashCode</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">189210536</span><br><span class="line">1513896901</span><br><span class="line">1785098644</span><br></pre></td></tr></table></figure><blockquote><p>如上述所示，只做一次check的写法，导致三个线程访问，hashCode不一致，原因没有做两次check。</p></blockquote><h5 id="2-5-2-2-做两次check的写法"><a href="#2-5-2-2-做两次check的写法" class="headerlink" title="2.5.2.2 做两次check的写法"></a>2.5.2.2 做两次check的写法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.bf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubbleSingleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DubbleSingleton ds;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DubbleSingleton <span class="title">getDs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//???check</span></span><br><span class="line">        <span class="keyword">if</span> (ds == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//????????????...</span></span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (DubbleSingleton.class) &#123;</span><br><span class="line">                <span class="comment">//???check,??????check?</span></span><br><span class="line">                <span class="keyword">if</span> (ds == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    ds = <span class="keyword">new</span> DubbleSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        System.out.println(DubbleSingleton.getDs().hashCode());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="string">"t1"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        System.out.println(DubbleSingleton.getDs().hashCode());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="string">"t2"</span>);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        System.out.println(DubbleSingleton.getDs().hashCode());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="string">"t3"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个线程访问执行结果，打印出来的饿HashCode</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">786514993</span><br><span class="line">786514993</span><br><span class="line">786514993</span><br></pre></td></tr></table></figure><p>这段代码看起来很完美，很可惜，它是有问题。主要在于ds = new DubbleSingleton();这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。</p><ul><li>1.给 instance 分配内存</li><li>2.调用 Singleton 的构造函数来初始化成员变量</li><li>3.将instance对象指向分配的内存空间（执行完这步instance就为非null了）</li></ul><p>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错</p><p>但是我们只需要将 instance 变量声明成 volatile如下所示，示例代码就OK。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance; <span class="comment">//声明成 volatile</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;                         </span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;       </span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有些人认为使用 volatile 的原因是可见性，也就是可以保证线程在本地不会存有 instance 的副本，每次都是去主内存中读取。但其实是不对的。使用 volatile 的主要原因是其另一个特性：禁止指令重排序优化。也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。比如上面的例子，取操作必须在执行完 1-2-3 之后或者 1-3-2 之后，不存在执行到 1-3 然后取到值的情况。从「先行发生原则」的角度理解的话，就是对于一个 volatile 变量的写操作都先行发生于后面对这个变量的读操作（这里的“后面”是时间上的先后顺序）。</p><p>但是特别注意在 jdk 1.5 以前的版本使用了 volatile 的双检锁还是有问题的。其原因是 Java 5 以前的 JMM （Java 内存模型）是存在缺陷的，即时将变量声明成 volatile 也不能完全避免重排序，主要是 volatile 变量前后的代码仍然存在重排序问题。这个 volatile 屏蔽重排序的问题在 jdk 1.5 中才得以修复，所以在这之后才可以放心使用 volatile</p><p>在JDK1.5及其后续版本中，扩充了volatile语义，系统将不允许对 写入一个volatile变量的操作与其之前的任何读写操作 重新排序，也不允许将 读取一个volatile变量的操作与其之后的任何读写操作 重新排序。</p><h2 id="三-参考文章"><a href="#三-参考文章" class="headerlink" title="三.参考文章"></a>三.参考文章</h2><p><a href="http://www.cnblogs.com/lyl6796910/p/3938237.html" target="_blank" rel="noopener">使用单例模式需要注意的几个问题</a></p><p><a href="http://freish.iteye.com/blog/1008304" target="_blank" rel="noopener">双重检查锁定失败可能性</a></p>]]></content>
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mybatis代码生成+分页+Mapper继承扩展</title>
      <link href="/mybatis/mybatis-01/"/>
      <url>/mybatis/mybatis-01/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong> 本篇文章主要介绍使用mybatis-gennerator快速生成代码，但是每次生成的Mapper或接口都会覆盖自定义的Mapper，因此介绍了Mapper接口的继承方式解决，还介绍了如何使用分页工具使用pagehelper结合Mybatis快速实现分页。</p><h2 id="一-mybatis-gennerator"><a href="#一-mybatis-gennerator" class="headerlink" title="一. mybatis-gennerator"></a>一. mybatis-gennerator</h2><h3 id="1-1-mybatis-gennerator自动生成代码"><a href="#1-1-mybatis-gennerator自动生成代码" class="headerlink" title="1.1 mybatis-gennerator自动生成代码"></a>1.1 mybatis-gennerator自动生成代码</h3><h4 id="1-1-1-mybatis-gennerator的安装"><a href="#1-1-1-mybatis-gennerator的安装" class="headerlink" title="1.1.1 mybatis-gennerator的安装"></a>1.1.1 mybatis-gennerator的安装</h4><p>Mybatis-Generator的下载地址:<a href="https://github.com/mybatis/generator/releases" target="_blank" rel="noopener">https://github.com/mybatis/generator/releases</a></p><ol><li>在Eclipse安装mybatis-gennerator插件。</li></ol><blockquote><p><a href="https://marketplace.eclipse.org/content/mybatis-generator" target="_blank" rel="noopener">https://marketplace.eclipse.org/content/mybatis-generator</a></p></blockquote><a id="more"></a><p>2.在项目中安装Maven插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>janus-admin<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span> </span><br><span class="line">          <span class="comment">&lt;!--配置文件的路径 --&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用命令:mybatis-generator:generate生成</p><blockquote><p>推荐安装IDE插件的方式或者Maven插件的方式，生成的代码直接刷新工程即可</p></blockquote><p>generatorConfig.xml示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" &gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动包位置 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">location</span>=<span class="string">"D:\develop\apache-maven-3.5.0\res\mysql\mysql-connector-java\5.1.35\mysql-connector-java-5.1.35.jar"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"context1"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 数据库链接URL、用户名、密码 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://主机:3306/数据库"</span> <span class="attr">userId</span>=<span class="string">"用户名"</span> <span class="attr">password</span>=<span class="string">"密码"</span> /&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 生成模型的包名和位置 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"org.xujin.janus.admin.entity"</span> <span class="attr">targetProject</span>=<span class="string">"janus-admin/src/main/java"</span> /&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 生成的映射文件报名和位置 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span> <span class="attr">targetProject</span>=<span class="string">"janus-admin/src/main/resources"</span> /&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 生成DAO的包名和位置 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"org.xujin.janus.admin.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"janus-admin/src/main/java"</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> /&gt;</span>  </span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 要生成的那些表(更改tableName 和domainObjectName 就可以了) --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">"janus_admin"</span> <span class="attr">tableName</span>=<span class="string">"cluster"</span> <span class="attr">domainObjectName</span>=<span class="string">"Cluster"</span> <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span>  </span><br><span class="line">        </span><br><span class="line">         <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">"janus_admin"</span> <span class="attr">tableName</span>=<span class="string">"route_info"</span> <span class="attr">domainObjectName</span>=<span class="string">"RouteInfo"</span> <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">           或者使用 tableName="%"通配全部生成</span></span><br><span class="line"><span class="comment">         &lt;table tableName="%" enableCountByExample="false" enableUpdateByExample="false"  </span></span><br><span class="line"><span class="comment">            enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"&gt;</span></span><br><span class="line"><span class="comment">            &lt;!--mysql 配置--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">sqlStatement</span>=<span class="string">"Mysql"</span> <span class="attr">identity</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--oracle 配置--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;generatedKey column="id" sqlStatement="select SEQ_&#123;1&#125;.nextval from dual" identity="false" type="pre"/&gt;--&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">table</span>&gt;</span>  </span><br><span class="line">       --&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二-Mybatis分页插件"><a href="#二-Mybatis分页插件" class="headerlink" title="二.Mybatis分页插件"></a>二.Mybatis分页插件</h2><h3 id="2-1-引入maven依赖"><a href="#2-1-引入maven依赖" class="headerlink" title="2.1 引入maven依赖"></a>2.1 引入maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-使用pagehelper"><a href="#2-2-使用pagehelper" class="headerlink" title="2.2 使用pagehelper"></a>2.2 使用pagehelper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExRouteInfoMapper</span> <span class="keyword">extends</span> <span class="title">RouteInfoMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;RouteInfo&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Page&lt;RouteInfo&gt; <span class="title">findByPage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务层使用代码示li</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageInfo&lt;RouteInfo&gt; <span class="title">findByPage</span><span class="params">(<span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">PageHelper.startPage(pageNo, pageSize);</span><br><span class="line">Page&lt;RouteInfo&gt; pagelist = routeMapper.findByPage();</span><br><span class="line">PageInfo&lt;RouteInfo&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(pagelist);</span><br><span class="line">    <span class="keyword">return</span> pageInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-Mybatis的Mapper继承"><a href="#三-Mybatis的Mapper继承" class="headerlink" title="三.Mybatis的Mapper继承"></a>三.Mybatis的Mapper继承</h2><h3 id="3-1-为什么使用Mapper继承"><a href="#3-1-为什么使用Mapper继承" class="headerlink" title="3.1 为什么使用Mapper继承"></a>3.1 为什么使用Mapper继承</h3><p>使用mybatis-gennerator自动生成代码，每次自动生成代码都会覆盖之前的Mapper文件，为了将自定义的Mapper和接口与生成的Mapper与接口分开，使用继承方式处理。</p><h3 id="3-2-代码示例处理"><a href="#3-2-代码示例处理" class="headerlink" title="3.2 代码示例处理"></a>3.2 代码示例处理</h3><p>1.mybatis-gennerator自动生成的Mapper接口 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RouteInfoMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(RouteInfo record)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(RouteInfo record)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">RouteInfo <span class="title">selectByPrimaryKey</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">(RouteInfo record)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(RouteInfo record)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.自动生成的Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.xujin.janus.admin.mapper.RouteInfoMapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"org.xujin.janus.admin.entity.RouteInfo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"domain_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"domainId"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"type"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"type"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 其余省略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.继承RouteInfoMapper扩展的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExRouteInfoMapper</span> <span class="keyword">extends</span> <span class="title">RouteInfoMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;RouteInfo&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Page&lt;RouteInfo&gt; <span class="title">findByPage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.扩展的Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.xujin.janus.admin.mapper.ex.ExRouteInfoMapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"org.xujin.janus.admin.entity.RouteInfo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"domain_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"domainId"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"type"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"type"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 其余省略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.Service层依赖注入ExRouteInfoMapper使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">RouteInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ExRouteInfoMapper routeMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(RouteInfoModel routeInfoModel)</span> </span>&#123;</span><br><span class="line">RouteInfo RouteInfo = BeanMapper.map(routeInfoModel, RouteInfo.class);</span><br><span class="line">routeMapper.insert(RouteInfo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目经验 </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot杂谈总结(一)</title>
      <link href="/sb/sb-01/"/>
      <url>/sb/sb-01/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong> 本篇文章主要介绍在Spring Boot中使用Fastjson代替Jackson，以及实现自己的自定义异常和扩展Spring MVC全局异常解析器，以及为了给前端测试提供接口文档Spring Boot集成swagger，以及集成swagger遇到问题的处理。</p><h2 id="一-Spring-Boot中使用Fastjson代替Jackson"><a href="#一-Spring-Boot中使用Fastjson代替Jackson" class="headerlink" title="一.Spring Boot中使用Fastjson代替Jackson"></a>一.Spring Boot中使用Fastjson代替Jackson</h2><h3 id="1-1-为什么使用Fastjson代替Jackson"><a href="#1-1-为什么使用Fastjson代替Jackson" class="headerlink" title="1.1 为什么使用Fastjson代替Jackson"></a>1.1 为什么使用Fastjson代替Jackson</h3><p>   Jackson最主要的原因是Jackson在处理对象之前的循环嵌套关系时不便。什么是对象间的循环嵌套？比如A有一个List<b>，B对象里又有一个A对象，当然返回A对象的Json字符串时，如果是Jackson就会发生异常，因为Jackson天生不具备处理这种关系的能力，而Fastjson正好具备了这种能力。</b></p><blockquote><p>如果你用的是 Jackson，可以使用相应的注解来支持对象间的循环嵌套。可以百度Jackson循环嵌套。</p></blockquote><a id="more"></a><h3 id="1-2-使用Fastjson代替Jackson过程"><a href="#1-2-使用Fastjson代替Jackson过程" class="headerlink" title="1.2 使用Fastjson代替Jackson过程"></a>1.2 使用Fastjson代替Jackson过程</h3><p>1.引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>三种实现方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.janus.admin.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.config.FastJsonConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring MVC全局一场解析器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationExceptionAdapter</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置fastJson 用于替代jackson</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.configureMessageConverters(converters);</span><br><span class="line"><span class="comment">// 1.定义一个convert 转换消息的对象</span></span><br><span class="line">FastJsonHttpMessageConverter fastConverter = <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line"><span class="comment">// 2 添加fastjson 的配置信息 比如 是否要格式化 返回的json数据</span></span><br><span class="line">FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class="line">fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line"><span class="comment">// 解决乱码的问题</span></span><br><span class="line">List&lt;MediaType&gt; fastMediaTypes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">fastMediaTypes.add(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line">fastConverter.setSupportedMediaTypes(fastMediaTypes);</span><br><span class="line">converters.add(fastConverter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 用自己的全局异常解析器替换Spring MVC本身的异常解析器 **/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureHandlerExceptionResolvers</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">List&lt;HandlerExceptionResolver&gt; exceptionResolvers)</span> </span>&#123;</span><br><span class="line">exceptionResolvers.add(<span class="keyword">new</span> ApplicationExceptionResolver());</span><br><span class="line"><span class="keyword">super</span>.configureHandlerExceptionResolvers(exceptionResolvers);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JanusAdminApplication</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置fastJson 用于替代jackson</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.configureMessageConverters(converters);</span><br><span class="line"><span class="comment">// 1.定义一个convert 转换消息的对象</span></span><br><span class="line">FastJsonHttpMessageConverter fastConverter = <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line"><span class="comment">// 2 添加fastjson 的配置信息 比如 是否要格式化 返回的json数据</span></span><br><span class="line">FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class="line">fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line"><span class="comment">// 解决乱码的问题</span></span><br><span class="line">List&lt;MediaType&gt; fastMediaTypes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">fastMediaTypes.add(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line">fastConverter.setSupportedMediaTypes(fastMediaTypes);</span><br><span class="line">converters.add(fastConverter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(JanusAdminApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-Spring-Boot自定义Spring-MVC异常解析器"><a href="#二-Spring-Boot自定义Spring-MVC异常解析器" class="headerlink" title="二.Spring Boot自定义Spring MVC异常解析器"></a>二.Spring Boot自定义Spring MVC异常解析器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.janus.admin.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.UnauthenticatedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.xujin.janus.admin.base.ResultData;</span><br><span class="line"><span class="keyword">import</span> org.xujin.janus.admin.constant.Config;</span><br><span class="line"><span class="keyword">import</span> org.xujin.janus.admin.utils.FastjsonFilterUtil;</span><br><span class="line"><span class="keyword">import</span> org.xujin.janus.admin.utils.ResourcesUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 全局异常处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Log类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Logger logger = Logger.getLogger(getClass());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"异常拦截器执行开始。"</span>);</span><br><span class="line"><span class="comment">// 输出 异常信息</span></span><br><span class="line">String msgContent = ResourcesUtil.getValue(Config.MESSAGE, ex.getMessage());</span><br><span class="line">logger.error(<span class="string">"发生异常:"</span> + msgContent, ex);</span><br><span class="line"><span class="comment">// 将异常信息转json输出</span></span><br><span class="line"><span class="keyword">this</span>.writeJsonByFilter(response, <span class="keyword">this</span>.resolveExceptionCustom(ex), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">logger.info(<span class="string">"异常拦截器执行结束。"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常信息解析方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ResultData <span class="title">resolveExceptionCustom</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">ResultData model = <span class="keyword">new</span> ResultData();</span><br><span class="line"><span class="keyword">if</span> (ex <span class="keyword">instanceof</span> ApplicationException) &#123;</span><br><span class="line"><span class="comment">// 抛出的是系统自定义异常</span></span><br><span class="line">model.setMsgCode(<span class="keyword">this</span>.getMsgCode(ex));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> UnauthenticatedException) &#123;</span><br><span class="line"><span class="comment">// 没有权限的异常</span></span><br><span class="line">model.setMsgCode(<span class="string">"ECOMMON00002"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 未知错误</span></span><br><span class="line">model.setMsgCode(<span class="string">"ECOMMON00001"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> model;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getMsgCode</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 输出 异常信息</span></span><br><span class="line">String msgCode = ex.getMessage();</span><br><span class="line"><span class="comment">// 若返回的异常不直接是自定义异常，而是经过封装的异常</span></span><br><span class="line"><span class="keyword">if</span> (msgCode.charAt(<span class="number">0</span>) != <span class="string">'E'</span> &amp;&amp; msgCode.charAt(<span class="number">0</span>) != <span class="string">'W'</span></span><br><span class="line">&amp;&amp; msgCode.charAt(<span class="number">0</span>) != <span class="string">'I'</span>) &#123;</span><br><span class="line">msgCode = ex.getCause().getMessage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msgCode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将对象转换成JSON字符串，并响应回前台</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeJsonByFilter</span><span class="params">(HttpServletResponse response, Object object,</span></span></span><br><span class="line"><span class="function"><span class="params">String[] includesProperties, String[] excludesProperties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// excludes优先于includes</span></span><br><span class="line">FastjsonFilterUtil filter = <span class="keyword">new</span> FastjsonFilterUtil();</span><br><span class="line"><span class="keyword">if</span> (excludesProperties != <span class="keyword">null</span> &amp;&amp; excludesProperties.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">filter.getExcludes().addAll(Arrays.&lt;String&gt; asList(excludesProperties));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (includesProperties != <span class="keyword">null</span> &amp;&amp; includesProperties.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">filter.getIncludes().addAll(Arrays.&lt;String&gt; asList(includesProperties));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用SerializerFeature.WriteDateUseDateFormat特性来序列化日期格式的类型为yyyy-MM-dd</span></span><br><span class="line"><span class="comment">// hh24:mi:ss</span></span><br><span class="line"><span class="comment">// 使用SerializerFeature.DisableCircularReferenceDetect特性关闭引用检测和生成</span></span><br><span class="line">String json = JSON.toJSONString(object, filter,</span><br><span class="line">SerializerFeature.WriteDateUseDateFormat,</span><br><span class="line">SerializerFeature.DisableCircularReferenceDetect);</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"JSON String is:"</span> + json);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">response.getWriter().write(json);</span><br><span class="line">response.getWriter().flush();</span><br><span class="line">response.getWriter().close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">logger.error(<span class="string">"An error occurred when object was converted to JSON"</span>, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-Spring-Boot集成swagger"><a href="#三-Spring-Boot集成swagger" class="headerlink" title="三 Spring Boot集成swagger"></a>三 Spring Boot集成swagger</h2><h3 id="3-1-Spring-Boot集成swagger"><a href="#3-1-Spring-Boot集成swagger" class="headerlink" title="3.1 Spring Boot集成swagger"></a>3.1 Spring Boot集成swagger</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.janus.admin.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger2 配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="comment">// 在生产环境不开启</span></span><br><span class="line"><span class="meta">@Profile</span>(&#123; <span class="string">"dev"</span>, <span class="string">"local"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).select()</span><br><span class="line">.apis(RequestHandlerSelectors</span><br><span class="line">.basePackage(<span class="string">"org.xujin.janus.admin.controller"</span>))</span><br><span class="line">.paths(PathSelectors.any()).build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder().title(<span class="string">"Janus网关管控平台"</span>).description(<span class="string">"Janus网关管控平台"</span>)</span><br><span class="line">.contact(<span class="string">"Software_King@qq.com"</span>).version(<span class="string">"1.0"</span>).build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-遇到的问题"><a href="#3-2-遇到的问题" class="headerlink" title="3.2 遇到的问题"></a>3.2 遇到的问题</h3><p>访问<a href="http://localhost:8080/swagger-ui.html，控制台出现错误" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html，控制台出现错误</a></p><p>1.页面显示默认报错页面。后台报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No handler found for GET /swagger-ui.html</span><br></pre></td></tr></table></figure></p><p>2.显示Swagger空白页面</p><p>原因分析:<br>在访问<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a> 时，这个swagger-ui.html相关的所有前端静态文件都在springfox-swagger-ui-2.6.1.jar里面。Spring Boot自动配置本身不会自动把/swagger-ui.html这个路径映射到对应的目录META-INF/resources/下面。我们加上这个映射即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationExceptionAdapter</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>)</span><br><span class="line">.addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);</span><br><span class="line"></span><br><span class="line">registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">.addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四-参考文章"><a href="#四-参考文章" class="headerlink" title="四.参考文章"></a>四.参考文章</h2><p> <a href="http://www.cnblogs.com/bingshu/p/6864131.html" target="_blank" rel="noopener">http://www.cnblogs.com/bingshu/p/6864131.html</a></p><p> <a href="http://www.jianshu.com/p/840320d431a1" target="_blank" rel="noopener">http://www.jianshu.com/p/840320d431a1</a></p>]]></content>
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目经验 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自研网关纳管Spring Cloud(一)</title>
      <link href="/janus/janus-01/"/>
      <url>/janus/janus-01/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:  本文主要从网关的需求，以及Spring Cloud Zuul的线程模型和源码瓶颈分析结合，目前最近一段时间自研网关中间件纳管Spring Cloud的经验汇总整理。</p><h2 id="一-自研网关纳管Spring-Cloud的原因"><a href="#一-自研网关纳管Spring-Cloud的原因" class="headerlink" title="一.自研网关纳管Spring Cloud的原因"></a>一.自研网关纳管Spring Cloud的原因</h2><h3 id="1-1-为什么要自研网关"><a href="#1-1-为什么要自研网关" class="headerlink" title="1.1 为什么要自研网关"></a>1.1 为什么要自研网关</h3><p>1.网关配置实时生效，配置灰度，回滚等<br>2.网关的性能，特别是防刷，限流，WAF等<br>3.动态Filter ，目前Zuul可以做到动态Filter，Filter配置下发，实时动态Filter<br>4.对网关的监控，告警，流量调拨，网关集群。<br>5.流程审计，增加Dsboard便捷的操作。</p> <a id="more"></a><h3 id="1-2-回顾Web容器线程模型"><a href="#1-2-回顾Web容器线程模型" class="headerlink" title="1.2 回顾Web容器线程模型"></a>1.2 回顾Web容器线程模型</h3><p>Servlet只是基于Java技术的web组件，该组件由容器托管，用于生成动态内容。Servlet容器是web Server或application server 的一部分，供基于Request/Response发送模型的网络服务，解码基于MIME的请求，并格式化基于MIME的响应。Servlet容器包含并管理Servlet生命周期。典型的Servlet容器有Tomcat、Jetty。</p><p><img src="/images/mw/gw/janus-03.png" width="650px" height="450px"></p><p>如上图所示，Tomcat基于NIO的多线程模型，如下图所示，其基于典型的Acceptor/Reactor线程模型，在Tomcat的线程模型中，Worker线程用来处理Request。当容器收到一个Request后，调度线程从Worker线程池中选出一个Worker线程，将请求传递给该线程，然后由该线程来执行Servlet的service()方法。且该worker线程只能同时处理一个Request请求，如果过程中发生了阻塞，那么该线程就会被阻塞，而不能去处理其他任务。 Servlet默认情况下一个单例多线程。</p><p><img src="/images/mw/gw/janus-04.png" width="650px" height="450px"></p><p>回到zuul，zuul逻辑的入口是<code>ZuulServlet</code>.service(ServletRequest servletRequest, ServletResponse servletResponse)，ZuulServlet本质就是一个Servlet。</p><p><code>RequestContext</code>提供了执行filter Pipeline所需要的Context，因为Servlet是<code>单例多线程</code>，这就要求RequestContext即要线程安全又要Request安全。context使用ThreadLocal保存，这样每个worker线程都有一个与其绑定的RequestContext，因为worker仅能同时处理一个Request，<code>这就保证了Request Context 即是线程安全的，又是Request安全的</code>。所谓Request 安全，即该Request的Context不会与其他同时处理Request冲突。 RequestContext继承了ConcurrentHashMap。</p><p>三个核心的方法preRoute(),route(), postRoute()，zuul对request处理逻辑都在这三个方法里，<code>ZuulServlet交给ZuulRunner去执行</code>。由于<code>ZuulServlet是单例</code>，因此<code>ZuulRunner也仅有一个实例</code>。</p><blockquote><p>因此综上所述，Spring Cloud Zuul的Qps在<code>1000-2000</code>Qps之间是有原因的，网关作为如此重要的组件，基于如上所述的需求，觉得自研网关中间件纳管Spring Cloud很有必要。</p></blockquote><h2 id="二-自研网关纳管Spring-Cloud"><a href="#二-自研网关纳管Spring-Cloud" class="headerlink" title="二.自研网关纳管Spring Cloud"></a>二.自研网关纳管Spring Cloud</h2><h3 id="2-1-网关整合Spring-Cloud服务治理体系"><a href="#2-1-网关整合Spring-Cloud服务治理体系" class="headerlink" title="2.1 网关整合Spring Cloud服务治理体系"></a>2.1 网关整合Spring Cloud服务治理体系</h3><h4 id="2-1-1-整合服务治理体系思路"><a href="#2-1-1-整合服务治理体系思路" class="headerlink" title="2.1.1 整合服务治理体系思路"></a>2.1.1 整合服务治理体系思路</h4><ul><li>如果服务注册中心使用的是Eureka，可以不引入Spring Cloud Eureka相关的依赖，直接通过定时任务发起Eureka REST请求，网关自身维护一个缓存列表，自己写LB，找到服务列表转发。</li></ul><blockquote><p>优点：不需要引入Spring Cloud，对网关Server进行瘦身，洁癖讨厌各种引入无用的jar；<br>缺点: 注册中心使用Eureka，可以通过Eureka REST接口获取服务注册列表，但是换成ZK，Consul，或者Etcd，直接歇菜。</p></blockquote><hr><ul><li>通过集成Spring Cloud Common中高度抽象的DiscoveryClient。<blockquote><p>优点: 通过高度抽象的DiscoveryClient，无需关心实现细节和定时任务去刷新注册列表。<br>缺点：换注册中心，需要相应的更换对应配置和依赖，一堆有些无关紧要的jar，需要自己对其瘦身。</p></blockquote></li></ul><h4 id="2-1-2-网关整合Spring-Cloud-Eureka"><a href="#2-1-2-网关整合Spring-Cloud-Eureka" class="headerlink" title="2.1.2 网关整合Spring Cloud Eureka"></a>2.1.2 网关整合Spring Cloud Eureka</h4><p>1.引入Spring Cloud Eureka Starter，排除不用的依赖，还需要努力瘦身ing。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-netflix-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.ribbon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ribbon-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span><br><span class="line">spring-cloud-starter-archaius</span><br><span class="line"><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、同Zuul一样，把网关自身注册到Eureka Server上，目的是为了获取服务注册列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server.port=8082</span><br><span class="line"></span><br><span class="line">spring.application.name=janus-server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eureka.client.service-url.defaultZone=http://localhost:8761/eureka/</span><br></pre></td></tr></table></figure><blockquote><p>PS:鄙视的一点就是，Spring Cloud应该提供一个轻量级的java client，配置注册中心的地址，还不需要把网关自身注册到注册中心上。原因是：网关中间件，不需要和服务治理框架耦合的很深。</p></blockquote><h4 id="2-1-3-Netty-Server与Spring-Cloud内置的Server的整合"><a href="#2-1-3-Netty-Server与Spring-Cloud内置的Server的整合" class="headerlink" title="2.1.3 Netty Server与Spring Cloud内置的Server的整合"></a>2.1.3 Netty Server与Spring Cloud内置的Server的整合</h4><p>Netty Http Servert提供端口用于接收网关对外的请求，Spring Boot内置的server提供端口用于和Gateway-console交互，目前没找到Spring Boot内置Server和Netty Server合二为一的方法，但是一个服务暴露两个端口，很有必要。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JanusServerAppliaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(JanusServerAppliaction.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非SSL的监听HTTP端口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> httpPort = <span class="number">8081</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//①先启动Spring Boot内置Server</span></span><br><span class="line">SpringApplication.run(JanusServerAppliaction.class, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// logger.info("services: &#123;&#125;", context.getBean("discoveryClient",</span></span><br><span class="line"><span class="comment">// DiscoveryClient.class).getServices());</span></span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"Gateway Server Application Start..."</span>);</span><br><span class="line"><span class="comment">// 解析启动参数</span></span><br><span class="line">parseArgs(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化网关Filter和配置</span></span><br><span class="line">logger.info(<span class="string">"init Gateway Server ..."</span>);</span><br><span class="line">JanusBootStrap.initGateway();</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"start netty  Server..."</span>);</span><br><span class="line"><span class="keyword">final</span> JanusNettyServer gatewayServer = <span class="keyword">new</span> JanusNettyServer();</span><br><span class="line"><span class="comment">// ②启动HTTP容器</span></span><br><span class="line">gatewayServer.startServer(httpPort);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>NettyServer服务启动后，阻塞监听端口,会导致集成spring boot内置Server启动无日志打印，spring Boot容器也没启动。因此注意启动顺序。</p></blockquote><h3 id="2-2-提高自研网关的QPS必杀技"><a href="#2-2-提高自研网关的QPS必杀技" class="headerlink" title="2.2 提高自研网关的QPS必杀技"></a>2.2 提高自研网关的QPS必杀技</h3><h4 id="2-2-1-NettyServer初始化及启动代码"><a href="#2-2-1-NettyServer初始化及启动代码" class="headerlink" title="2.2.1 NettyServer初始化及启动代码"></a>2.2.1 NettyServer初始化及启动代码</h4><p>自研网关使用netty自带的线程池，共有三组线程池，分别为bossGroup、workerGroup和executorGroup，bossGroup用于接收客户端的TCP连接，workerGroup用于处理I/O等，executorGroup用于处理网关作业(执行Filter链)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startServer</span><span class="params">(<span class="keyword">int</span> noSSLPort)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http请求ChannelInbound</span></span><br><span class="line"><span class="keyword">final</span> HttpInboundHandler httpInboundHandler = <span class="keyword">new</span> HttpInboundHandler();</span><br><span class="line"></span><br><span class="line">ServerBootstrap insecure = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">insecure.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class)</span><br><span class="line"><span class="comment">// SO_REUSEADDR,表示允许重复使用本地地址和端口</span></span><br><span class="line">.option(ChannelOption.SO_REUSEADDR, Boolean.TRUE)</span><br><span class="line">.option(ChannelOption.ALLOCATOR, ByteBufManager.byteBufAllocator)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SO_KEEPALIVE</span></span><br><span class="line"><span class="comment"> * 该参数用于设置TCP连接，当设置该选项以后，连接会测试链接的状态，这个选项用于可能长时间没有数据交流的连接。当设置该选项以后，</span></span><br><span class="line"><span class="comment"> * 如果在两小时内没有数据的通信时，TCP会自动发送一个活动探测数据报文。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">.childOption(ChannelOption.SO_KEEPALIVE, Boolean.TRUE)</span><br><span class="line">.childOption(ChannelOption.TCP_NODELAY, Boolean.TRUE)</span><br><span class="line">.childOption(ChannelOption.ALLOCATOR, ByteBufManager.byteBufAllocator)</span><br><span class="line">.childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"><span class="comment">// 对channel监控的支持 暂不支持</span></span><br><span class="line"><span class="comment">// keepalive_timeout 的支持</span></span><br><span class="line">pipeline.addLast(</span><br><span class="line"><span class="keyword">new</span> IdleStateHandler(ProperityConfig.keepAliveTimeout, <span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>, TimeUnit.MILLISECONDS));</span><br><span class="line"><span class="comment">// pipeline.addLast(new JanusHermesHandler());</span></span><br><span class="line">pipeline.addLast(<span class="keyword">new</span> HttpResponseEncoder());</span><br><span class="line"><span class="comment">// 经过HttpRequestDecoder会得到N个对象HttpRequest,first HttpChunk,second</span></span><br><span class="line"><span class="comment">// HttpChunk,....HttpChunkTrailer</span></span><br><span class="line">pipeline.addLast(<span class="keyword">new</span> HttpRequestDecoder(</span><br><span class="line">ProperityConfig.maxInitialLineLength,</span><br><span class="line">ProperityConfig.maxHeaderSize, <span class="number">8192</span>,</span><br><span class="line">ProperityConfig.validateHeaders));</span><br><span class="line"><span class="comment">// 把HttpRequestDecoder得到的N个对象合并为一个完整的http请求对象</span></span><br><span class="line">pipeline.addLast(<span class="keyword">new</span> HttpObjectAggregator(</span><br><span class="line">ProperityConfig.httpAggregatorMaxLength));</span><br><span class="line"></span><br><span class="line"><span class="comment">// gzip的支持</span></span><br><span class="line"><span class="keyword">if</span> (ProperityConfig.gzip) &#123;</span><br><span class="line">pipeline.addLast(<span class="keyword">new</span> JanusHttpContentCompressor(</span><br><span class="line">ProperityConfig.gzipLevel,</span><br><span class="line">ProperityConfig.gzipMinLength));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pipeline.addLast(httpInboundHandler);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ChannelFuture insecureFuture = insecure.bind(noSSLPort).sync();</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"[listen HTTP NoSSL]["</span> + noSSLPort + <span class="string">"]"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wait until the server socket is closed.&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> * 找到之前的无日志打印spring 容器也没启动的原因了，集成spring boot</span></span><br><span class="line"><span class="comment"> * 和eureka放上放下并不是问题，是因为JanusNettyServer服务启动后，阻塞监听端口导致的</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">insecureFuture.channel().closeFuture().sync();</span><br><span class="line">logger.info(<span class="string">"[stop HTTP NoSSL success]"</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-基于Netty-Channel-Pool实现REST的异步转发"><a href="#2-2-2-基于Netty-Channel-Pool实现REST的异步转发" class="headerlink" title="2.2.2 基于Netty Channel Pool实现REST的异步转发"></a>2.2.2 基于Netty Channel Pool实现REST的异步转发</h4><p>RestInvokerFilter异步转发Filter，基于Netty Channel Pool实现REST的异步转发,提高自网关的性能的必杀技。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestInvokerFilter</span> <span class="keyword">extends</span> <span class="title">AbstractFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">final</span> AbstractFilterContext filterContext,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">final</span> JanusHandleContext janusHandleContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 自定义LB从Spring Cloud中服务注册缓存列表中获取服务实例</span></span><br><span class="line">ServiceInstance serviceInstance = SpringCloudHelper.getServiceInstanceByLB(</span><br><span class="line">janusHandleContext, janusHandleContext.getAPIInfo().getRouteServiceId());</span><br><span class="line"><span class="comment">// 生成发送的Request对象</span></span><br><span class="line">FullHttpRequest outBoundRequest = getOutBoundHttpRequest(janusHandleContext);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转发的时候设置LB获取到的主机IP和端口即可</span></span><br><span class="line">AsyncHttpRequest.builder()</span><br><span class="line">.remoteAddress(</span><br><span class="line">serviceInstance.getHost() + <span class="string">":"</span> + serviceInstance.getPort())</span><br><span class="line">.sessionContext(janusHandleContext)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * connection holding 500ms</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">.holdingTimeout(ProperityConfig.janusHttpPoolOauthMaxHolding).build()</span><br><span class="line">.execute(<span class="keyword">new</span> SimpleHttpCallback(janusHandleContext) &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(FullHttpResponse result)</span> </span>&#123;</span><br><span class="line"><span class="comment">// testResult(result);</span></span><br><span class="line">janusHandleContext.setRestFullHttpResponse(result);</span><br><span class="line"><span class="comment">// 跳转到下一个Filter</span></span><br><span class="line">filterContext.skipNextFilter(janusHandleContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"><span class="comment">//省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//省略</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;, outBoundRequest);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//其余省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-自研网关Filter链的设计"><a href="#三-自研网关Filter链的设计" class="headerlink" title="三.自研网关Filter链的设计"></a>三.自研网关Filter链的设计</h2><p>一层接口，一层 abstract类，<br>一层基于Event观察者模式的抽象类，一个基于观察者模式的接口，<br> 自定义Filter根据需要继承处理，在这里不做过多介绍。</p><h2 id="四-自研网关纳管Spring-Cloud的结果"><a href="#四-自研网关纳管Spring-Cloud的结果" class="headerlink" title="四.自研网关纳管Spring Cloud的结果"></a>四.自研网关纳管Spring Cloud的结果</h2><h3 id="4-1-自研网关注册到Eureka-Server上"><a href="#4-1-自研网关注册到Eureka-Server上" class="headerlink" title="4.1 自研网关注册到Eureka Server上"></a>4.1 自研网关注册到Eureka Server上</h3><p>把自研网关注册到Eureka Server上，用于获取服务列表，如下图所示。<br><img src="/images/mw/gw/janus-01.png"></p><blockquote><p>上图中有两个服务提供者1，2，以及一个网关Server。</p></blockquote><h3 id="4-2-无缝支持REST转REST的GET和POST的转发"><a href="#4-2-无缝支持REST转REST的GET和POST的转发" class="headerlink" title="4.2 无缝支持REST转REST的GET和POST的转发"></a>4.2 无缝支持REST转REST的GET和POST的转发</h3><p>自定义LB，基于Netty Channel Pool实现了GET，POST的协议适配和异步转发，如下所示。</p><p><img src="/images/mw/gw/janus-02.png"></p><blockquote><p><a href="http://localhost:8081/，是本地网关Server的主机和端口。" target="_blank" rel="noopener">http://localhost:8081/，是本地网关Server的主机和端口。</a></p></blockquote><h2 id="五-参考文章"><a href="#五-参考文章" class="headerlink" title="五.参考文章"></a>五.参考文章</h2><p><a href="http://www.infoq.com/cn/articles/netty-threading-model/" target="_blank" rel="noopener">Netty系列之Netty线程模型</a></p>]]></content>
      
      <categories>
          
          <category> Janus网关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网关中间件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Zuul遗失的世界(三)</title>
      <link href="/sc/sc-zuul-s3/"/>
      <url>/sc/sc-zuul-s3/</url>
      <content type="html"><![CDATA[<p> <strong>摘要</strong>:  接着上一篇《Spring Cloud Zuul遗失的世界(二)》，本文主要介绍Netflix Zuul core模块的Filter链的设计和Fifter Loader和Filter Manager相关代码的设计与分析。</p><a id="more"></a><h2 id="一-Zuul-Filter的抽象设计"><a href="#一-Zuul-Filter的抽象设计" class="headerlink" title="一.Zuul Filter的抽象设计"></a>一.Zuul Filter的抽象设计</h2><h3 id="1-1-自定义Zuul-Filter"><a href="#1-1-自定义Zuul-Filter" class="headerlink" title="1.1 自定义Zuul Filter"></a>1.1 自定义Zuul Filter</h3><p>当我们使用Spring Cloud Zuul都会直接继承ZuulFilter，覆盖实现抽象类中定义的方法，如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(PreFilter.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">String token = ctx.getRequest().getHeader(HttpHeaders.AUTHORIZATION);</span><br><span class="line"></span><br><span class="line">String labels = TOKEN_LABEL_MAP.get(token);</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"label: "</span> + labels);</span><br><span class="line"></span><br><span class="line">CoreHeaderInterceptor.initHystrixRequestContext(labels); <span class="comment">// zuul本身调用微服务</span></span><br><span class="line">ctx.addZuulRequestHeader(CoreHeaderInterceptor.HEADER_LABEL, labels); <span class="comment">// 传递给后续微服务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-IZuulFilter代码"><a href="#1-2-IZuulFilter代码" class="headerlink" title="1.2  IZuulFilter代码"></a>1.2  IZuulFilter代码</h3><p>定义 IZuulFilter interface，共同的常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * a "true" return from this method means that the run() method should be invoked</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if the run() method should be invoked. false will not invoke the run() method</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * if shouldFilter() is true, this method will be invoked. this method is the core method of a ZuulFilter</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Some arbitrary artifact may be returned. Current implementation ignores it.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-抽象类ZuulFilter代码"><a href="#1-2-抽象类ZuulFilter代码" class="headerlink" title="1.2  抽象类ZuulFilter代码"></a>1.2  抽象类ZuulFilter代码</h3><p>抽象类ZuulFilter实现IZuulFilter，如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulFilter</span> <span class="keyword">implements</span> <span class="title">IZuulFilter</span>, <span class="title">Comparable</span>&lt;<span class="title">ZuulFilter</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DynamicBooleanProperty filterDisabled =</span><br><span class="line">            DynamicPropertyFactory.getInstance().getBooleanProperty(disablePropertyName(), <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//filter类型</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="comment">// Filter的执行顺序</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//是否是静态Filter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isStaticFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">disablePropertyName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"zuul."</span> + <span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">"."</span> + filterType() + <span class="string">".disable"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Filter是否启动</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFilterDisabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filterDisabled.get();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZuulFilterResult <span class="title">runFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ZuulFilterResult zr = <span class="keyword">new</span> ZuulFilterResult();</span><br><span class="line">        <span class="keyword">if</span> (!isFilterDisabled()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (shouldFilter()) &#123;</span><br><span class="line">                Tracer t = TracerFactory.instance().startMicroTracer(<span class="string">"ZUUL::"</span> + <span class="keyword">this</span>.getClass().getSimpleName());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Object res = run();</span><br><span class="line">                    zr = <span class="keyword">new</span> ZuulFilterResult(res, ExecutionStatus.SUCCESS);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                    t.setName(<span class="string">"ZUUL::"</span> + <span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">" failed"</span>);</span><br><span class="line">                    zr = <span class="keyword">new</span> ZuulFilterResult(ExecutionStatus.FAILED);</span><br><span class="line">                    zr.setException(e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    t.stopAndLog();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                zr = <span class="keyword">new</span> ZuulFilterResult(ExecutionStatus.SKIPPED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> zr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(ZuulFilter filter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(<span class="keyword">this</span>.filterOrder(), filter.filterOrder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-Spring-Cloud-Zuul的Filter管理"><a href="#二-Spring-Cloud-Zuul的Filter管理" class="headerlink" title="二.Spring Cloud Zuul的Filter管理"></a>二.Spring Cloud Zuul的Filter管理</h2><p>  zuul支持动加载Filter类文件。实现原理是监控存放Filter文件的目录，定期扫描这些目录，如果发现有新Filter源码文件或者Filter源码文件有改动，则对文件进行编译加载。目前zuul支持使用Groovy编写的Filter。</p><h3 id="2-1-FilterFileManager"><a href="#2-1-FilterFileManager" class="headerlink" title="2.1 FilterFileManager"></a>2.1 FilterFileManager</h3><p> groovy的文件filter加载,通过FilterFileManager，开启一个线程，开始轮询GroovyFilterFile的目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterFileManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(FilterFileManager.class);</span><br><span class="line"></span><br><span class="line">    String[] aDirectories;</span><br><span class="line">    <span class="keyword">int</span> pollingIntervalSeconds;</span><br><span class="line">    Thread poller;</span><br><span class="line">    <span class="keyword">boolean</span> bRunning = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> FilenameFilter FILENAME_FILTER;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> FilterFileManager INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FilterFileManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFilenameFilter</span><span class="params">(FilenameFilter filter)</span> </span>&#123;</span><br><span class="line">        FILENAME_FILTER = filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialized the GroovyFileManager.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pollingIntervalSeconds the polling interval in Seconds</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> directories            Any number of paths to directories to be polled may be specified</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InstantiationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> pollingIntervalSeconds, String... directories)</span> <span class="keyword">throws</span> Exception, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) INSTANCE = <span class="keyword">new</span> FilterFileManager();</span><br><span class="line"></span><br><span class="line">        INSTANCE.aDirectories = directories;</span><br><span class="line">        INSTANCE.pollingIntervalSeconds = pollingIntervalSeconds;</span><br><span class="line">        INSTANCE.manageFiles();</span><br><span class="line">        INSTANCE.startPoller();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FilterFileManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Shuts down the poller</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        INSTANCE.stopPoller();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stopPoller</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        bRunning = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开启一个线程，开始轮询</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">startPoller</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        poller = <span class="keyword">new</span> Thread(<span class="string">"GroovyFilterFileManagerPoller"</span>) &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (bRunning) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(pollingIntervalSeconds * <span class="number">1000</span>);</span><br><span class="line">                        manageFiles();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        poller.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        poller.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the directory File for a path. A Runtime Exception is thrown if the directory is in valid</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a File representing the directory path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> File <span class="title">getDirectory</span><span class="params">(String sPath)</span> </span>&#123;</span><br><span class="line">        File  directory = <span class="keyword">new</span> File(sPath);</span><br><span class="line">        <span class="keyword">if</span> (!directory.isDirectory()) &#123;</span><br><span class="line">            URL resource = FilterFileManager.class.getClassLoader().getResource(sPath);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                directory = <span class="keyword">new</span> File(resource.toURI());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOG.error(<span class="string">"Error accessing directory in classloader. path="</span> + sPath, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!directory.isDirectory()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(directory.getAbsolutePath() + <span class="string">" is not a valid directory"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> directory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a List&lt;File&gt; of all Files from all polled directories</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;File&gt; <span class="title">getFiles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;File&gt; list = <span class="keyword">new</span> ArrayList&lt;File&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String sDirectory : aDirectories) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sDirectory != <span class="keyword">null</span>) &#123;</span><br><span class="line">                File directory = getDirectory(sDirectory);</span><br><span class="line">                File[] aFiles = directory.listFiles(FILENAME_FILTER);</span><br><span class="line">                <span class="keyword">if</span> (aFiles != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    list.addAll(Arrays.asList(aFiles));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * puts files into the FilterLoader. The FilterLoader will only addd new or changed filters</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aFiles a List&lt;File&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InstantiationException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">processGroovyFiles</span><span class="params">(List&lt;File&gt; aFiles)</span> <span class="keyword">throws</span> Exception, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (File file : aFiles) &#123;</span><br><span class="line">            <span class="comment">//更新则通过FilterLoader.putFilter()置入FilterRegistr</span></span><br><span class="line">            FilterLoader.getInstance().putFilter(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每次轮询，处理目录内的所有*.groovy文件，即调用FilterLoader.getInstance().putFilter(file);</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">manageFiles</span><span class="params">()</span> <span class="keyword">throws</span> Exception, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        List&lt;File&gt; aFiles = getFiles();</span><br><span class="line">        processGroovyFiles(aFiles);</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-FilterLoader"><a href="#2-2-FilterLoader" class="headerlink" title="2.2 FilterLoader"></a>2.2 FilterLoader</h3><p>   com.netflix.zuul.FilterLoader，编译、加载filter文件，并且检查源文件是否有变更，除此之外，它还按照filterType组织并维护List<zuulfilter></zuulfilter></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> FilterLoader INSTANCE = <span class="keyword">new</span> FilterLoader();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(FilterLoader.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, Long&gt; filterClassLastModified = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Long&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, String&gt; filterClassCode = <span class="keyword">new</span> ConcurrentHashMap&lt;String, String&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, String&gt; filterCheck = <span class="keyword">new</span> ConcurrentHashMap&lt;String, String&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, List&lt;ZuulFilter&gt;&gt; hashFiltersByType = <span class="keyword">new</span> ConcurrentHashMap&lt;String, List&lt;ZuulFilter&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FilterRegistry filterRegistry = FilterRegistry.instance();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> DynamicCodeCompiler COMPILER;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> FilterFactory FILTER_FACTORY = <span class="keyword">new</span> DefaultFilterFactory();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets a Dynamic Code Compiler</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> compiler</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompiler</span><span class="params">(DynamicCodeCompiler compiler)</span> </span>&#123;</span><br><span class="line">        COMPILER = compiler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overidden by tests</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilterRegistry</span><span class="params">(FilterRegistry r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filterRegistry = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets a FilterFactory</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilterFactory</span><span class="params">(FilterFactory factory)</span> </span>&#123;</span><br><span class="line">        FILTER_FACTORY = factory;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Singleton FilterLoader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FilterLoader <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Given source and name will compile and store the filter if it detects that the filter code has changed or</span></span><br><span class="line"><span class="comment">     * the filter doesn't exist. Otherwise it will return an instance of the requested ZuulFilter</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sCode source code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sName name of the filter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the ZuulFilter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InstantiationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZuulFilter <span class="title">getFilter</span><span class="params">(String sCode, String sName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (filterCheck.get(sName) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            filterCheck.putIfAbsent(sName, sName);</span><br><span class="line">            <span class="keyword">if</span> (!sCode.equals(filterClassCode.get(sName))) &#123;</span><br><span class="line">                LOG.info(<span class="string">"reloading code "</span> + sName);</span><br><span class="line">                filterRegistry.remove(sName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ZuulFilter filter = filterRegistry.get(sName);</span><br><span class="line">        <span class="keyword">if</span> (filter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Class clazz = COMPILER.compile(sCode, sName);</span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isAbstract(clazz.getModifiers())) &#123;</span><br><span class="line">                filter = (ZuulFilter) FILTER_FACTORY.newInstance(clazz);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the total number of Zuul filters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterInstanceMapSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filterRegistry.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * From a file this will read the ZuulFilter source code, compile it, and add it to the list of current filters</span></span><br><span class="line"><span class="comment">     * a true response means that it was successful.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if the filter in file successfully read, compiled, verified and added to Zuul</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InstantiationException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">putFilter</span><span class="params">(File file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String sName = file.getAbsolutePath() + file.getName();</span><br><span class="line">        <span class="comment">// 如果文件在上次加载后发生了变化，重新编译加载</span></span><br><span class="line">        <span class="keyword">if</span> (filterClassLastModified.get(sName) != <span class="keyword">null</span> &amp;&amp; (file.lastModified() != filterClassLastModified.get(sName))) &#123;</span><br><span class="line">            LOG.debug(<span class="string">"reloading filter "</span> + sName);</span><br><span class="line">            filterRegistry.remove(sName);</span><br><span class="line">        &#125;</span><br><span class="line">        ZuulFilter filter = filterRegistry.get(sName);</span><br><span class="line">        <span class="keyword">if</span> (filter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 编译、加载文件</span></span><br><span class="line">            Class clazz = COMPILER.compile(file);</span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isAbstract(clazz.getModifiers())) &#123;</span><br><span class="line">                filter = (ZuulFilter) FILTER_FACTORY.newInstance(clazz);</span><br><span class="line">                <span class="comment">// 清空filter.filterType()类型的List&lt;Filter&gt;缓存，重新构建</span></span><br><span class="line">                List&lt;ZuulFilter&gt; list = hashFiltersByType.get(filter.filterType());</span><br><span class="line">                <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//重新构建某种类型Filter的List</span></span><br><span class="line">                    hashFiltersByType.remove(filter.filterType()); <span class="comment">//rebuild this list</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//向Filter Registry放入新的Filter</span></span><br><span class="line">                filterRegistry.put(file.getAbsolutePath() + file.getName(), filter);</span><br><span class="line">                filterClassLastModified.put(sName, file.lastModified());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据Filter类型返回同一类型的Filter</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a List&lt;ZuulFilter&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ZuulFilter&gt; <span class="title">getFiltersByType</span><span class="params">(String filterType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;ZuulFilter&gt; list = hashFiltersByType.get(filterType);</span><br><span class="line">        <span class="keyword">if</span> (list != <span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;ZuulFilter&gt;();</span><br><span class="line"></span><br><span class="line">        Collection&lt;ZuulFilter&gt; filters = filterRegistry.getAllFilters();</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;ZuulFilter&gt; iterator = filters.iterator(); iterator.hasNext(); ) &#123;</span><br><span class="line">            ZuulFilter filter = iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (filter.filterType().equals(filterType)) &#123;</span><br><span class="line">                list.add(filter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//根据</span></span><br><span class="line">        Collections.sort(list); </span><br><span class="line"></span><br><span class="line">        hashFiltersByType.putIfAbsent(filterType, list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>把Groovy源码进行编译并加载进jvm里。</p></blockquote><h3 id="2-3-FilterRegistry"><a href="#2-3-FilterRegistry" class="headerlink" title="2.3 FilterRegistry"></a>2.3 FilterRegistry</h3><p> com.netflix.zuul.filters.FilterRegistry可以理解为就是用ConcurrentHashMap，在运行过程中存储Filter的数据结构，进行Put或Revome操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> FilterRegistry INSTANCE = <span class="keyword">new</span> FilterRegistry();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> FilterRegistry <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, ZuulFilter&gt; filters = <span class="keyword">new</span> ConcurrentHashMap&lt;String, ZuulFilter&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FilterRegistry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZuulFilter <span class="title">remove</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.filters.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZuulFilter <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.filters.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, ZuulFilter filter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filters.putIfAbsent(key, filter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.filters.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ZuulFilter&gt; <span class="title">getAllFilters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.filters.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-DynamicCodeCompiler"><a href="#2-4-DynamicCodeCompiler" class="headerlink" title="2.4 DynamicCodeCompiler"></a>2.4 DynamicCodeCompiler</h3><p> com.netflix.zuul.DynamicCodeCompiler.java,主要是一个接口，定义两种加载编译源码的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DynamicCodeCompiler</span> </span>&#123;</span><br><span class="line">    <span class="function">Class <span class="title">compile</span><span class="params">(String sCode, String sName)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Class <span class="title">compile</span><span class="params">(File file)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-参考文章"><a href="#三-参考文章" class="headerlink" title="三.参考文章"></a>三.参考文章</h2><p> <a href="http://microservices.io/patterns/apigateway.html" target="_blank" rel="noopener">http://microservices.io/patterns/apigateway.html</a></p>]]></content>
      
      <categories>
          
          <category> 跟我学Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Zuul </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Zuul遗失的世界(二)</title>
      <link href="/sc/sc-zuul-s2/"/>
      <url>/sc/sc-zuul-s2/</url>
      <content type="html"><![CDATA[<p>  <strong>摘要</strong>:  接着上一篇《Spring Cloud Zuul遗失的世界(一)》，ZuulController继承了ServletWrappingController，将当前应用中的ZuulServlet直接包装为一个Controller，暴露为入口访问，在本篇文章中介绍etflix-zuul-core的代码Zuul的执行的生命周期等。</p><h2 id="一-Netflix-zuul-core源码分析"><a href="#一-Netflix-zuul-core源码分析" class="headerlink" title="一.Netflix zuul core源码分析"></a>一.Netflix zuul core源码分析</h2><p>com.netflix.zuul.http.ZuulServlet是ZuulFilter链执行的入口，通过service方法，提取请求到RequestContext，然后通过调用ZuulRunner，依次按顺序执行每种类型的Filter，完成整个Filter的生命周期，架构图如下所示。</p><a id="more"></a><p><img src="http://upload-images.jianshu.io/upload_images/2279594-2e6134e4743b0483.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="zuul.png"></p><h3 id="1-1-ZuulServlet代码分析"><a href="#1-1-ZuulServlet代码分析" class="headerlink" title="1.1 ZuulServlet代码分析"></a>1.1 ZuulServlet代码分析</h3><p><a href="https://camo.githubusercontent.com/4eb7754152028cdebd5c09d1c6f5acc7683f0094/687474703a2f2f6e6574666c69782e6769746875622e696f2f7a75756c2f696d616765732f7a75756c2d726571756573742d6c6966656379636c652e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/4eb7754152028cdebd5c09d1c6f5acc7683f0094/687474703a2f2f6e6574666c69782e6769746875622e696f2f7a75756c2f696d616765732f7a75756c2d726571756573742d6c6966656379636c652e706e67" alt="zuul-request-lifecycle"></a></p><p>在ZuulConfiguration中点击com.netflix.zuul.http.ZuulServlet打开代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3374242278843351500L</span>;</span><br><span class="line">    <span class="keyword">private</span> ZuulRunner zuulRunner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(config);</span><br><span class="line"></span><br><span class="line">        String bufferReqsStr = config.getInitParameter(<span class="string">"buffer-requests"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> bufferReqs = bufferReqsStr != <span class="keyword">null</span> &amp;&amp; bufferReqsStr.equals(<span class="string">"true"</span>) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        zuulRunner = <span class="keyword">new</span> ZuulRunner(bufferReqs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(javax.servlet.ServletRequest servletRequest, javax.servlet.ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//调用zuulRunner.init(servletRequest, servletResponse)进行请求上下文的传递</span></span><br><span class="line">            init((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Marks this request as having passed through the "Zuul engine", as opposed to servlets</span></span><br><span class="line">            <span class="comment">// explicitly bound in web.xml, for which requests will not have the same data attached</span></span><br><span class="line">            RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">            context.setZuulEngineRan();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                preRoute();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">                error(e);</span><br><span class="line">                postRoute();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                route();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">                error(e);</span><br><span class="line">                postRoute();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                postRoute();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">                error(e);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            error(<span class="keyword">new</span> ZuulException(e, <span class="number">500</span>, <span class="string">"UNHANDLED_EXCEPTION_"</span> + e.getClass().getName()));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            RequestContext.getCurrentContext().unset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行 "post" ZuulFilters</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postRoute</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        zuulRunner.postRoute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行 "route" filters</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">route</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        zuulRunner.route();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行 "pre" filters</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preRoute</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        zuulRunner.preRoute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * initializes request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(HttpServletRequest servletRequest, HttpServletResponse servletResponse)</span> </span>&#123;</span><br><span class="line">        zuulRunner.init(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sets error context info and executes "error" filters</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">error</span><span class="params">(ZuulException e)</span> </span>&#123;</span><br><span class="line">        RequestContext.getCurrentContext().setThrowable(e);</span><br><span class="line">        zuulRunner.error();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如上所示，ZuulServlet其实就是一个Servlet，service方法包含了Zuul的整个生命周期。</p></blockquote><h4 id="1-1-1-ZuulServlet-init代码拆解分析"><a href="#1-1-1-ZuulServlet-init代码拆解分析" class="headerlink" title="1.1.1 ZuulServlet init代码拆解分析"></a>1.1.1 ZuulServlet init代码拆解分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//init() - 注册一个ZuulRunner用于调用整个filter 链</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(HttpServletRequest servletRequest, HttpServletResponse servletResponse)</span> </span>&#123;</span><br><span class="line">        zuulRunner.init(servletRequest, servletResponse);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-2-ZuulServlet-service代码分析"><a href="#1-1-2-ZuulServlet-service代码分析" class="headerlink" title="1.1.2 ZuulServlet service代码分析"></a>1.1.2 ZuulServlet service代码分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 调用init将req,res置入上下文.获取并标记上下文此session已经通过进入</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(javax.servlet.ServletRequest servletRequest, javax.servlet.ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         init((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Marks this request as having passed through the "Zuul engine", as opposed to servlets</span></span><br><span class="line">         <span class="comment">// explicitly bound in web.xml, for which requests will not have the same data attached</span></span><br><span class="line">         RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">         context.setZuulEngineRan();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             preRoute();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">             error(e);</span><br><span class="line">             postRoute();</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             route();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">             error(e);</span><br><span class="line">             postRoute();</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             postRoute();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">             error(e);</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">         error(<span class="keyword">new</span> ZuulException(e, <span class="number">500</span>, <span class="string">"UNHANDLED_EXCEPTION_"</span> + e.getClass().getName()));</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         RequestContext.getCurrentContext().unset();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>正常情况下，请求只经过pre -&gt; route -&gt; post。<br>两层try…catch，内层只捕获ZuulException，而其他异常由外层捕获。<br>内层3个try…catch语句，只有pre,route抛出ZuulException时，才会执行errror，再执行post。而当post(88行)抛出ZuulException后，只会执行error。<br>外层捕获其他异常(内层try语句块中抛出的非ZuulException异常以及内层catch语句中抛出的所有异常)后，将HTTP状态码设置为500，同时交给error处理。<br>整个流程的终点有两个：post及error；而非只有post一个。</p></blockquote><h3 id="1-2-Zuul的请求上下文-RequestContext"><a href="#1-2-Zuul的请求上下文-RequestContext" class="headerlink" title="1.2 Zuul的请求上下文 RequestContext"></a>1.2 Zuul的请求上下文 RequestContext</h3><p> com.netflix.zuul.context.RequestContext继承了ConcurrentHashMap<string, object="">，是Zuul Filter生命周期中处理http请求上下文,是一个threadlocal的Map.</string,></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestContext</span> <span class="keyword">extends</span> <span class="title">ConcurrentHashMap</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(RequestContext.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> Class&lt;? extends RequestContext&gt; contextClass = RequestContext.class;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RequestContext testContext = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;? extends RequestContext&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;RequestContext&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> RequestContext <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> contextClass.newInstance();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//其余省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-ContextLifecycleFilter"><a href="#1-3-ContextLifecycleFilter" class="headerlink" title="1.3  ContextLifecycleFilter"></a>1.3  ContextLifecycleFilter</h3><p> com.netflix.zuul.context.ContextLifecycleFilter是调用链外围finally中remove上文中threadlocal.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLifecycleFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            chain.doFilter(req, res);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            RequestContext.getCurrentContext().unset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-Zuul的运行执行器-ZuulRunner"><a href="#1-4-Zuul的运行执行器-ZuulRunner" class="headerlink" title="1.4 Zuul的运行执行器-ZuulRunner"></a>1.4 Zuul的运行执行器-ZuulRunner</h3><p>com.netflix.zuul.ZuulRunner，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> bufferRequests;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new &lt;code&gt;ZuulRunner&lt;/code&gt; instance.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZuulRunner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bufferRequests = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bufferRequests - whether to wrap the ServletRequest in HttpServletRequestWrapper and buffer the body.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZuulRunner</span><span class="params">(<span class="keyword">boolean</span> bufferRequests)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bufferRequests = bufferRequests;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sets HttpServlet request and HttpResponse</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// ZuulRunner内传入的req/res就会被替换为wrapper类增强功能:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(HttpServletRequest servletRequest, HttpServletResponse servletResponse)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="keyword">if</span> (bufferRequests) &#123;</span><br><span class="line">            ctx.setRequest(<span class="keyword">new</span> HttpServletRequestWrapper(servletRequest));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ctx.setRequest(servletRequest);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.setResponse(<span class="keyword">new</span> HttpServletResponseWrapper(servletResponse));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>com.netflix.zuul.filters.ZuulServletFilter跟跟ZuulServlet是同一份代码.<br>com.netflix.zuul.monitoring，预留了CounterFactory与TracerFactory的接口，用来扩展实现counter与timer.</p></blockquote>]]></content>
      
      <categories>
          
          <category> 跟我学Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Zuul </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Zuul遗失的世界(一)</title>
      <link href="/sc/sc-zuul-s1/"/>
      <url>/sc/sc-zuul-s1/</url>
      <content type="html"><![CDATA[<p> <strong>摘要</strong>:  Zuul作为java网关届的鼻祖，2016年自研网关中间件的时候，对其源码看了很多次，经过两大互联网公司中间件的洗礼之后，目前轮到自己设计一个网关中间件纳管Spring Cloud。最近抽空把自己的理解，备注一下。由于Spring cloud整合Zuul的代码过多。本文主要介绍Spring Cloud对Netflix Zuul高度抽象封装整合部分。即spring-cloud-netflix-core的代码。</p> <a id="more"></a><h2 id="一-Spring-Cloud-Zuul源码分析"><a href="#一-Spring-Cloud-Zuul源码分析" class="headerlink" title="一.Spring Cloud Zuul源码分析"></a>一.Spring Cloud Zuul源码分析</h2><h3 id="1-1-EnableZuulProxy与-EnableZuulServer"><a href="#1-1-EnableZuulProxy与-EnableZuulServer" class="headerlink" title="1.1 @EnableZuulProxy与@EnableZuulServer"></a>1.1 @EnableZuulProxy与@EnableZuulServer</h3><p>如下主应用程序代码所示，我们使用Spring Cloud Zuul只需要加上@EnableZuulProxy或@EnableZuulServer两种注解就可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudZuulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@EnableZuulProxy与@EnableZuulServer,<br>@EnableZuulServer - 普通Zuul Server,只支持基本的route与filter功能.<br>@EnableZuulProxy - 普通Zuul Server+服务发现与熔断等功能的增强版,具有反向代理功能.</p></blockquote><h3 id="1-2-EnableZuulProxy注解入口"><a href="#1-2-EnableZuulProxy注解入口" class="headerlink" title="1.2 @EnableZuulProxy注解入口"></a>1.2 @EnableZuulProxy注解入口</h3><p> 点开注解@EnableZuulProxy，进入到org.springframework.cloud.netflix.zuul.EnableZuulProxy，如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Import</span>(ZuulProxyConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableZuulProxy &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-ZuulProxyConfiguration代码"><a href="#1-3-ZuulProxyConfiguration代码" class="headerlink" title="1.3 ZuulProxyConfiguration代码"></a>1.3 ZuulProxyConfiguration代码</h3><p>@Import(ZuulProxyConfiguration.class)，查看导入的类org.springframework.cloud.netflix.zuul.ZuulProxyConfiguration，如下所示，可以看到org.springframework.cloud.netflix.zuul.ZuulProxyConfiguration,继承了上文的ZuulConfiguration,新增了服务与实例等概念，核心重要代码已经加入注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123; RibbonCommandFactoryConfiguration.RestClientRibbonConfiguration.class,</span><br><span class="line">RibbonCommandFactoryConfiguration.OkHttpRibbonConfiguration.class,</span><br><span class="line">RibbonCommandFactoryConfiguration.HttpClientRibbonConfiguration.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulProxyConfiguration</span> <span class="keyword">extends</span> <span class="title">ZuulConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> List&lt;RibbonRequestCustomizer&gt; requestCustomizers = Collections.emptyList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DiscoveryClient肩负着从Eureka中获取服务列表,获取对应实例的功能</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discovery;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ServiceRouteMapper serviceRouteMapper;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// zuulFeature 依然是将Zuul标识为Discovery模式.</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HasFeatures <span class="title">zuulFeature</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> HasFeatures.namedFeature(<span class="string">"Zuul (Discovery)"</span>, ZuulProxyConfiguration.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(DiscoveryClientRouteLocator.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DiscoveryClientRouteLocator <span class="title">discoveryRouteLocator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DiscoveryClientRouteLocator(<span class="keyword">this</span>.server.getServletPrefix(), <span class="keyword">this</span>.discovery, <span class="keyword">this</span>.zuulProperties,</span><br><span class="line"><span class="keyword">this</span>.serviceRouteMapper);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 依然是注册了这么个ApplicationEvent来触发上文中的dirty状态.</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ApplicationListener&lt;ApplicationEvent&gt; <span class="title">zuulDiscoveryRefreshRoutesListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ZuulDiscoveryRefreshListener();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulDiscoveryRefreshListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> HeartbeatMonitor monitor = <span class="keyword">new</span> HeartbeatMonitor();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ZuulHandlerMapping zuulHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (event <span class="keyword">instanceof</span> InstanceRegisteredEvent) &#123;</span><br><span class="line">reset();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ParentHeartbeatEvent) &#123;</span><br><span class="line">ParentHeartbeatEvent e = (ParentHeartbeatEvent) event;</span><br><span class="line">resetIfNeeded(e.getValue());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> HeartbeatEvent) &#123;</span><br><span class="line">HeartbeatEvent e = (HeartbeatEvent) event;</span><br><span class="line">resetIfNeeded(e.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetIfNeeded</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.monitor.update(value)) &#123;</span><br><span class="line">reset();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.zuulHandlerMapping.setDirty(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其余省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>DiscoveryClientRouteLocator类中的locateRoutes()方法，将path与上文的ZuulRoute通过DiscoveryClientRouteLocator.locateRoutes()的对应在一起.<br>点击查看其父类，org.springframework.cloud.netflix.zuul.ZuulConfiguration,如下我们可以看到Netflix的Zuul-core的入口，ZuulServlet。</p></blockquote><h3 id="1-4-DiscoveryClientRouteLocator中locateRoutes"><a href="#1-4-DiscoveryClientRouteLocator中locateRoutes" class="headerlink" title="1.4 DiscoveryClientRouteLocator中locateRoutes"></a>1.4 DiscoveryClientRouteLocator中locateRoutes</h3><p>DiscoveryClientRouteLocator类中的locateRoutes的大概流程</p><ol><li>将上文SimpleRouteLocator中解析出来的Route列表灌入内部的LinkedHashMap</li><li>抽取Route自带的serviceId,将其作为key,形成一个<code>staticServices</code>的map</li><li>遍历DiscoveryClient拿到的serviceId列表,匹配正则形式定义的serviceId并将对应的ZuulRoute与之对应</li><li>调整LinkedHashMap内路由顺序,将/**挪到最后</li><li>微调map内容,将key值加上/或者自定义prefix</li></ol><h3 id="1-5-ZuulConfiguration"><a href="#1-5-ZuulConfiguration" class="headerlink" title="1.5 ZuulConfiguration"></a>1.5 ZuulConfiguration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123; ZuulProperties.class &#125;)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ZuulServlet.class)</span><br><span class="line"><span class="comment">// Make sure to get the ServerProperties from the same place as a normal web app would</span></span><br><span class="line"><span class="meta">@Import</span>(ServerPropertiesAutoConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//zuulProperties 对应配置文件的内容</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">protected</span> ZuulProperties zuulProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">protected</span> ServerProperties server;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> ErrorController errorController;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//告知actuator监控当前模式:Simple/Discovery</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HasFeatures <span class="title">zuulFeature</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> HasFeatures.namedFeature(<span class="string">"Zuul (Discovery)"</span>, ZuulProxyConfiguration.class);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//通过继承ServletWrappingController接管了上文定义的ZuulServlet,因此ZuulController就是Zuul的入口</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ZuulController <span class="title">zuulController</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ZuulController();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *ZuulHandlerMapping,响应器模式,其实目前就是把所有路径的请求导入到ZuulController上.&lt;/br&gt;</span></span><br><span class="line"><span class="comment">    *另外的功效是当觉察RouteLocator路由表变更,则更新自己dirty状态,重新注册所有Route到ZuulController.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ZuulHandlerMapping <span class="title">zuulHandlerMapping</span><span class="params">(RouteLocator routes)</span> </span>&#123;</span><br><span class="line">ZuulHandlerMapping mapping = <span class="keyword">new</span> ZuulHandlerMapping(routes, zuulController());</span><br><span class="line">mapping.setErrorController(<span class="keyword">this</span>.errorController);</span><br><span class="line"><span class="keyword">return</span> mapping;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * ZuulRefreshListener,</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulRefreshListener</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ZuulHandlerMapping zuulHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> HeartbeatMonitor heartbeatMonitor = <span class="keyword">new</span> HeartbeatMonitor();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Simple模式下注册RoutesRefreshedEvent,解析配置文件,</span></span><br><span class="line">            <span class="comment">// 维护路由表并监听变化,将请求都导向ZuulController去历经filters</span></span><br><span class="line"><span class="keyword">if</span> (event <span class="keyword">instanceof</span> ContextRefreshedEvent</span><br><span class="line">|| event <span class="keyword">instanceof</span> RefreshScopeRefreshedEvent</span><br><span class="line">|| event <span class="keyword">instanceof</span> RoutesRefreshedEvent) &#123;</span><br><span class="line"><span class="keyword">this</span>.zuulHandlerMapping.setDirty(<span class="keyword">true</span>);</span><br><span class="line">&#125; </span><br><span class="line">            <span class="comment">// Endpoint模式下又添加了HeartbeatEvent</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> HeartbeatEvent) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.heartbeatMonitor.update(((HeartbeatEvent) event).getValue())) &#123;</span><br><span class="line"><span class="keyword">this</span>.zuulHandlerMapping.setDirty(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//其余省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从ZuulConfiguration中可以拿到Simple模式下所有bean.</p></blockquote><h3 id="1-6-ZuulController整合访问的桥梁"><a href="#1-6-ZuulController整合访问的桥梁" class="headerlink" title="1.6  ZuulController整合访问的桥梁"></a>1.6  ZuulController整合访问的桥梁</h3><p> ZuulController继承了ServletWrappingController，将当前应用中的某个Servlet直接包装为一个Controller，所有到ServletWrappingController的请求实际上是由它内部所包装的这个Servlet 实例来处理的，也就是说内部封装的Servlet实例并不对外开放，对于程序的其他范围是不可见的，适配所有的HTTP请求到内部封装的Servlet实例进行处理。它通常用于对已存的Servlet的逻辑重用上。其实这也就是Spring Cloud与Netflix Zuul整合的关键点。</p><p> <img src="/images/sc-study/zuulc.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulController</span> <span class="keyword">extends</span> <span class="title">ServletWrappingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZuulController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">setServletClass(ZuulServlet.class);</span><br><span class="line">setServletName(<span class="string">"zuul"</span>);</span><br><span class="line">setSupportedMethods((String[]) <span class="keyword">null</span>); <span class="comment">// Allow all</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// We don't care about the other features of the base class, just want to</span></span><br><span class="line"><span class="comment">// handle the request</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.handleRequestInternal(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// @see com.netflix.zuul.context.ContextLifecycleFilter.doFilter</span></span><br><span class="line">RequestContext.getCurrentContext().unset();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-ZuulProperties"><a href="#1-7-ZuulProperties" class="headerlink" title="1.7 ZuulProperties"></a>1.7 ZuulProperties</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zuul.ignoredServices</span><br><span class="line">zuul.routes</span><br><span class="line"></span><br><span class="line">zuul:</span><br><span class="line">  ignored-services:</span><br><span class="line">  routes:</span><br></pre></td></tr></table></figure><blockquote><p>其中routes对应着内部类定义ZuulRoute.</p></blockquote><h3 id="1-8-其它补充说明"><a href="#1-8-其它补充说明" class="headerlink" title="1.8 其它补充说明"></a>1.8 其它补充说明</h3><p>org.springframework.cloud.netflix.zuul.filters.Route,是Spring Cloud 的抽象,就是上文<code>RouteLocator</code>潜移默化转换的部分. </p><p>org.springframework.cloud.netflix.zuul.ZuulFilterInitializer,实现<code>ServletContextListener</code>,servlet内容来自tomcat。</p>]]></content>
      
      <categories>
          
          <category> 跟我学Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Zuul </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Spring Cloud中国社区上海网关专题会议》</title>
      <link href="/sc/sc-gw/"/>
      <url>/sc/sc-gw/</url>
      <content type="html"><![CDATA[<p>网关在微服务中的地位尤其重要，如果网关挂了或者出现任何抖动，用户请求的流量将会损耗，将会造成巨大的损失。因此Spring Cloud中国社区联合上海秦苍科技，走进企业畅聊Spring Cloud实战经验，以及网关经验。</p><h2 id="一-会议内容"><a href="#一-会议内容" class="headerlink" title="一.会议内容"></a>一.会议内容</h2><p>1.主题《Spring Cloud中国社区上海网关专题》<br>2.时间:2017年8月20，会议方式:闭门会议<br>3.地点:上海市浦东新区峨山路91弄陆家嘴软件园9号楼（北楼）8楼<br>4.主办方Spring Cloud中国社区+上海秦苍科技<br>5.预计参会人数: 40-50人之间，先到先得，名额满关闭报名通道。<br>6.分享方式(分享人分享+讨论+头脑风暴)</p><a id="more"></a><h2 id="二-分享内容"><a href="#二-分享内容" class="headerlink" title="二.分享内容"></a>二.分享内容</h2><ol><li><p>Spring Cloud Zuul与GPRC服务治理体系整合，来源于Spring Cloud中国社区开源项目saluki。</p></li><li><p>基于Netty自研网关中间件纳管Spring Cloud。</p></li><li><p>如何压测和自动化测试网关</p></li><li><p>上海秦苍科技(买单侠)Spring Cloud生产实战分享(包括Zuul)</p></li></ol><blockquote><p>PS:分享嘉宾保密，闭门会议，您懂得。</p></blockquote><h2 id="三-报名方式"><a href="#三-报名方式" class="headerlink" title="三.报名方式"></a>三.报名方式</h2><p>扫支付宝二维码，支付完毕之后，加管理员微信Software_King，进入微信群，同时会进入Spring Cloud中国社区VIP会员群。<br><img src="/images/sc-gwz.png" width="250px" height="350px"></p><blockquote><p>报名费-&gt;用于茶歇+请分享嘉宾喝咖啡</p></blockquote>]]></content>
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微服务网关解决方案调研和使用总结</title>
      <link href="/janus/gw-solution/"/>
      <url>/janus/gw-solution/</url>
      <content type="html"><![CDATA[<h2 id="一-什么是网关"><a href="#一-什么是网关" class="headerlink" title="一.什么是网关"></a>一.什么是网关</h2><h3 id="1-1-什么是网关"><a href="#1-1-什么是网关" class="headerlink" title="1.1 什么是网关"></a>1.1 什么是网关</h3><p>API Gateway（APIGW / API 网关），顾名思义，是出现在系统边界上的一个面向API的、串行集中式的强管控服务，这里的边界是企业IT系统的边界，可以理解为<code>企业级应用防火墙</code>，主要起到<code>隔离外部访问与内部系统的作用</code>。在微服务概念的流行之前，API网关就已经诞生了，例如银行、证券等领域常见的前置机系统，它也是解决访问认证、报文转换、访问统计等问题的。</p><a id="more"></a><p>API网关的流行，源于近几年来，移动应用与企业间互联需求的兴起。移动应用、企业互联，使得后台服务支持的对象，从以前单一的Web应用，扩展到多种使用场景，且每种使用场景对后台服务的要求都不尽相同。这不仅增加了后台服务的响应量，还增加了后台服务的复杂性。<code>随着微服务架构概念的提出，API网关成为了微服务架构的一个标配组件</code>。</p><h3 id="1-2-网关应该具有的功能"><a href="#1-2-网关应该具有的功能" class="headerlink" title="1.2 网关应该具有的功能"></a>1.2 网关应该具有的功能</h3><p><img src="/images/sc-study/gwf.png" width="650px" height="450px"></p><blockquote><p>如上图所示：网关该具备的最基本的四大功能:统一接入，流量管控，协议适配转发，安全防护。</p></blockquote><h2 id="二-目前网关解决方案"><a href="#二-目前网关解决方案" class="headerlink" title="二.目前网关解决方案"></a>二.目前网关解决方案</h2><h3 id="2-1-Nginx-Lua"><a href="#2-1-Nginx-Lua" class="headerlink" title="2.1 Nginx+ Lua"></a>2.1 Nginx+ Lua</h3><p> Nginx是由IgorSysoev为俄罗斯访问量第二的Rambler.ru站点开发的，一个高性能的HTTP和反向代理服务器。Ngnix一方面可以做反向代理，另外一方面做可以做静态资源服务器。</p><blockquote><p>但是准确的来说，在我看来，这种方案不是真正意义上的网关，而且即使自研网关的目标也是干掉Ngnix。</p></blockquote><h3 id="2-2-Kong"><a href="#2-2-Kong" class="headerlink" title="2.2 Kong"></a>2.2 Kong</h3><p> Kong是Mashape提供的一款API管理软件，它本身是基于Ngnix+lua的，但比nginx提供了更简单的配置方式，数据采用了 ApacheCassandra/PostgreSQL存储，并且提供了一些优秀的插件，比如验证，日志，调用频次限制等。<br> Kong的一个非常诱人的地方就是提供了大量的插件来扩展应用，通过设置不同的插件可以为服务提供各种增强的功能。Kong默认插件插件包括：</p><ul><li>身份认证：Kong提供了Basic Authentication、Key authentication、OAuth2.0authentication、HMAC authentication、JWT、LDAP authentication认证实现。</li><li>安全：ACL（访问控制）、CORS（跨域资源共享）、动态SSL、IP限制、爬虫检测实现。</li><li>流量控制：请求限流（基于请求计数限流）、上游响应限流（根据upstream响应计数限流）、请求大小限制。限流支持本地、Redis和集群限流模式。</li><li>分析监控：Galileo（记录请求和响应数据，实现API分析）、Datadog（记录API Metric如请求次数、请求大小、响应状态和延迟，可视化API Metric）、Runscope（记录请求和响应数据，实现API性能测试和监控）。</li><li>转换：请求转换、响应转换</li></ul><blockquote><p>优点:Kong本身也是基于Nginx的，所以在性能和稳定性上都没有问题。Kong作为一款商业软件，在Nginx上做了很扩展工作，而且还有很多付费的商业插件。Kong本身也有付费的企业版，其中包括技术支持、使用培训服务以及API 分析插件。</p></blockquote><hr><blockquote><p>缺点:Kong的缺点就是，如果你使用Spring Cloud，Kong如何结合目前已有的服务治理体系？</p></blockquote><h3 id="2-3-Spring-Cloud-Zuul"><a href="#2-3-Spring-Cloud-Zuul" class="headerlink" title="2.3 Spring Cloud Zuul"></a>2.3 Spring Cloud Zuul</h3><p>Zuul 是Netflix公司开源的一个API网关组件，Spring Cloud对其进行二次基于Spring Boot的注解式封装做到开箱即用。目前来说，结合Sring Cloud提供的服务治理体系，可以做到请求转发，根据配置的或者默认的路由规则进行路由和Load Balance，集成Hystrix。详细可以参考<a href="http://xujin.org/sc/sc-zuul-01/">Spring Cloud Zuul的URL转发和路由规则</a>。</p><p>Spring Cloud Zuul处理每个请求的方式是针对每个请求是用一个线程来处理。PS，根据统计数据目前Zuul最多能达到（1000-2000)QPS。使用过Netty的都知道，一般都会使用Boos组和work组，通常情况下，为了提高性能，所有请求会被放到处理队列中，从线程池中选取空闲线程来处理该请求。</p><p>Spring Cloud Zuul需要做一些灰度，降级，标签路由，限流，WAF封禁，需要自定义Filter去或者做一些定制化实现。详细文章可以参考<a href="http://xujin.org/sc/sc-ribbon-demoted/">在Spring Cloud中实现降级之权重路由和标签路由</a></p><blockquote><p>虽然可以通过自定义Filter实现，我们想要的功能，但是由于Zuul本身的设计和基于<code>单线程的接收请求和转发处理</code>，在我看来目前来看Zuul 就显得很鸡肋，随着Zuul2一直跳票，Spring Cloud推出自己的Spring Cloud Gateway.</p></blockquote><p><a href="https://spencergibb.netlify.com/preso/detroit-cf-api-gateway-2017-03/#/" target="_blank" rel="noopener">The API Gateway is Dead! Long Live the API Gateway!</a></p><blockquote><p>大意:Zuul已死，Spring Cloud Gateway永生。</p></blockquote><h3 id="2-4-Spring-Cloud-Gateway"><a href="#2-4-Spring-Cloud-Gateway" class="headerlink" title="2.4 Spring Cloud Gateway"></a>2.4 Spring Cloud Gateway</h3><p>A Gateway built on Spring Framework 5.0 and Spring Boot 2.0 providing routing and more。</p><blockquote><p>Spring Cloud Gateway是基于Spring 框架5.0版本和Spring Boot 2.0的版本构建，提供路由等功能。</p></blockquote><p>Spring Cloud GateWay具有以下特征</p><ul><li>Java 8/Spring 5/Boot 2</li><li>WebFlux/Reactor</li><li>HTTP/2 and Websockets</li><li>Finchley Release Train (Q4 2017)</li></ul><blockquote><p>由于Spring 5.0支持Netty，Http2，而Spring Boot 2.0支持Spring 5.0，因此Spring Cloud Gateway支持Netty和Http2顺理成章。至于2017年Q4季度是否发布完整的Spring Cloud Gateway我们拭目以待，<code>但是至于最终落地看最终使用情况</code>。</p></blockquote><p>详细信息可以参考：<a href="http://xujin.org/sc/sc-gateway/">Spring Cloud Gateway离开孵化器的变化</a></p><h3 id="2-5-Kong-Zuul的网关方案"><a href="#2-5-Kong-Zuul的网关方案" class="headerlink" title="2.5 Kong+Zuul的网关方案"></a>2.5 Kong+Zuul的网关方案</h3><p><img src="/images/sc-study/kzuul.png" width="650px" height="450px"></p><blockquote><p>如上图所示:Kong+Zuul实现的网关方案，在加上阿里云的SLB，整个调用链路多了好几层，为什么要这么做呢？发挥Kong+Spring Cloud Zuul各自的优点形成“聚合网关”。个人不建议这样使用网关，因此自研网关中间件，显得尤其重要。</p></blockquote><h2 id="三-基于Spring-Cloud-Zuul构建网关"><a href="#三-基于Spring-Cloud-Zuul构建网关" class="headerlink" title="三.基于Spring Cloud Zuul构建网关"></a>三.基于Spring Cloud Zuul构建网关</h2><p>用Spring Cloud Zuul构建网关其实相当鸡肋，比如动态Filter，比如标签路由，降级，比如动态Filter，比如带管控审计流程，易操作的UI界面等。</p><p>zuul是netfix的api 网关，主要特色有：filter的PRPE(pre,route,post,error)模型、groovy的fitler机制，其中spring cloud对其有比较好的扩展，但是spring cloud对其的扩展感觉不是很完美，存在路由规则无法只能是通过配置文件来存储，而无法动态配置的目的，其中有一个人写了一个starter插件来解决路由规则配置到Cassandra的问题，详细请看：<a href="https://github.com/jmnarloch/zuul-route-cassandra-spring-cloud-starter" target="_blank" rel="noopener">将路由规则配置到KV分布式存储系统Cassandra</a></p><h3 id="3-1-定义自己的Filter机制"><a href="#3-1-定义自己的Filter机制" class="headerlink" title="3.1 定义自己的Filter机制"></a>3.1 定义自己的Filter机制</h3><p>这里主要是做了流控及协议转化的工作，这里主要是http-&gt;grpc的转换；<br>LimitAccessFilter：利用redis令牌桶算法进行流控<br>GrpcRemoteRouteFilter：http转化为grpc的协议转换</p><h3 id="3-2-路由数据变更基于事件通知路由规则刷新"><a href="#3-2-路由数据变更基于事件通知路由规则刷新" class="headerlink" title="3.2  路由数据变更基于事件通知路由规则刷新"></a>3.2  路由数据变更基于事件通知路由规则刷新</h3><p>实现动态路由有两种实现方式:<br>1.第一是DiscoveryClientRouteLocator的重新覆盖,推荐是，Spring Cloud整合GRPC，REST协议适配转发为内部GRPC服务时采用此种方法扩展修改。</p><p>2.第二是实现了RefreshableRouteLocator接口，能够实现动态刷新，可以参考<a href="http://blog.csdn.net/u013815546/article/details/68944039" target="_blank" rel="noopener"> spring cloud Zuul动态路由</a></p><h4 id="3-2-1-基于事件更新源码分析"><a href="#3-2-1-基于事件更新源码分析" class="headerlink" title="3.2.1 基于事件更新源码分析"></a>3.2.1 基于事件更新源码分析</h4><p> 为什么要基于事件更新，原理如下所示：<br>在org.springframework.cloud.netflix.zuul.ZuulConfiguration.java中228-250行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123; ZuulProperties.class &#125;)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ZuulServlet.class)</span><br><span class="line"><span class="comment">// Make sure to get the ServerProperties from the same place as a normal web app would</span></span><br><span class="line"><span class="meta">@Import</span>(ServerPropertiesAutoConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//zuul的配置信息,对应了application.properties或yml中的配置信息</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">protected</span> ZuulProperties zuulProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">protected</span> ServerProperties server;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> ErrorController errorController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HasFeatures <span class="title">zuulFeature</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> HasFeatures.namedFeature(<span class="string">"Zuul (Simple)"</span>, ZuulConfiguration.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(RouteLocator.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> RouteLocator <span class="title">routeLocator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//默认配置的实现是SimpleRouteLocator.class</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SimpleRouteLocator(<span class="keyword">this</span>.server.getServletPrefix(),</span><br><span class="line"><span class="keyword">this</span>.zuulProperties);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ZuulController <span class="title">zuulController</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ZuulController();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ZuulHandlerMapping <span class="title">zuulHandlerMapping</span><span class="params">(RouteLocator routes)</span> </span>&#123;</span><br><span class="line">ZuulHandlerMapping mapping = <span class="keyword">new</span> ZuulHandlerMapping(routes, zuulController());</span><br><span class="line">mapping.setErrorController(<span class="keyword">this</span>.errorController);</span><br><span class="line"><span class="keyword">return</span> mapping;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//注册了一个路由刷新监听器，默认实现是ZuulRefreshListener.class</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ApplicationListener&lt;ApplicationEvent&gt; <span class="title">zuulRefreshRoutesListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ZuulRefreshListener();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"zuulServlet"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">zuulServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ServletRegistrationBean servlet = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> ZuulServlet(),</span><br><span class="line"><span class="keyword">this</span>.zuulProperties.getServletPattern());</span><br><span class="line"><span class="comment">// The whole point of exposing this servlet is to provide a route that doesn't</span></span><br><span class="line"><span class="comment">// buffer requests.</span></span><br><span class="line">servlet.addInitParameter(<span class="string">"buffer-requests"</span>, <span class="string">"false"</span>);</span><br><span class="line"><span class="keyword">return</span> servlet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pre filters</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletDetectionFilter <span class="title">servletDetectionFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ServletDetectionFilter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FormBodyWrapperFilter <span class="title">formBodyWrapperFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> FormBodyWrapperFilter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DebugFilter <span class="title">debugFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DebugFilter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Servlet30WrapperFilter <span class="title">servlet30WrapperFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Servlet30WrapperFilter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// post filters</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SendResponseFilter <span class="title">sendResponseFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SendResponseFilter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SendErrorFilter <span class="title">sendErrorFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SendErrorFilter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SendForwardFilter <span class="title">sendForwardFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SendForwardFilter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulFilterConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, ZuulFilter&gt; filters;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ZuulFilterInitializer <span class="title">zuulFilterInitializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ZuulFilterInitializer(<span class="keyword">this</span>.filters);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulRefreshListener</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ZuulHandlerMapping zuulHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> HeartbeatMonitor heartbeatMonitor = <span class="keyword">new</span> HeartbeatMonitor();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (event <span class="keyword">instanceof</span> ContextRefreshedEvent</span><br><span class="line">|| event <span class="keyword">instanceof</span> RefreshScopeRefreshedEvent</span><br><span class="line">|| event <span class="keyword">instanceof</span> RoutesRefreshedEvent) &#123;</span><br><span class="line"><span class="keyword">this</span>.zuulHandlerMapping.setDirty(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> HeartbeatEvent) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.heartbeatMonitor.update(((HeartbeatEvent) event).getValue())) &#123;</span><br><span class="line"><span class="keyword">this</span>.zuulHandlerMapping.setDirty(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如上所示,当使用ApplicationEventPublisher发送的Event为ContextRefreshedEvent，RefreshScopeRefreshedEvent，RoutesRefreshedEvent才会通知Zuul去刷新路由。</p></blockquote><h3 id="3-3-基于事件更新实现方式处理方式-DiscoveryClientRouteLocator"><a href="#3-3-基于事件更新实现方式处理方式-DiscoveryClientRouteLocator" class="headerlink" title="3.3 基于事件更新实现方式处理方式-DiscoveryClientRouteLocator"></a>3.3 基于事件更新实现方式处理方式-DiscoveryClientRouteLocator</h3><h4 id="3-3-1-处理思路"><a href="#3-3-1-处理思路" class="headerlink" title="3.3.1 处理思路"></a>3.3.1 处理思路</h4><p>此插件针对的spring cloud zuul版本比较老，因此需要对其进行改进，将路由配置可以配置到mysql这样的关系型数据库中，详细请看<a href="https://github.com/linking12/saluki/tree/develop/saluki-gateway/src/main/java/com/quancheng/saluki/gateway/zuul" target="_blank" rel="noopener">Zuul的改动点</a>。</p><h4 id="3-3-2-对DiscoveryClientRouteLocator的重新覆盖"><a href="#3-3-2-对DiscoveryClientRouteLocator的重新覆盖" class="headerlink" title="3.3.2 对DiscoveryClientRouteLocator的重新覆盖"></a>3.3.2 对DiscoveryClientRouteLocator的重新覆盖</h4><p> 对DiscoveryClientRouteLocator的重新覆盖，该类的作用就是从yml或属性文件中读取路由规则；<br> 具体参看源码org.springframework.cloud.netflix.zuul.filters.discovery.DiscoveryClientRouteLocator，主要方法如下，浅显易懂，就不做多余解释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> LinkedHashMap&lt;String, ZuulRoute&gt; <span class="title">locateRoutes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LinkedHashMap&lt;String, ZuulRoute&gt; routesMap = <span class="keyword">new</span> LinkedHashMap&lt;String, ZuulRoute&gt;();</span><br><span class="line">routesMap.putAll(<span class="keyword">super</span>.locateRoutes());</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.discovery != <span class="keyword">null</span>) &#123;</span><br><span class="line">Map&lt;String, ZuulRoute&gt; staticServices = <span class="keyword">new</span> LinkedHashMap&lt;String, ZuulRoute&gt;();</span><br><span class="line"><span class="keyword">for</span> (ZuulRoute route : routesMap.values()) &#123;</span><br><span class="line">String serviceId = route.getServiceId();</span><br><span class="line"><span class="keyword">if</span> (serviceId == <span class="keyword">null</span>) &#123;</span><br><span class="line">serviceId = route.getId();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (serviceId != <span class="keyword">null</span>) &#123;</span><br><span class="line">staticServices.put(serviceId, route);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Add routes for discovery services by default</span></span><br><span class="line">List&lt;String&gt; services = <span class="keyword">this</span>.discovery.getServices();</span><br><span class="line">String[] ignored = <span class="keyword">this</span>.properties.getIgnoredServices()</span><br><span class="line">.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (String serviceId : services) &#123;</span><br><span class="line"><span class="comment">// Ignore specifically ignored services and those that were manually</span></span><br><span class="line"><span class="comment">// configured</span></span><br><span class="line">String key = <span class="string">"/"</span> + mapRouteToService(serviceId) + <span class="string">"/**"</span>;</span><br><span class="line"><span class="keyword">if</span> (staticServices.containsKey(serviceId)</span><br><span class="line">&amp;&amp; staticServices.get(serviceId).getUrl() == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Explicitly configured with no URL, cannot be ignored</span></span><br><span class="line"><span class="comment">// all static routes are already in routesMap</span></span><br><span class="line"><span class="comment">// Update location using serviceId if location is null</span></span><br><span class="line">ZuulRoute staticRoute = staticServices.get(serviceId);</span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasText(staticRoute.getLocation())) &#123;</span><br><span class="line">staticRoute.setLocation(serviceId);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!PatternMatchUtils.simpleMatch(ignored, serviceId)</span><br><span class="line">&amp;&amp; !routesMap.containsKey(key)) &#123;</span><br><span class="line"><span class="comment">// Not ignored</span></span><br><span class="line">routesMap.put(key, <span class="keyword">new</span> ZuulRoute(key, serviceId));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (routesMap.get(DEFAULT_ROUTE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">ZuulRoute defaultRoute = routesMap.get(DEFAULT_ROUTE);</span><br><span class="line"><span class="comment">// Move the defaultServiceId to the end</span></span><br><span class="line">routesMap.remove(DEFAULT_ROUTE);</span><br><span class="line">routesMap.put(DEFAULT_ROUTE, defaultRoute);</span><br><span class="line">&#125;</span><br><span class="line">LinkedHashMap&lt;String, ZuulRoute&gt; values = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;String, ZuulRoute&gt; entry : routesMap.entrySet()) &#123;</span><br><span class="line">String path = entry.getKey();</span><br><span class="line"><span class="comment">// Prepend with slash if not already present.</span></span><br><span class="line"><span class="keyword">if</span> (!path.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">path = <span class="string">"/"</span> + path;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.properties.getPrefix())) &#123;</span><br><span class="line">path = <span class="keyword">this</span>.properties.getPrefix() + path;</span><br><span class="line"><span class="keyword">if</span> (!path.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">path = <span class="string">"/"</span> + path;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">values.put(path, entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-3-生产者产生事件通知"><a href="#3-3-3-生产者产生事件通知" class="headerlink" title="3.3.3 生产者产生事件通知"></a>3.3.3 生产者产生事件通知</h4><p>数据变更对网关的稳定性来说，也是一个很大的挑战。当对路由信息进行CRUD操作之后，需要Spring Cloud Zuul重新刷新路由规则，实现方式通过spring的event来实现。</p><p>1.实现基于ApplicationEventPublisherAware的事件生产者的代码片段<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line">publisher.publishEvent(<span class="keyword">new</span> InstanceRegisteredEvent&lt;&gt;(<span class="keyword">this</span>, <span class="keyword">this</span>.environment));</span><br></pre></td></tr></table></figure></p><p>2.Spring Cloud netflix内部的事件消费者</p><p> org.springframework.cloud.netflix.zuul.RoutesRefreshedEvent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutesRefreshedEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> RouteLocator locator;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RoutesRefreshedEvent</span><span class="params">(RouteLocator locator)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(locator);</span><br><span class="line"><span class="keyword">this</span>.locator = locator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> RouteLocator <span class="title">getLocator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.locator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四-基于Spring-Cloud-Gateway构建网关"><a href="#四-基于Spring-Cloud-Gateway构建网关" class="headerlink" title="四.基于Spring Cloud Gateway构建网关"></a>四.基于Spring Cloud Gateway构建网关</h2><p>由于Spring Cloud Gateway<code>未完全成熟，而且性能，稳定性等，现在无从考证，没有使用案例</code>，基于Spring Cloud Gateway方案构建自己的<code>网关风险比较大</code>，而且<code>PS不知道到年底是否成熟可用</code>。故在这里不做过多说明。</p><h2 id="五-基于Netty自研网关中间件"><a href="#五-基于Netty自研网关中间件" class="headerlink" title="五.基于Netty自研网关中间件"></a>五.基于Netty自研网关中间件</h2><h3 id="5-1-架构图"><a href="#5-1-架构图" class="headerlink" title="5.1 架构图"></a>5.1 架构图</h3><p>可以参考架构图如下:</p><p><img src="/images/sc-study/janus.jpg" width="650px" height="450px"></p><h3 id="5-2-设计原则"><a href="#5-2-设计原则" class="headerlink" title="5.2 设计原则"></a>5.2 设计原则</h3><ul><li>1.每个Filter基于责任链，只做专一的一件事</li><li>2.每个Filter有各自独立的数据</li><li>3.损耗性能的Filter顺序往后放</li><li>4.启动读取配置顺序，先远端，若远端失败，则读取本地。</li><li>5.集群网关，要注意数据的diff和灰度</li><li>6.尽量做到和服务治理框架解耦，易于接入，易于升级</li></ul><h2 id="六-参考文章"><a href="#六-参考文章" class="headerlink" title="六.参考文章"></a>六.参考文章</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzI5MDEzMzg5Nw==&amp;mid=2660395381&amp;idx=1&amp;sn=00105c0f314d11a2b0af45ab36ba0f15&amp;chksm=f7424b93c035c285d34dc14612776bdbaf11f1dad0870ef90c6583c11f7ddb9362969bcdea21&amp;mpshare=1&amp;scene=1&amp;srcid=0619kwX5g5unylbYd3bYkamn&amp;key=0e40aeace6ff4dc8f60a65c5953db788ebd3507c1f0004d1aea8d483f87a477b019b87d66b9cd4a9d070b96ffd8d5176481ffa2b9650e0060d9d5af32967349cc29c69f4913e36ddfe46ddecc3c2ae78&amp;ascene=0&amp;uin=MTA0OTU5MTMyMw%3D%3D&amp;devicetype=iMac+MacBookPro13%2C3+OSX+OSX+10.12.4+build(16E195" target="_blank" rel="noopener">企业级API网关的设计</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzA5MzQ2NTY0OA==&amp;mid=2650797020&amp;idx=1&amp;sn=48bb5a4e232a3680c8890ccb7e581b0a&amp;chksm=88562e83bf21a7950cdac1680498d433a042f219568add78d8d45eb39c30f8a8a3f7588e39df&amp;mpshare=1&amp;scene=2&amp;srcid=0724Gz8kWjZo0w6tt5tsk8iA&amp;key=48d1218a6e2970b0689b0057ebaebd1a4e0c207fca0dd6786dc9f5a8f0b90f21def29eb79324454150e230aa7207732a361e382880923c7883822bbbdce43140ac9b246e7b47fb313429d51aaf493400&amp;ascene=0&amp;uin=MTA0OTU5MTMyMw%3D%3D&amp;devicetype=iMac+MacBookPro13%2C3+OSX+OSX+10.12.4+build(16E195" target="_blank" rel="noopener">微服务与API 网关（上）: 为什么需要API网关？</a><br><a href="http://blog.csdn.net/u013815546/article/details/68944039" target="_blank" rel="noopener">http://blog.csdn.net/u013815546/article/details/68944039</a><br><a href="https://segmentfault.com/a/1190000009191419" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009191419</a></p>]]></content>
      
      <categories>
          
          <category> Janus网关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网关中间件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入理解HashMap上篇</title>
      <link href="/java/hm01/"/>
      <url>/java/hm01/</url>
      <content type="html"><![CDATA[<p><strong>前言</strong>: HashMap是Java程序员使用频率最高的用于映射(键值对)处理的数据类型。随着JDK（Java Developmet Kit）版本的更新，JDK1.8对HashMap底层的实现进行了优化，例如引入红黑树的数据结构和扩容的优化等。最近刚好有时间，刚好把HashMap相关的内容和之前做唯品会网关的一些经验整理一下。</p><h2 id="一-HashMap的概述"><a href="#一-HashMap的概述" class="headerlink" title="一.HashMap的概述"></a>一.HashMap的概述</h2><h3 id="1-1-HashMap的数据结构"><a href="#1-1-HashMap的数据结构" class="headerlink" title="1.1 HashMap的数据结构"></a>1.1 HashMap的数据结构</h3><p>HashMap的内存结构和原理，以及线程安全都是面试的热点问题。Java中的数据结构基本可以用数组+链表的解决。</p><ul><li>数组的优缺点:通过下标索引方便查找，但是在数组中插入或删除一个元素比较困难。</li><li>链表的优缺点:由于在链表中查找一个元素需要以遍历链表的方式去查找，而插入，删除快速。因此链表适合<code>快速插入和删除的场景，不利于查找</code>。</li></ul><a id="more"></a><p>而HashMap就是综合了上述的两种数据结构的优点，HashMap由<code>Entry数组+链表组成</code>，如下图所示。</p><p><img src="/images/java/hashmap01.png" width="650px" height="450px"></p><p>从上图我们可以发现HashMap是<code>由Entry数组+链表</code>组成的，一个长度为16的数组中，每个元素存储的是一个链表的头结点。那么这些元素是按照什么样的规则存储到数组中呢。一般情况是通过<code>hash(key)%len</code>获得，也就是元素的key的哈希值对数组长度取模得到。比如上述哈希表中，12%16=12,28%16=12,108%16=12,140%16=12。所以<code>12、28、108</code>以及140都存储在数组下标为<code>12</code>的位置。</p><h3 id="1-2-HashMap的存取实现简单说明"><a href="#1-2-HashMap的存取实现简单说明" class="headerlink" title="1.2 HashMap的存取实现简单说明"></a>1.2 HashMap的存取实现简单说明</h3><h4 id="1-2-1-HashMap-put方法实现"><a href="#1-2-1-HashMap-put方法实现" class="headerlink" title="1.2.1 HashMap put方法实现"></a>1.2.1 HashMap put方法实现</h4><p>1.首先HashMap里面实现一个静态内部类<code>Entry</code>，其重要的属性有 <code>key , value, next</code>，从属性key,value我们就能很明显的看出来Entry就是<code>HashMap键值对实现的一个基础bean</code>，我们上面说到HashMap的基础就是一个线性数组，这个数组就是Entry[]，Map里面的内容都保存在Entry[]里面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> K key;<span class="comment">//Key-value结构的key</span></span><br><span class="line">      V value;<span class="comment">//存储值</span></span><br><span class="line">      Entry&lt;K,V&gt; next;<span class="comment">//指向下一个链表节点</span></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> hash;<span class="comment">//哈希值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.既然是线性数组，为什么能随机存取？这里HashMap用了一个小算法，大致是这样实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储时:</span></span><br><span class="line"><span class="comment">// 这个hashCode方法这里不详述,只要理解每个key的hash是一个固定的int值</span></span><br><span class="line"><span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = hash % Entry[].length;</span><br><span class="line"></span><br><span class="line">Entry[index] = value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取值时:</span></span><br><span class="line"><span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = hash % Entry[].length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Entry[index];</span><br></pre></td></tr></table></figure><p>到这里我们轻松的理解了HashMap通过键值对实现存取的基本原理</p><p>3.疑问：如果两个key通过hash%Entry[].length得到的index相同，会不会有覆盖的危险？</p><p>　　这里HashMap里面用到链式数据结构的一个概念。上面我们提到过Entry类里面有一个next属性，作用是指向下一个Entry。打个比方， 第一个键值对A进来，通过计算其key的hash得到的index=0，记做:Entry[0] = A。一会后又进来一个键值对B，通过计算其index也等于0，现在怎么办？HashMap会这样做:B.next = A,Entry[0] = B,如果又进来C,index也等于0,那么C.next = B,Entry[0] = C；这样我们发现index=0的地方其实存取了A,B,C三个键值对,他们通过next这个属性链接在一起。所以疑问不用担心。也就是说数组中存储的是最后插入的元素。到这里为止，HashMap的大致实现，我们应该已经清楚了。</p><p>　　当然HashMap里面也包含一些优化方面的实现，这里也说一下。比如：Entry[]的长度一定后，随着map里面数据的越来越长，这样同一个index的链就会很长，会不会影响性能？HashMap里面设置一个因素（也称为因子），随着map的size越来越大，Entry[]会以一定的规则加长长度。　　　　</p><h2 id="二-HashMap非线程安全"><a href="#二-HashMap非线程安全" class="headerlink" title="二.HashMap非线程安全"></a>二.HashMap非线程安全</h2><h3 id="2-1-HashMap进行Put操作"><a href="#2-1-HashMap进行Put操作" class="headerlink" title="2.1 HashMap进行Put操作"></a>2.1 HashMap进行Put操作</h3><h4 id="2-1-1-Jdk8以下HashMap的Put操作"><a href="#2-1-1-Jdk8以下HashMap的Put操作" class="headerlink" title="2.1.1 Jdk8以下HashMap的Put操作"></a>2.1.1 Jdk8以下HashMap的Put操作</h4><p>put操作主要是判空，对key的hashcode执行一次HashMap自己的哈希函数，得到bucketindex位置，还有对重复key的覆盖操作。</p><p> 在HashMap做put操作的时候会调用到以下的方法，<code>addEntry和createEntry</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">        <span class="comment">//得到key的hashcode，同时再做一次hash操作</span></span><br><span class="line">        <span class="keyword">int</span> hash = hash(key.hashCode());</span><br><span class="line">        <span class="comment">//对数组长度取余，决定下标位置</span></span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">          * 首先找到数组下标处的链表结点，</span></span><br><span class="line"><span class="comment">          * 判断key对一个的hash值是否已经存在，如果存在将其替换为新的value</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="comment">//Hash碰撞的解决</span></span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        modCount++;</span><br><span class="line">        addEntry(hash, key, value, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>涉及到的几个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">        <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>现在假如A线程和B线程<code>同时进入addEntry</code>，然后计算出了<code>相同的哈希值对应了相同的数组位置</code>，因为此时该位置还没数据，然后对<code>同一个数组位置调用createEntry</code>，两个线程会同时得到现在的头结点，然后A写入新的头结点之后，B也写入新的头结点，那B的写入操作就会覆盖A的写入操作造成A的写入操作丢失。</p><h4 id="2-1-2-jdk8中HashMap的Put操作"><a href="#2-1-2-jdk8中HashMap的Put操作" class="headerlink" title="2.1.2 jdk8中HashMap的Put操作"></a>2.1.2 jdk8中HashMap的Put操作</h4><p><img src="/images/java/hashmap8.png" width="650px" height="450px"></p><p>①.判断键值对数组table[i]是否为空或为null，否则执行resize()进行扩容；</p><p>②.根据键值key计算hash值得到插入的数组索引i，如果table[i]==null，直接新建节点添加，转向⑥，如果table[i]不为空，转向③；</p><p>③.判断table[i]的首个元素是否和key一样，如果相同直接覆盖value，否则转向④，这里的相同指的是hashCode以及equals；</p><p>④.判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对，否则转向⑤；</p><p>⑤.遍历table[i]，判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操作，否则进行链表的插入操作；遍历过程中若发现key已经存在直接覆盖value即可；</p><p>⑥.插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold，如果超过，进行扩容。</p><p>JDK1.8HashMap的put方法源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 对key的hashCode()做hash</span></span><br><span class="line">      <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">     Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">      <span class="comment">// 步骤①：tab为空则创建</span></span><br><span class="line">     <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">         n = (tab = resize()).length;</span><br><span class="line">     <span class="comment">// 步骤②：计算index，并对null做处理 </span></span><br><span class="line">     <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>) </span><br><span class="line">         tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">     <span class="keyword">else</span> &#123;</span><br><span class="line">         Node&lt;K,V&gt; e; K k;</span><br><span class="line">         <span class="comment">// 步骤③：节点key存在，直接覆盖value</span></span><br><span class="line">         <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">             ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">             e = p;</span><br><span class="line">         <span class="comment">// 步骤④：判断该链为红黑树</span></span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">             e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">         <span class="comment">// 步骤⑤：该链为链表</span></span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                 <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                     p.next = newNode(hash, key,value,<span class="keyword">null</span>);</span><br><span class="line">                        <span class="comment">//链表长度大于8转换为红黑树进行处理</span></span><br><span class="line">                     <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st  </span></span><br><span class="line">                         treeifyBin(tab, hash);</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                    <span class="comment">// key已经存在直接覆盖value</span></span><br><span class="line">                 <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                     ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) </span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                 p = e;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">             V oldValue = e.value;</span><br><span class="line">             <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                 e.value = value;</span><br><span class="line">             afterNodeAccess(e);</span><br><span class="line">             <span class="keyword">return</span> oldValue;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     ++modCount;</span><br><span class="line">     <span class="comment">// 步骤⑥：超过最大容量 就扩容</span></span><br><span class="line">     <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">         resize();</span><br><span class="line">     afterNodeInsertion(evict);</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-HashMap进行Get操作"><a href="#2-2-HashMap进行Get操作" class="headerlink" title="2.2 HashMap进行Get操作"></a>2.2 HashMap进行Get操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> getForNullKey();</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key.hashCode());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">          * 先定位到数组元素，再遍历该元素处的链表</span></span><br><span class="line"><span class="comment">          * 判断的条件是key的hash值相同，并且链表的存储的key值和传入的key值相同</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];e != <span class="keyword">null</span>;e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))</span><br><span class="line">                <span class="keyword">return</span> e.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>看一下链表的结点数据结构，保存了四个字段，包括key，value，key对应的hash值以及链表的下一个节点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> K key;<span class="comment">//Key-value结构的key</span></span><br><span class="line">      V value;<span class="comment">//存储值</span></span><br><span class="line">      Entry&lt;K,V&gt; next;<span class="comment">//指向下一个链表节点</span></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> hash;<span class="comment">//哈希值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-HashMap扩容的时候"><a href="#2-3-HashMap扩容的时候" class="headerlink" title="2.3 HashMap扩容的时候"></a>2.3 HashMap扩容的时候</h3><p>扩容(resize)就是重新计算容量，向HashMap对象里不停的添加元素，而HashMap对象内部的数组无法装载更多的元素时，对象就需要扩大数组的长度，以便能装入更多的元素。当然Java里的数组是无法自动扩容的，方法是使用一个新的数组代替已有的容量小的数组，就像我们用一个小桶装水，如果想装更多的水，就得换大水桶。</p><p>还是上面那个addEntry方法中，有个扩容的操作，这个操作会新生成一个新的容量的数组，然后对原数组的所有键值对重新进行计算和写入新的数组，之后指向新生成的数组。来看一下扩容的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用新的容量来给table扩容  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;  </span><br><span class="line">    Entry[] oldTable = table; <span class="comment">//引用扩容前的Entry数组 </span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length; <span class="comment">//保存old capacity  </span></span><br><span class="line">    <span class="comment">// 如果旧的容量已经是系统默认最大容量了(扩容前的数组大小如果已经达到最大(2^30)了 )，那么将阈值设置成整形的最大值，退出 ,  </span></span><br><span class="line">    <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;  </span><br><span class="line">        threshold = Integer.MAX_VALUE;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化一个新的Entry数组  </span></span><br><span class="line">    Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];  </span><br><span class="line">    <span class="comment">//将数据转移到新的Entry数组里 </span></span><br><span class="line">    transfer(newTable, initHashSeedAsNeeded(newCapacity));  </span><br><span class="line">    <span class="comment">//HashMap的table属性引用新的Entry数组</span></span><br><span class="line">    table = newTable;  </span><br><span class="line">    <span class="comment">//设置阈值  </span></span><br><span class="line">    threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是使用一个容量更大的数组来代替已有的容量小的数组，<code>transfer()</code>方法将<code>原有Entry数组</code>的元素<code>拷贝到新的Entry数组</code>里。</p><p>那么问题来了，当多个线程同时进来，检测到总数量超过门限值的时候就会同时调用resize操作，各自生成新的数组并rehash后赋给该map底层的数组table，结果最终只有最后一个线程生成的新数组被赋给table变量，其他线程的均会丢失。而且当某些线程已经完成赋值而其他线程刚开始的时候，就会用已经被赋值的table作为原始数组，这样也会有问题。所以在扩容操作的时候也有可能会引起一些并发的问题。</p><h3 id="2-4-删除数据的时候"><a href="#2-4-删除数据的时候" class="headerlink" title="2.4 删除数据的时候"></a>2.4 删除数据的时候</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//根据指定的key删除Entry，返回对应的value  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;  </span><br><span class="line">    Entry&lt;K,V&gt; e = removeEntryForKey(key);  </span><br><span class="line">    <span class="keyword">return</span> (e == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//根据指定的key，删除Entry,并返回对应的value  </span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">removeEntryForKey</span><span class="params">(Object key)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);  </span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);  </span><br><span class="line">    Entry&lt;K,V&gt; prev = table[i];  </span><br><span class="line">    Entry&lt;K,V&gt; e = prev;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;  </span><br><span class="line">        Entry&lt;K,V&gt; next = e.next;  </span><br><span class="line">        Object k;  </span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;  </span><br><span class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;  </span><br><span class="line">            modCount++;  </span><br><span class="line">            size--;  </span><br><span class="line">            <span class="keyword">if</span> (prev == e) <span class="comment">//如果删除的是table中的第一项的引用  </span></span><br><span class="line">                table[i] = next;<span class="comment">//直接将第一项中的next的引用存入table[i]中  </span></span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">                prev.next = next; <span class="comment">//否则将table[i]中当前Entry的前一个Entry中的next置为当前Entry的next  </span></span><br><span class="line">            e.recordRemoval(<span class="keyword">this</span>);  </span><br><span class="line">            <span class="keyword">return</span> e;  </span><br><span class="line">        &#125;  </span><br><span class="line">        prev = e;  </span><br><span class="line">        e = next;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> e;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除这一块可能会出现两种线程安全问题，第一种是一个线程判断得到了指定的数组位置i并进入了循环，此时，另一个线程也在同样的位置已经删掉了i位置的那个数据了，然后第一个线程那边就没了。但是删除的话，没了倒问题不大。<br>　　再看另一种情况，当多个线程同时操作同一个数组位置的时候，也都会先取得现在状态下该位置存储的头结点，然后各自去进行计算操作，之后再把结果写会到该数组位置去，其实写回的时候可能其他的线程已经就把这个位置给修改过了，就会覆盖其他线程的修改。 　　</p><blockquote><p>总之HashMap是非线程安全的，在高并发的场合使用的话，要用Collections.synchronizedMap进行包装一下。</p></blockquote><h2 id="三-参考文章"><a href="#三-参考文章" class="headerlink" title="三.参考文章"></a>三.参考文章</h2><p><a href="https://zhuanlan.zhihu.com/p/21673805" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/21673805</a><br><a href="http://www.importnew.com/7099.html" target="_blank" rel="noopener">http://www.importnew.com/7099.html</a><br><a href="http://www.admin10000.com/document/3322.html" target="_blank" rel="noopener">http://www.admin10000.com/document/3322.html</a><br><a href="http://www.cnblogs.com/chenssy/p/3521565.html" target="_blank" rel="noopener">http://www.cnblogs.com/chenssy/p/3521565.html</a></p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Jdk </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Gateway离开孵化器的变化</title>
      <link href="/sc/sc-gateway/"/>
      <url>/sc/sc-gateway/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>: Spring Cloud对Netflix的Zuul进行封装之后，Spring Cloud Zuul作为Spring Cloud的网关一直被大家使用用至今，在Spring Cloud的核心项目开发者<code>Spencergibb</code>的一篇博客<a href="https://spencergibb.netlify.com/preso/detroit-cf-api-gateway-2017-03/#/" target="_blank" rel="noopener">The API Gateway is Dead! Long Live the API Gateway!</a>中介绍了Zuul，Zuul 2以及为什么会有Spring Cloud Gateway,大家有兴趣可以看一下。本文将会对spring-cloud-gateway-mvc源码进行demo演示和简单分析。</p><h2 id="一-Spring-Cloud-Gateway概况"><a href="#一-Spring-Cloud-Gateway概况" class="headerlink" title="一.Spring Cloud Gateway概况"></a>一.Spring Cloud Gateway概况</h2><h3 id="1-1-什么是Spring-Cloud-GateWay"><a href="#1-1-什么是Spring-Cloud-GateWay" class="headerlink" title="1.1 什么是Spring Cloud GateWay"></a>1.1 什么是Spring Cloud GateWay</h3><p>A Gateway built on Spring Framework 5.0 and Spring Boot 2.0 providing routing and more。</p><blockquote><p>Spring Cloud Gateway是基于Spring 框架5.0版本和Spring Boot 2.0的版本构建，提供路由等功能。</p></blockquote><a id="more"></a><h3 id="1-2-Spring-Cloud-GateWay的功能"><a href="#1-2-Spring-Cloud-GateWay的功能" class="headerlink" title="1.2 Spring Cloud GateWay的功能"></a>1.2 Spring Cloud GateWay的功能</h3><p>Spring Cloud GateWay具有以下特征</p><ul><li>Java 8/Spring 5/Boot 2</li><li>WebFlux/Reactor</li><li>HTTP/2 and Websockets</li><li>Finchley Release Train (Q4 2017)</li></ul><blockquote><p>由于Spring 5.0支持Netty，Http2，而Spring Boot 2.0支持Spring 5.0，因此Spring Cloud Gateway支持Netty和Http2顺理成章。至于2017年Q4季度是否发布完整的Spring Cloud Gateway我们拭目以待。</p></blockquote><h3 id="1-3-Spring-Cloud-GateWay离开孵化器"><a href="#1-3-Spring-Cloud-GateWay离开孵化器" class="headerlink" title="1.3 Spring Cloud GateWay离开孵化器"></a>1.3 Spring Cloud GateWay离开孵化器</h3><p>从2016年12月份以后，在Github上出现了Spring Cloud Gateway的项目，地址为:<a href="https://github.com/spring-cloud-incubator/spring-cloud-gateway" target="_blank" rel="noopener">https://github.com/spring-cloud-incubator/spring-cloud-gateway</a>,如下图所示。<br><img src="/images/sc-study/sc-gateway01.png" alt=""></p><blockquote><p>Spring Cloud GateWay离开孵化器之后master分支有MVC模块,需要查看完整的其它的模块请切换分支到<a href="https://github.com/spring-cloud/spring-cloud-gateway/tree/2.0.x" target="_blank" rel="noopener">2.X</a> 。因此在本文不分析core里面的设计和实现,后面将会补一篇文章介绍。</p></blockquote><hr><blockquote><p>2.Spring Cloud Gateway的设计核心代码主要在spring-cloud-gateway-core,但是由于目前离开孵化器之后spring-cloud-gateway-core的代码挪到了<a href="https://github.com/spring-cloud/spring-cloud-gateway/tree/2.0.x" target="_blank" rel="noopener">2.X</a>中,点击访问会自动转发到<a href="https://github.com/spring-cloud/spring-cloud-gateway" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-gateway</a></p></blockquote><p><img src="/images/sc-study/sc-gateway02.png" alt=""><br>如上图所示，目前<code>master分支</code>中gateway没有core和starter，相对而言增加了一个<code>spring-cloud-gateway-mvc</code>模块，在下面章节将会对该模块进行demo和源码分析。</p><h3 id="1-3-用Spring-MVC的方式构建Gateway"><a href="#1-3-用Spring-MVC的方式构建Gateway" class="headerlink" title="1.3 用Spring MVC的方式构建Gateway"></a>1.3 用Spring MVC的方式构建Gateway</h3><h4 id="1-3-1-How-to-Include-Spring-Cloud-Gateway"><a href="#1-3-1-How-to-Include-Spring-Cloud-Gateway" class="headerlink" title="1.3.1 How to Include Spring Cloud Gateway"></a>1.3.1 How to Include Spring Cloud Gateway</h4><p>To include Spring Cloud Gateway in your project add a dependency with group org.springframework.cloud and artifact id spring-cloud-gateway-mvc. See the Spring Cloud Project page for details on setting up your build system with the current Spring Cloud Release Train.</p><blockquote><p>使用spring-cloud-gateway-mvc，只要引入对应的spring-cloud-gateway-mvc的依赖坐标。</p></blockquote><h4 id="1-3-2-Building-a-Gateway-Using-Spring-MVC"><a href="#1-3-2-Building-a-Gateway-Using-Spring-MVC" class="headerlink" title="1.3.2 Building a Gateway Using Spring MVC"></a>1.3.2 Building a Gateway Using Spring MVC</h4><p>Spring Cloud Gateway provides a utility object called ProxyExchange which you can use inside a regular Spring MVC handler as a method parameter. It supports basic downstream HTTP exchanges via methods that mirror the HTTP verbs, or forwarding to a local handler via the forward() method.</p><p>Example (proxying a request to “/test” downstream to a remote server):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewaySampleApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;remote.home&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> URI home;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;?&gt; proxy(ProxyExchange&lt;Object&gt; proxy) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">return</span> proxy.uri(home.toString() + <span class="string">"/image/png"</span>).get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Spring Cloud Gateway 提供了一个实用的对象叫ProxyExchange，你可以用它像使用Spring MVC Handler的方式去转发，重定向构建网关。</p></blockquote><p>更多信息参考:<a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/master/docs/src/main/asciidoc/spring-cloud-gateway.adoc" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-gateway/blob/master/docs/src/main/asciidoc/spring-cloud-gateway.adoc</a></p><h2 id="二-Spring-Cloud-Gateway的MVC模块源码分析"><a href="#二-Spring-Cloud-Gateway的MVC模块源码分析" class="headerlink" title="二.Spring Cloud Gateway的MVC模块源码分析"></a>二.Spring Cloud Gateway的MVC模块源码分析</h2><h3 id="2-1-构建Spring-Cloud-Gateway的Demo"><a href="#2-1-构建Spring-Cloud-Gateway的Demo" class="headerlink" title="2.1 构建Spring Cloud Gateway的Demo"></a>2.1 构建Spring Cloud Gateway的Demo</h3><p>Spring Cloud Gateway的工程里已经给我提供了一个，spring-cloud-gateway-sample的工程，该工程项目依赖于spring-cloud-gateway-mvc，因此要对其源码分析，只需让才sample 正常work就ok。<br><img src="/images/sc-study/sc-gateway03.png" alt=""></p><blockquote><p>从工程截图来看，和我之前看的core模块来说，mvc模块只是做了个请求的转发。</p></blockquote><h3 id="2-2-Spring-Cloud-Gateway模块源码分析"><a href="#2-2-Spring-Cloud-Gateway模块源码分析" class="headerlink" title="2.2 Spring Cloud Gateway模块源码分析"></a>2.2 Spring Cloud Gateway模块源码分析</h3><p>1.在spring-cloud-gateway-sample中application.yml增加应用名和端口配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr"> server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">sc-gw</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  security:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">remote:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="attr">http://httpbin.org</span>  <span class="comment">#请求转发的目标服务Url</span></span><br></pre></td></tr></table></figure><p>2.org.springframework.cloud.gateway.sample.GatewaySampleApplication.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewaySampleApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;remote.home&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> URI home;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//该方法需要传递head为x-host=png.abc.org方可调用</span></span><br><span class="line"><span class="meta">@GetMapping</span>(path=<span class="string">"/test"</span>, headers=<span class="string">"x-host=png.abc.org"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">proxy</span><span class="params">(ProxyExchange&lt;Object&gt; proxy)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> proxy.uri(home.toString() + <span class="string">"/image/png"</span>)</span><br><span class="line">.get(header(<span class="string">"X-TestHeader"</span>, <span class="string">"foobar"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">proxyFoos</span><span class="params">(ProxyExchange&lt;Object&gt; proxy)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> proxy.uri(home.toString() + <span class="string">"/image/webp"</span>).get(header(<span class="string">"X-AnotherHeader"</span>, <span class="string">"baz"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Function&lt;ResponseEntity&lt;Object&gt;, ResponseEntity&lt;Object&gt;&gt; header(String key,</span><br><span class="line">String value) &#123;</span><br><span class="line"><span class="keyword">return</span> response -&gt; ResponseEntity.status(response.getStatusCode())</span><br><span class="line">.headers(response.getHeaders()).header(key, value)</span><br><span class="line">.body(response.getBody());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(GatewaySampleApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-代码分析"><a href="#2-3-代码分析" class="headerlink" title="2.3 代码分析"></a>2.3 代码分析</h3><ul><li>启动GatewaySampleApplication主应用程序，访问<a href="http://localhost:8080/test2,Debug流程如下。" target="_blank" rel="noopener">http://localhost:8080/test2,Debug流程如下。</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">proxyFoos</span><span class="params">(ProxyExchange&lt;Object&gt; proxy)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> proxy.uri(home.toString() + <span class="string">"/image/webp"</span>).get(header(<span class="string">"X-AnotherHeader"</span>, <span class="string">"baz"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在ProxyExchange.java中的237行代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProxyExchange&lt;T&gt; <span class="title">uri</span><span class="params">(String uri)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//将uri:http://httpbin.org/image/webp，new URI对象返回</span></span><br><span class="line"><span class="keyword">this</span>.uri = <span class="keyword">new</span> URI(uri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot create URI"</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在RestTemplate.java中的628行doExecute去使用对应的httpClient实现远程调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(URI url, HttpMethod method, RequestCallback requestCallback,</span></span></span><br><span class="line"><span class="function"><span class="params">ResponseExtractor&lt;T&gt; responseExtractor)</span> <span class="keyword">throws</span> RestClientException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> doExecute(url, method, requestCallback, responseExtractor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终调用代码如下图所示,由于源码比较简单，因此有些细节流程略过，有兴趣可以自己跟踪理解。</p><p><img src="/images/sc-study/sc-gateway04.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> 跟我学Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Gateway </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Zuul异常处理</title>
      <link href="/sc/sc-zuul-excpetion/"/>
      <url>/sc/sc-zuul-excpetion/</url>
      <content type="html"><![CDATA[<p>最近看到了一个GitHub issue在讨论如何在post类型的zuul filter中设置response body，其中涉及到异常情况下，如何返回一个自定义的response body。正好我在升级spring-cloud，也想弄清楚，spring-cloud-zuul是如何处理异常情况的，所以就仔细看了看这部分的实现细节，现在做个笔记记录下来。</p><a id="more"></a><h2 id="1-zull请求的生命周期图"><a href="#1-zull请求的生命周期图" class="headerlink" title="1.zull请求的生命周期图"></a>1.zull请求的生命周期图</h2><p>关于zuul是如何工作的，这里不再介绍，具体可以参看<a href="https://github.com/Netflix/zuul/wiki/How-it-Works" target="_blank" rel="noopener">这里</a>。官方给了一个zull请求的生命周期图：</p><p><a href="https://camo.githubusercontent.com/4eb7754152028cdebd5c09d1c6f5acc7683f0094/687474703a2f2f6e6574666c69782e6769746875622e696f2f7a75756c2f696d616765732f7a75756c2d726571756573742d6c6966656379636c652e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/4eb7754152028cdebd5c09d1c6f5acc7683f0094/687474703a2f2f6e6574666c69782e6769746875622e696f2f7a75756c2f696d616765732f7a75756c2d726571756573742d6c6966656379636c652e706e67" alt="zuul-request-lifecycle"></a></p><p>上图中，实线表示请求必然经过的路径，而虚线表示可能经过的路径；从这张图中可以看出：</p><ul><li>所有请求都必然按照<code>pre</code>-&gt; <code>route</code> -&gt; <code>post</code>的顺序执行。</li><li><code>post</code>返回response。</li><li>如果<code>pre</code>中有自定义filter，则执行自定义filter。</li><li>如果<code>pre</code>,<code>route</code>,<code>post</code>发生错误则执行<code>error</code>，然后再执行<code>post</code>。</li></ul><p>这张图忽略了很多细节；最明显的就是，自定义的filter可以是<code>pre</code>,<code>route</code>,<code>post</code>,<code>error</code>中的任何一种；其次假如<code>post</code>中发生了异常，执行流程交给<code>error</code>处理完之后，又重新回到<code>post</code>中，会不会又有问题？</p><p>所以还是看看代码比较靠谱。以下基于spring-cloud Dalston.RELEASE做代码分析。</p><p>调试一下，就可以看到请求进入zuul之后的整个调用链，简单来说如下：<code>ZuulServlet#service</code> -&gt; <code>FilterProcessor#processZuulFilter</code> -&gt; <code>ZuulFilter#runFilter</code> -&gt; <code>[Concret]ZuulFilter#run</code>。</p><h2 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2.源码分析"></a>2.源码分析</h2><h3 id="ZuulServlet-service"><a href="#ZuulServlet-service" class="headerlink" title="ZuulServlet#service"></a>ZuulServlet#service</h3><p>首先找到请求进入zuul filters的入口：<a href="https://github.com/Netflix/zuul/blob/1.x/zuul-core/src/main/java/com/netflix/zuul/http/ZuulServlet.java#L64" target="_blank" rel="noopener">ZuulServlet#service(ServletRequest, ServletResponse)</a>。</p><p>下面抽出这个函数的主干：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                preRoute();</span><br><span class="line">             &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">                 error(e);</span><br><span class="line">                 postRoute();</span><br><span class="line">                 <span class="keyword">return</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 route();</span><br><span class="line">             &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">                 error(e);</span><br><span class="line">                 postRoute();</span><br><span class="line">                 <span class="keyword">return</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 postRoute();</span><br><span class="line">             &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">                 error(e);</span><br><span class="line">                 <span class="keyword">return</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">             error(<span class="keyword">new</span> ZuulException(e, <span class="number">500</span>, <span class="string">"UNHANDLED_EXCEPTION_"</span> + e.getClass().getName()));</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>这个函数基本遵从但不完全符合官网给出的生命周期图：</p><ul><li>正常情况下，请求只经过<code>pre</code> -&gt; <code>route</code> -&gt; <code>post</code>。</li><li>两层<code>try...catch</code>，内层只捕获<code>ZuulException</code>，而其他异常由外层捕获。</li><li>内层3个<code>try...catch</code>语句，只有<code>pre</code>,<code>route</code>抛出<code>ZuulException</code>时，才会执行<code>errror</code>，再执行<code>post</code>。而当<code>post</code>(88行)抛出<code>ZuulException</code>后，只会执行<code>error</code>。</li><li>外层捕获其他异常(内层<code>try</code>语句块中抛出的非<code>ZuulException</code>异常以及内层<code>catch</code>语句中抛出的所有异常)后，将HTTP状态码设置为500，同时交给<code>error</code>处理。</li><li>整个流程的终点有两个：<code>post</code>及<code>error</code>；而非只有<code>post</code>一个。</li></ul><p>另外看一下<code>error(ZuulException)</code>这个函数到底做了什么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error</span><span class="params">(ZuulException e)</span> </span>&#123;</span><br><span class="line">    RequestContext.getCurrentContext().setThrowable(e);</span><br><span class="line">    zuulRunner.error();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常信息是在这里被加入到<code>RequestContext</code>中的，以供后续的filter使用，然后调用<code>error</code> filters。</p><p>至此我们可以得到一个流程图(感觉还不如代码看得清晰<strong>-_-</strong>!!)：</p><p><a href="https://github.com/lowzj/note-book/blob/master/img/springcloud/sc-ZuulServlet.jpeg" target="_blank" rel="noopener"><img src="https://github.com/lowzj/note-book/raw/master/img/springcloud/sc-ZuulServlet.jpeg" alt="sc-ZuulServlet"></a></p><h3 id="FilterProcessor-processZuulFilter"><a href="#FilterProcessor-processZuulFilter" class="headerlink" title="FilterProcessor#processZuulFilter"></a>FilterProcessor#processZuulFilter</h3><p><a href="https://github.com/Netflix/zuul/blob/1.x/zuul-core/src/main/java/com/netflix/zuul/FilterProcessor.java#L173" target="_blank" rel="noopener">FilterPreocessor#processZuulFilter</a>，这个函数调用ZuulFilter，并且会将异常重新抛出，如果是非<code>ZuulException</code>的异常，则转为状态码为500的<code>ZuulException</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   </span><br><span class="line">            Throwable t = <span class="keyword">null</span>;</span><br><span class="line">   </span><br><span class="line">            ZuulFilterResult result = filter.runFilter();</span><br><span class="line">            ExecutionStatus s = result.getStatus();</span><br><span class="line">   </span><br><span class="line">            <span class="keyword">switch</span> (s) &#123;</span><br><span class="line">                <span class="keyword">case</span> FAILED:</span><br><span class="line">                    t = result.getException();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">   </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) <span class="keyword">throw</span> t;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ZuulException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (ZuulException) e;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ZuulException ex = <span class="keyword">new</span> ZuulException(e, <span class="string">"Filter threw Exception"</span>, <span class="number">500</span>, filter.filterType() + <span class="string">":"</span> + filterName);</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>如果ZuulFilter执行失败，即结果状态为<code>FAILED</code>，则从ZuulFilter的执行结果ZuulFilterResult中提取出异常信息(199行)，然后抛出(214)；在<code>catch</code>语句块中，捕获刚才抛出的异常，判断是否为<code>ZuulException</code>，如果是则直接抛出，否则转化为状态为500的<code>ZuulException</code>再抛出。</p><p>看到这里，基本确认的一点是，ZuulFilter中抛出的任何形式的异常，最终都会转化为<code>ZuulException</code>抛给上层调用者，即<code>ZuulServlet#service</code>。但是这里并不是通过<code>try...catch</code>来捕获ZuulFilter执行中抛出的异常，而是从返回结果ZuulFilterResult中直接获取的，这是怎么一回事，需要再看下<code>ZuulFilter#runFilter</code>的实现逻辑。</p><h3 id="ZuulFilter-runFilter"><a href="#ZuulFilter-runFilter" class="headerlink" title="ZuulFilter#runFilter"></a>ZuulFilter#runFilter</h3><p>下面是从<a href="https://github.com/Netflix/zuul/blob/1.x/zuul-core/src/main/java/com/netflix/zuul/ZuulFilter.java#L110" target="_blank" rel="noopener">ZuulFilter#runFilter()</a>抽取出来的核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ZuulFilterResult zr = <span class="keyword">new</span> ZuulFilterResult();</span><br><span class="line">    </span><br><span class="line">                 <span class="keyword">try</span> &#123;</span><br><span class="line">                     Object res = run();</span><br><span class="line">                     zr = <span class="keyword">new</span> ZuulFilterResult(res, ExecutionStatus.SUCCESS);</span><br><span class="line">                 &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                     zr = <span class="keyword">new</span> ZuulFilterResult(ExecutionStatus.FAILED);</span><br><span class="line">                     zr.setException(e);</span><br><span class="line">                 &#125;</span><br><span class="line">    </span><br><span class="line">         <span class="keyword">return</span> zr;</span><br></pre></td></tr></table></figure><p>这段代码会调用某个具体的ZuulFilter实现的<code>run</code>方法，如果不抛出异常，则返回状态为<code>ExecutionStatus.SUCCESS</code>的ZuulFilterResult(117行)；若有任何异常，则将返回结果的状态设置为<code>ExecutionStatus.FAILED</code>(120)，同时将异常信息设置到返回结果中(121)。即我们实现一个ZuulFilter，如果不抛出异常，则会被认为是成功的，否则就会被当作失败的。</p><p>结合上面两节的代码分析，ZuulFilter中一旦有异常抛出，必然是(或被转化为)<code>ZuulException</code>，然后必然进入到<code>error</code> filters中处理。由此，我们简化一下上面的流程图：</p><p><a href="https://github.com/lowzj/note-book/blob/master/img/springcloud/sc-ZuulServlet-simple.jpeg" target="_blank" rel="noopener"><img src="https://github.com/lowzj/note-book/raw/master/img/springcloud/sc-ZuulServlet-simple.jpeg" alt="sc-ZuulServlet-simple"></a></p><h2 id="3-SpringCloud中的SendErrorFilter"><a href="#3-SpringCloud中的SendErrorFilter" class="headerlink" title="3.SpringCloud中的SendErrorFilter"></a>3.SpringCloud中的SendErrorFilter</h2><p>在<code>Dalston.RELEASE</code>之前，spring-cloud-netflix中并不包含<code>error</code>类型的Filter；而处理错误情况的filter为<code>SendErrorFilter</code>，其类型为<code>post</code>，<code>order</code>为0，比<code>SendResponseFilter</code>优先级高(1000)，即更早调用。先来分析一下<code>Dalston.RELEASE</code>之前版本的<a href="https://github.com/spring-cloud/spring-cloud-netflix/blob/v1.2.7.RELEASE/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/zuul/filters/post/SendErrorFilter.java#L34" target="_blank" rel="noopener">SendErrorFilter</a>，下面的代码片段摘自<code>spring-cloud-netflix 1.2.7.RELEASE</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;error.path:/error&#125;"</span>)</span><br><span class="line">     <span class="keyword">private</span> String errorPath;</span><br><span class="line">   </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">         <span class="comment">// only forward to errorPath if it hasn't been forwarded to already</span></span><br><span class="line">         <span class="keyword">return</span> ctx.containsKey(<span class="string">"error.status_code"</span>)</span><br><span class="line">                 &amp;&amp; !ctx.getBoolean(SEND_ERROR_FILTER_RAN, <span class="keyword">false</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">             <span class="keyword">int</span> statusCode = (Integer) ctx.get(<span class="string">"error.status_code"</span>);</span><br><span class="line">             request.setAttribute(<span class="string">"javax.servlet.error.status_code"</span>, statusCode);</span><br><span class="line">   </span><br><span class="line">             Object e = ctx.get(<span class="string">"error.exception"</span>);</span><br><span class="line">             request.setAttribute(<span class="string">"javax.servlet.error.exception"</span>, e);</span><br><span class="line">   </span><br><span class="line">             String message = (String) ctx.get(<span class="string">"error.message"</span>);</span><br><span class="line">             request.setAttribute(<span class="string">"javax.servlet.error.message"</span>, message);</span><br><span class="line">   </span><br><span class="line">             RequestDispatcher dispatcher = request.getRequestDispatcher(</span><br><span class="line">                     <span class="keyword">this</span>.errorPath);</span><br><span class="line">   </span><br><span class="line">             dispatcher.forward(request, ctx.getResponse());</span><br><span class="line">   </span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中可以得出以下几点：</p><ul><li><code>SendErrorFilter</code>的进入条件是：<code>RequestContext</code>中包含<code>error.status_code</code>，且之前从未执行过该filter。(55, 56)</li><li>会将错误信息转发给<code>errorPath</code>执行；<code>errorPath</code>可由配置项<code>error.paht</code>指定，默认为<code>/error</code>。(38, 79, 84)</li><li>转发的错误信息是从<code>RequestContext</code>中的三个<code>key</code>得到：<code>error.status_code</code>, <code>error.exception</code>, <code>error.message</code>。(65~76)</li><li>如果要使用<code>SendErrorFilter</code>，则我们在自己实现自定义ZuulFilter做异常处理的时候，需要注意：</li><li><p>如果是<code>pre</code>, <code>route</code>类型的filter，则捕获所有内部异常，将异常信息设置到<code>error.message</code>中，设置所需返回的HTTP状态码到<code>error.status_code</code>中；然后抛出一个异常。抛出异常是为了将执行流程交给<code>error-&gt;post</code>这个执行分支；否则，当前filter会被认为执行成功，继续执行后续的filter。<code>run()</code>方法抛出的异常需是(或继承)<code>RuntimeException</code>，因为<code>IZuulFilter#run()</code>接口没有显示抛出异常。</p></li><li><p>如果是 post类型：</p><ul><li>设置该filter的<code>order</code>，小于0(这是<code>SendErrorFilter</code>)。</li><li>仔细考虑<code>shouldFilter()</code>的实现细节，因为异常流也会进入<code>post</code> filters，确定是否需要处理。</li><li><code>run()</code>方法中捕获所有异常，然后设置<code>error.status_code</code>, <code>error.message</code>, <code>error.exception</code>，并且不再抛出异常。否则会进入<code>error</code> filters，但是现在没有，由<code>SendErrorFilter</code>替代；除非自己实现一个<code>error</code> filter，然后禁掉<code>SendErrorFilter</code>。</li></ul></li></ul><p>这个版本中，spring-cloud-netflix提供的这个<code>SendErrorFilter</code>有明显的缺陷，无法处理由<code>post</code> filters抛出的异常，也不符合zuul请求的生命周期图。所以在<code>Dalston.RELEASE</code>之后，即<code>spring-cloud-netflix 1.3.0.RELEASE</code>，将<a href="https://github.com/spring-cloud/spring-cloud-netflix/blob/v1.3.0.RELEASE/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/zuul/filters/post/SendErrorFilter.java#L43" target="_blank" rel="noopener">SendErrorFilter</a>的类型改为了<code>error</code>。</p><p>下面的代码片段摘自<code>spring-cloud-netflix 1.3.0.RELEASE</code>的<code>SendErrorFilter</code>类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// only forward to errorPath if it hasn't been forwarded to already</span></span><br><span class="line">        <span class="keyword">return</span> ctx.getThrowable() != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; !ctx.getBoolean(SEND_ERROR_FILTER_RAN, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">            ZuulException exception = findZuulException(ctx.getThrowable());</span><br><span class="line">  </span><br><span class="line">            request.setAttribute(<span class="string">"javax.servlet.error.status_code"</span>, exception.nStatusCode);</span><br><span class="line">            request.setAttribute(<span class="string">"javax.servlet.error.exception"</span>, exception);</span><br><span class="line">            request.setAttribute(<span class="string">"javax.servlet.error.message"</span>, exception.errorCause);</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function">ZuulException <span class="title">findZuulException</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (throwable.getCause() <span class="keyword">instanceof</span> ZuulRuntimeException) &#123;</span><br><span class="line">           <span class="comment">// this was a failure initiated by one of the local filters</span></span><br><span class="line">           <span class="keyword">return</span> (ZuulException) throwable.getCause().getCause();</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>需要注意几点：</p><ul><li>类型为<code>error</code>(53行)。</li><li>进入条件为：<code>RequestContext</code>中有异常，并且该filter从未执行过(65, 66)。异常对象是在<code>ZuulServlet#error(ZuulException)</code>方法中设置的。</li><li><code>run()</code>方法中提取错误信息不再是从<code>RequestContext</code>的三个<code>key</code>(<code>error.status_code</code>, <code>error.message</code>, <code>error.exception</code>)中获取；而是直接从<code>ZuulException</code>对象中获取(73~82)。</li><li>如何取得<code>ZuulException</code>对象(100<del>118)，最重要的一点是从<code>ZuulRuntimeException</code>中提取<code>ZuulException</code>对象(101</del>103)，而<code>ZuulRuntimeException</code>继承<code>RuntimeException</code>。</li><li>注意101行代码，是判断<code>throwable.getCause()</code>是否为<code>ZuulRuntimeException</code>，这是因为所有非<code>ZuulException</code>的异常在<code>FilterProcessor#processZuulFilter()</code>(227行)中会被转化为<code>ZuulException</code>。</li><li><code>findZuulException</code>没有贴全，其会优先从自定义filter中抛出的<code>ZuulRuntimeException</code>中提取<code>ZuulException</code>对象。这样就允许我们返回我们想要的错误信息和HTTP状态码。</li></ul><p>那基于1.3.0.RELEASE，我们在写自定义filter时，如何做异常处理呢：</p><ul><li>将filter内部异常转化为<code>ZuulException</code>，设置自己需要返回的HTTP状态码，然后包装为<code>ZuulRuntimeException</code>抛出。</li><li>如若不封装为<code>ZuulRuntimeException</code>，则返回的HTTP状态码为500。</li></ul><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ZuulRuntimeException(<span class="keyword">new</span> ZuulException(t, HttpStatus.BAD_REQUEST.value(), t.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想自定义返回的异常信息的response body的格式，最简单的方法是仿照<code>BasicErrorController</code>重写一下<code>/error</code>接口。</p>]]></content>
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Zuul </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Spring MVC拦截器自定义注解实现审计日志收集</title>
      <link href="/ex/ex-mt-anto/"/>
      <url>/ex/ex-mt-anto/</url>
      <content type="html"><![CDATA[<p><strong>前言</strong> Spring WebMvc框架中的Interceptor，与Servlet API中的Filter十分类似，用于对Web请求进行预处理/后处理。通常情况下这些预处理/后处理逻辑是通用的，可以被应用于所有或多个Web请求，例如：</p><ul><li>记录Web请求相关日志，可以用于做一些信息监控、统计、分析</li><li>检查Web请求访问权限，例如发现用户没有登录后，重定向到登录页面</li><li>打开/关闭数据库连接——预处理时打开，后处理关闭，可以避免在所有业务方法中都编写类似代码，也不会忘记关闭数据库连接</li></ul><a id="more"></a><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>使用手动埋点，收集用户审计日志，包括操作人，对应的Url，操作的模块，调用的方法(url),方法的描述。</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>手动在每个Controller方法中，逐一埋点审计日志，这样的方式比较low，而且无法做到组件式通用。因此，采用Spring MVC的HandlerInterceptor(拦截器)+自定义注解实现。</p><h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><h3 id="方法拦截器HandlerInterceptor"><a href="#方法拦截器HandlerInterceptor" class="headerlink" title="方法拦截器HandlerInterceptor"></a>方法拦截器HandlerInterceptor</h3><p>在HandlerInterceptor中有三个方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在执行目标方法之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,HttpServletResponse response, Object handler)</span><span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行目标方法之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span><span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在请求已经返回之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span><span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在以上注释中已经写明执行顺序:</p><ul><li>preHandle()：预处理回调方法，若方法返回值为true，请求继续（调用下一个拦截器或处理器方法）；若方法返回值为false，请求处理流程中断，不会继续调用其他的拦截器或处理器方法，此时需要通过response产生响应；</li><li>postHandle()：后处理回调方法，实现处理器的后处理（但在渲染视图之前），此时可以通过modelAndView对模型数据进行处理或对视图进行处理</li><li>afterCompletion()：整个请求处理完毕回调方法，即在视图渲染完毕时调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(handler.getClass());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所有请求都是从DispatcherServlet来调用请求url对应的方法的,因此我们可以获取到URL对应的Controller方法。</p></blockquote><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><p>定义一个@interface类，AuditLog注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AuditLog &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">url</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">module</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">operation</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">objType</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Target注解是标注这个类它可以标注的位置，常用的元素类型(ElementType)如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ElementType &#123;</span><br><span class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line">    <span class="comment">// TYPE类型可以声明在类上或枚举上或者是注解上</span></span><br><span class="line">    TYPE,</span><br><span class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line">    <span class="comment">// FIELD声明在字段上</span></span><br><span class="line">    FIELD,</span><br><span class="line">    <span class="comment">/** Method declaration */</span></span><br><span class="line">    <span class="comment">// 声明在方法上</span></span><br><span class="line">    METHOD,</span><br><span class="line">    <span class="comment">/** Formal parameter declaration */</span></span><br><span class="line">    <span class="comment">// 声明在形参列表中</span></span><br><span class="line">    PARAMETER,</span><br><span class="line">    <span class="comment">/** Constructor declaration */</span></span><br><span class="line">    <span class="comment">// 声明在构造方法上</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line">    <span class="comment">/** Local variable declaration */</span></span><br><span class="line">    <span class="comment">// 声明在局部变量上</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line">    <span class="comment">/** Annotation type declaration */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line">    <span class="comment">/** Package declaration */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Type parameter declaration</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use of a type</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Retention注解表示的是本注解(标注这个注解的注解保留时期)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">enum</span> RetentionPolicy &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be discarded by the compiler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 源代码时期</span></span><br><span class="line">    SOURCE,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler</span></span><br><span class="line"><span class="comment">     * but need not be retained by the VM at run time.  This is the default</span></span><br><span class="line"><span class="comment">     * behavior.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 字节码时期, 编译之后</span></span><br><span class="line">    CLASS,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler and</span></span><br><span class="line"><span class="comment">     * retained by the VM at run time, so they may be read reflectively.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> java.lang.reflect.AnnotatedElement</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="comment">// 运行时期, 也就是一直保留, 通常也都用这个</span></span><br><span class="line">    RUNTIME</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Documented是否生成文档的标注, 也就是生成接口文档是, 是否生成注解文档。</p><h3 id="Controller使用示例"><a href="#Controller使用示例" class="headerlink" title="Controller使用示例"></a>Controller使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.DELETE)</span><br><span class="line">    <span class="meta">@AuditLog</span>(<span class="keyword">module</span> = AuditLogModule.CHANNEL, operation = AuditLogOperate.DELETE, description = <span class="string">"deleteBuild"</span>,</span><br><span class="line">            objType = AuditLogObjType.CHANNELBUILD)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">deleteBuild</span><span class="params">(HttpServletRequest request, @PathVariable(value = <span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">        <span class="comment">//其它代码省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AuditLogHandlerInterceptor主要代码示例"><a href="#AuditLogHandlerInterceptor主要代码示例" class="headerlink" title="AuditLogHandlerInterceptor主要代码示例"></a>AuditLogHandlerInterceptor主要代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span></span><br><span class="line"><span class="function">           <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod) &#123;</span><br><span class="line">           HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">           LOGGER.error(<span class="string">"auditlog create"</span>);</span><br><span class="line">           Method method = handlerMethod.getMethod();</span><br><span class="line">           AuditLog auditLog = method.getAnnotation(AuditLog.class);</span><br><span class="line">           <span class="keyword">if</span> (auditLog == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               </span><br><span class="line">               AuditLogInfo auditLogInfo = createAuditLog(auditLog, request, response);</span><br><span class="line">               <span class="keyword">if</span> (auditLogInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 AuditLogHandler.createAuditLog(auditLogInfo);</span><br><span class="line">               &#125;</span><br><span class="line">               </span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               LOGGER.error(<span class="string">"auditlog create error"</span>, e);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="扩展自定义注解实现权限控制"><a href="#扩展自定义注解实现权限控制" class="headerlink" title="扩展自定义注解实现权限控制"></a>扩展自定义注解实现权限控制</h2><h3 id="自定义注解-1"><a href="#自定义注解-1" class="headerlink" title="自定义注解"></a>自定义注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Access &#123;</span><br><span class="line"></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] authorities() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] roles() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在方法上配置权限"><a href="#在方法上配置权限" class="headerlink" title="在方法上配置权限"></a>在方法上配置权限</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/admin"</span>, produces = MediaType.APPLICATION_JSON_UTF8_VALUE, method = RequestMethod.GET)</span><br><span class="line">    <span class="comment">// 配置注解权限, 允许身份为admin, 或者说允许权限为admin的人访问</span></span><br><span class="line">    <span class="meta">@Access</span>(authorities = &#123;<span class="string">"admin"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, admin"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="权限逻辑"><a href="#权限逻辑" class="headerlink" title="权限逻辑"></a>权限逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 自定义一个权限拦截器, 继承HandlerInterceptorAdapter类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在调用方法之前执行拦截</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 将handler强转为HandlerMethod, 前面已经证实这个handler就是HandlerMethod</span></span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">        <span class="comment">// 从方法处理器中获取出要调用的方法</span></span><br><span class="line">        Method method = handlerMethod.getMethod();</span><br><span class="line">        <span class="comment">// 获取出方法上的Access注解</span></span><br><span class="line">        Access access = method.getAnnotation(Access.class);</span><br><span class="line">        <span class="keyword">if</span> (access == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果注解为null, 说明不需要拦截, 直接放过</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (access.authorities().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果权限配置不为空, 则取出配置值</span></span><br><span class="line">            String[] authorities = access.authorities();</span><br><span class="line">            Set&lt;String&gt; authSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (String authority : authorities) &#123;</span><br><span class="line">            <span class="comment">// 将权限加入一个set集合中</span></span><br><span class="line">                authSet.add(authority);</span><br><span class="line">            &#125;</span><br><span class="line">            String role = request.getParameter(<span class="string">"role"</span>);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(role)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (authSet.contains(role)) &#123;</span><br><span class="line">                <span class="comment">// 校验通过返回true, 否则拦截请求</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拦截之后应该返回公共结果, 这里没做处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 项目经验 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud项目中通过Feign进行内部服务调用发生401\407错误无返回信息的问题</title>
      <link href="/sc/sc-feign-4xx/"/>
      <url>/sc/sc-feign-4xx/</url>
      <content type="html"><![CDATA[<p><strong>前言</strong> 最近好几个小伙伴，问Spring Cloud项目中通过Feign进行内部服务调用发生401\407错误无返回信息的问题。这个问题如果没有自定义异常自定义Code或者系统中没有自定义code为401或407的code，基本很少能碰到。刚好Spring Cloud中国社区的VIP会员<a href="http://www.jianshu.com/p/44e877e395a9" target="_blank" rel="noopener">任聪博客原文</a>也遇到这个，经过和他交流之后。整理出这篇文章希望能帮助更多的人快速定位问题。<br><a id="more"></a></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>最近在使用Spring Cloud改造现有服务的工作中，在内部服务的调用方式上选择了Feign组件，由于服务与服务之间有权限控制，发现通过Feign来进行调用时如果发生了401、407错误时，调用方不能够取回被调用方返回的错误信息。</p><h2 id="产生原因分析"><a href="#产生原因分析" class="headerlink" title="产生原因分析"></a>产生原因分析</h2><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p>Feign默认使用java.net.HttpURLConnection进行通信，通过查看其子类sun.net.www.protocol.http.HttpURLConnection源码发现代码中在进行通信时单独对错误码为401\407的错误请求做了处理，当请求的错误码为401\407时，会关闭请求流，由于此时还并没有将返回的错误信息写入响应流中，所以接收的返回信息中仅仅能获取到response.status()，而response.body()为null。<br><a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/sun/net/www/protocol/http/HttpURLConnection.java#1079" target="_blank" rel="noopener">HttpURLConnection相关信息的源码链接</a></p><h3 id="问题源代码示例"><a href="#问题源代码示例" class="headerlink" title="问题源代码示例"></a>问题源代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (respCode == HTTP_UNAUTHORIZED) &#123;</span><br><span class="line">    <span class="keyword">if</span> (streaming()) &#123;</span><br><span class="line">        disconnectInternal();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> HttpRetryException (RETRY_MSG2, HTTP_UNAUTHORIZED);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其余代码省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java.net.HttpURLConnection中的HTTP_UNAUTHORIZED的定义如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HTTP_UNAUTHORIZED = <span class="number">401</span>;</span><br></pre></td></tr></table></figure><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>关于此问题产生的原因已经很明显了，就是feign.Client实现通信的方式选用了我们不想使用的HttpURLConnection。想到通常在Spring的代码中OCP都是运用得很好的，所以基本上有解决此问题的信心了，最不济就是自己扩展Feign，实现一个自己想要的feign.Client，当然这种事情Spring Cloud基本都会自己搞定，这也是Spring Cloud强大完善的一个地方。<br>通过这个思路查看源码，果然看到了Spring Cloud在使用Feign提前内置了三种通信方式（feign.Client.Default，feign.httpclient.ApacheHttpClient，feign.okhttp.OkHttpClient），其中缺省的情况使用的就是feign.Client.Default，这个就是使用HttpURLConnection通信的方式。</p><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p>在Spring Cloud项目中使用了Ribbon的组件，其会帮助我们管理使用Feign，查看org.springframework.cloud.netflix.feign.ribbon.FeignRibbonClientAutoConfiguration源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; ILoadBalancer.class, Feign.class &#125;)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore</span>(FeignAutoConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignRibbonClientAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Client <span class="title">feignClient</span><span class="params">(CachingSpringLoadBalancerFactory cachingFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">            SpringClientFactory clientFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoadBalancerFeignClient(<span class="keyword">new</span> Client.Default(<span class="keyword">null</span>, <span class="keyword">null</span>),</span><br><span class="line">                cachingFactory, clientFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass</span>(ApacheHttpClient.class)</span><br><span class="line">    <span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"feign.httpclient.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientFeignLoadBalancedConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">        <span class="keyword">private</span> HttpClient httpClient;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span>(Client.class)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Client <span class="title">feignClient</span><span class="params">(CachingSpringLoadBalancerFactory cachingFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                SpringClientFactory clientFactory)</span> </span>&#123;</span><br><span class="line">            ApacheHttpClient delegate;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.httpClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                delegate = <span class="keyword">new</span> ApacheHttpClient(<span class="keyword">this</span>.httpClient);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                delegate = <span class="keyword">new</span> ApacheHttpClient();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LoadBalancerFeignClient(delegate, cachingFactory, clientFactory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass</span>(OkHttpClient.class)</span><br><span class="line">    <span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"feign.okhttp.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpFeignLoadBalancedConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">        <span class="keyword">private</span> okhttp3.OkHttpClient okHttpClient;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span>(Client.class)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Client <span class="title">feignClient</span><span class="params">(CachingSpringLoadBalancerFactory cachingFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                SpringClientFactory clientFactory)</span> </span>&#123;</span><br><span class="line">            OkHttpClient delegate;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.okHttpClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                delegate = <span class="keyword">new</span> OkHttpClient(<span class="keyword">this</span>.okHttpClient);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                delegate = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LoadBalancerFeignClient(delegate, cachingFactory, clientFactory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从feignClient(CachingSpringLoadBalancerFactory cachingFactory, SpringClientFactory clientFactory) 方法结合其上注解我们可以很清楚的知道，当没有feign.ClientBean的时候会默认生成feign.Client.Default来进行通信，这就是之前说的缺省通信方式</li><li>从HttpClientFeignLoadBalancedConfiguration、OkHttpFeignLoadBalancedConfiguration，我们可以看到其生效的条件，当classpath中有feign.httpclient.ApacheHttpClient并且配置feign.httpclient.enabled=true（缺省为true）、feign.okhttp.OkHttpClient并且配置feign.okhttp.enabled=true（缺省为true）</li><li>当使用ApacheHttpClient或者OkHttpClient进行通信时就不会导致发生401\407错误时，取不到返回的错误信息了</li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>通过其上的分析，解决方法已经显而易见了替换默认的Client</p><h3 id="pom-xml文件中新增依赖"><a href="#pom-xml文件中新增依赖" class="headerlink" title="pom.xml文件中新增依赖"></a>pom.xml文件中新增依赖</h3><h4 id="替换为默认为okhttp-Client"><a href="#替换为默认为okhttp-Client" class="headerlink" title="替换为默认为okhttp Client"></a>替换为默认为okhttp Client</h4><ol><li>增加依赖</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;com.netflix.feign&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;feign-okhttp&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;8.18.0&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.在application.properties增加配置如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feign.okhttp.enabled=true</span><br></pre></td></tr></table></figure><blockquote><p>如何把默认的Client替换为okhttp在这里不做过多阐述，可以参考：<a href="https://segmentfault.com/a/1190000009071952" target="_blank" rel="noopener">spring cloud feign使用okhttp3</a></p></blockquote><h4 id="替换为httpclient"><a href="#替换为httpclient" class="headerlink" title="替换为httpclient"></a>替换为httpclient</h4><ol><li>增加依赖</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.netflix.feign&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;feign-httpclient&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;8.18.0&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.在application.properties增加配置如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feign.httpclient.enabled=true</span><br></pre></td></tr></table></figure><blockquote><p>可以参考<a href="http://xujin.org/sc/sc-fegin01/#更换Feign默认使用的HTTP-Client">更换Feign默认使用的HTTP Client</a></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>由于新增的依赖没有被start管理，并且缺省不会导致程序启动异常，并且返回响应为null与此依赖没有直接关系，因此不方便定位到问题，特此记录下来，希望能帮助到遇到同样问题的人，如对文章有不同的看法，望给予指正。</li><li>本文建立在已经搭建完成Feign的调用基础之上，没有讲述Feign的使用，因为此类文章很多，在此就不重复了，更多的信息可以参考如下文章。</li></ul><p><a href="http://xujin.org/sc/sc-fegin01/">快速使用Spring Cloud Feign作为客户端调用服务提供者</a><br><a href="https://segmentfault.com/a/1190000009071952" target="_blank" rel="noopener">spring cloud feign使用okhttp3</a></p>]]></content>
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Feign </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在Spring Cloud中实现降级之权重路由和标签路由</title>
      <link href="/sc/sc-ribbon-demoted/"/>
      <url>/sc/sc-ribbon-demoted/</url>
      <content type="html"><![CDATA[<p><strong>前言</strong> 限流、降级、灰度是服务治理的一个很重要的功能。本文参考<a href="http://www.jianshu.com/p/37ee1e84900a" target="_blank" rel="noopener">Spring Cloud中国社区的VIP会员-何鹰的博客-整理</a><br>Dubbo自带服务降级、限流功能，spring cloud并没有提供此功能，只能由我们自行实现。这里的限流、降级、灰度都是针对服务实例级别，并不是整个服务级别，整个服务级别可以通过实例部署数量来实现。</p><h2 id="限流降级设计"><a href="#限流降级设计" class="headerlink" title="限流降级设计"></a>限流降级设计</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>服务A，部署了3个实例A1、A2、A3。spring cloud默认客户端负载均衡策略是采用轮询方式，A1、A2、A3三个实例流量均分，各1/3。如果这个时候需要将服务A由1.0版升级至2.0版，我们需要做的步骤是：将A1的流量降为0，柔性下线，关闭A1实例并升级到2.0，将A1流量提升为10%观察2.0线上运行情况，如果情况稳定，则逐步开放流量至不限制及1/3。依次在A2，A3上执行上述操作。<br>在上述步骤中，我们想让特别的人使用2.0，其他人还是使用1.0版，稳定后再全员开放。<br><a id="more"></a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>分析，服务A的流量产生有两个方面，一个是外部流量，外网通过zuul过来的流量，一个是内部流量，服务间调用，服务B调用服务A的这类流量。不管是zuul还是内部服务来的，都是要通过ribbon做客户端负载均衡，我们可以修改ribbon负载均衡策略来实现上述限流、降级、灰度功能。</p><p>要实现这些想法，我们需要对spring-cloud的各个组件、数据流非常熟悉，这样才能知道该在哪里做扩展。一个典型的调用：外网-》Zuul网关-》服务A-》服务B。。。</p><p>spring-cloud跟dubbo一样都是客户端负载均衡，所有调用均由Ribbon来做负载均衡选择服务器，所有调用前后会套一层hystrix做隔离、熔断。服务间调用均用带LoadBalanced注解的RestTemplate发出。RestTemplate-》Ribbon-》hystrix</p><p>通过上述分析我们可以看到，我们的扩展点就在Ribbon，Ribbon根据我们的规则，选择正确的服务器即可。</p><p>我们先来一个dubbo自带的功能：基于权重的流量控制。dubbo自带的控制台可以设置服务实例粒度的半权，倍权。其实就是在客户端负载均衡时，选择服务器带上权重即可，spring-cloud默认是ZoneAvoidanceRule，优先选择相同Zone下的实例，实例间采用轮询方式做负载均衡。我们的想把基于轮询改为基于权重即可。接下来的问题是，每个实例的权重信息保存在哪里？从哪里取？dubbo放在zookeeper中，spring-cloud放在eureka中。我们只需从eureka拿每个实例的权重信息，然后根据权重来选择服务器即可。具体代码LabelAndWeightMetadataRule（先忽略里面的优先匹配label相关代码）。</p><h2 id="工程案例演示"><a href="#工程案例演示" class="headerlink" title="工程案例演示"></a>工程案例演示</h2><p><img src="/images/sc-study/sc-r-d02.png" alt="工程目录"></p><blockquote><p><a href="https://github.com/SoftwareKing/spring-cloud-study/tree/master/sc-ribbon-demoted" target="_blank" rel="noopener">https://github.com/SoftwareKing/spring-cloud-study/tree/master/sc-ribbon-demoted</a></p></blockquote><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><ol><li><p>config 配置中心<br>端口：8888，方便起见直接读取配置文件，生产环境可以读取git。application-dev.properties为全局配置。先启动配置中心，所有服务的配置（包括注册中心的地址）均从配置中心读取。</p></li><li><p>consumer 服务消费者<br>端口：18090，调用服务提供者，为了演示header传递。</p></li><li><p>core 框架核心包<br>核心jar包，所有微服务均引用该包，使用AutoConfig实现免配置，模拟生产环境下spring-cloud的使用。</p></li><li><p>eureka 注册中心<br>端口：8761，/metadata端点实现metadata信息配置。</p></li><li><p>provider 服务提供者<br>端口：18090，服务提供者，无特殊逻辑。</p></li><li><p>zuul 网关<br>端口：8080，演示解析token获得label并放入header往后传递</p></li></ol><h2 id="案例具体实现"><a href="#案例具体实现" class="headerlink" title="案例具体实现"></a>案例具体实现</h2><h3 id="基于权重的实现思路"><a href="#基于权重的实现思路" class="headerlink" title="基于权重的实现思路"></a>基于权重的实现思路</h3><p>LabelAndWeightMetadataRule写好了，那么我们如何使用它，使之生效呢？有3种方式。</p><p>1）写个AutoConfig将LabelAndWeightMetadataRule声明成@Bean，用来替换默认的ZoneAvoidanceRule。这种方式在技术验证、开发测试阶段使用短平快。但是这种方式是强制全局设置，无法个性化。</p><p>2）由于spring-cloud的Ribbon并没有实现netflix Ribbon的所有配置项。netflix配置全局rule方式为：ribbon.NFLoadBalancerRuleClassName=package.YourRule，spring-cloud并不支持，spring-cloud直接到服务粒度，只支持SERVICE_ID.ribbon.NFLoadBalancerRuleClassName=package.YourRule。</p><blockquote><p>我们可以扩展org.springframework.cloud.netflix.ribbon.PropertiesFactory修正spring cloud ribbon未能完全支持netflix ribbon配置的问题。这样我们可以将全局配置写到配置中心的application-dev.properties全局配置中，然后各个微服务还可以根据自身情况做个性化定制。但是PropertiesFactory属性均为私有，应该是spring cloud不建议在此扩展。参见<a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/1741。" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-netflix/issues/1741。</a></p></blockquote><p>3）使用spring cloud官方建议的@RibbonClient方式。该方式仅存在于spring-cloud单元测试中（在我提问后，现在还存在于spring-cloud issue list）。具体代码参见DefaultRibbonConfiguration.java、CoreAutoConfiguration.java。</p><blockquote><p>目前采用第三种方式处理</p></blockquote><h3 id="基于权重的路由测试"><a href="#基于权重的路由测试" class="headerlink" title="基于权重的路由测试"></a>基于权重的路由测试</h3><p>依次开启 config eureka provide（开两个实例，通过启动参数server.port指定不同端口区分） consumer zuul<br>访问 <a href="http://localhost:8761/metadata.html" target="_blank" rel="noopener">http://localhost:8761/metadata.html</a> 这是我手写的一个简单的metadata管理界面，分别设置两个provider实例的weight值（设置完需要一段2分钟才能生效），然后访问 <a href="http://localhost:8080/provider/user" target="_blank" rel="noopener">http://localhost:8080/provider/user</a> 多刷几次来测试zuul是否按权重发送请求，也可以访问 <a href="http://localhost:8080/consumer/test" target="_blank" rel="noopener">http://localhost:8080/consumer/test</a> 多刷几次来测试consumer是否按权重来调用provide服务。</p><h3 id="基于标签的路由处理"><a href="#基于标签的路由处理" class="headerlink" title="基于标签的路由处理"></a>基于标签的路由处理</h3><p>基于权重的搞定之后，接下来才是重头戏：基于标签的路由。入口请求含有各种标签，然后我们可以根据标签幻化出各种各样的路由规则。例如只有标注为粉丝的用户才使用新版本（灰度、AB、金丝雀），例如标注为中国的用户请求必须发送到中国的服务器（全球部署），例如标注为写的请求必须发送到专门的写服务实例（读写分离），等等等等，唯一限制你的就是你的想象力。</p><h4 id="基于标签的路由实现思路"><a href="#基于标签的路由实现思路" class="headerlink" title="基于标签的路由实现思路"></a>基于标签的路由实现思路</h4><p>根据标签的控制，我们当然放到之前写的Ribbon的rule中，每个实例配置的不同规则也是跟之前一样放到注册中心的metadata中。需要解决以下几个问题:</p><p><strong>Q:关键是标签数据如何传过来?</strong></p><blockquote><p>A:权重随机的实现思路里面有答案，请求都通过zuul进来，因此我们可以在zuul里面给请求打标签，基于用户，IP或其他看你的需求，然后将标签信息放入ThreadLocal中，然后在Ribbon Rule中从ThreadLocal拿出来使用就可以了。</p><p>然而，按照这个方式去实验时，发现有问题，拿不到ThreadLocal。原因是有hystrix这个东西，回忆下hystrix的原理，为了做到故障隔离，hystrix启用了自己的线程，不在同一个线程ThreadLocal失效。</p></blockquote><p>那么还有什么办法能够将标签信息一传到底呢，想想之前有没有人实现过类似的东西，没错sleuth，它的链路跟踪就能够将span传递下去，翻翻sleuth源码，找找其他资料，发现可以使用HystrixRequestVariableDefault，这里不建议直接使用HystrixConcurrencyStrategy，会和sleuth的strategy冲突。代码参见CoreHeaderInterceptor.java。现在可以测试zuul里面的rule，看能否拿到标签内容了。</p><blockquote><p>标签传到HystrixRequestVariableDefault这里的，如果项目中没有使用Hystrix就用不了了,这个时候需要做一个判断在restTemple里面做个判断，没有hystrix就直接threadlocal取。</p></blockquote><p><strong>Q:这里还不是终点，解决了zuul的路由，服务A调服务B这里的路由怎么处理呢？zuul算出来的标签如何往后面依次传递下去呢?</strong></p><p>   我们还是抄sleuth：把标签放入header，服务A调服务B时，将服务A header里面的标签放到服务B的header里，依次传递下去。这里的关键点就是：内部的微服务在接收到发来的请求时(zuul-&gt;A，A-&gt;B）我们将请求放入ThreadLocal，哦，不对，是HystrixRequestVariableDefault，还记得上面说的原因么：）。<br>   这个容易处理，写一个spring mvc拦截器即可，代码参见CoreHeaderInterceptor。然后发送请求时自动带上这个里面保存的标签信息，参见RestTemplate的拦截器CoreHttpRequestInterceptor。到此为止，技术上全部走通实现。</p><blockquote><p>总结一下：zuul依据用户或IP等计算标签，并将标签放入header里向后传递，后续的微服务通过拦截器，将header里的标签放入RestTemplate请求的header里继续向后接力传递。标签的内容通过放入类似于ThreadLocal的全局变量（HystrixRequestVariableDefault），使Ribbon Rule可以使用。</p></blockquote><h3 id="基于标签路由的测试"><a href="#基于标签路由的测试" class="headerlink" title="基于标签路由的测试"></a>基于标签路由的测试</h3><p>参见PreFilter源码，模拟了几个用户的标签，参见LabelAndWeightMetadataRule源码，模拟了OR AND两种标签处理策略。依次开启 config eureka provide（开两个实例，通过启动参数server.port指定不同端口区分） consumer zuul.</p><p><img src="/images/sc-study/sc-r-d03.png" alt="测试"></p><hr><p><img src="/images/sc-study/sc-r-d01.png" alt="测试"><br>访问 <a href="http://localhost:8761/metadata.html" target="_blank" rel="noopener">http://localhost:8761/metadata.html</a> 设置第一个provide 实例 orLabel为 CN,Test 发送请求头带入Authorization: emt 访问<a href="http://localhost:8080/provider/user" target="_blank" rel="noopener">http://localhost:8080/provider/user</a> 多刷几次，可以看到zuul所有请求均路由给了第一个实例。访问<a href="http://localhost:8080/consumer/test" target="_blank" rel="noopener">http://localhost:8080/consumer/test</a> 多刷几次，可以看到，consumer调用均路由给了第一个实例。</p><p>设置第二个provide 实例 andLabel为 EN,Male 发送请求头带入Authorization: em 访问<a href="http://localhost:8080/provider/user" target="_blank" rel="noopener">http://localhost:8080/provider/user</a> 多刷几次，可以看到zuul所有请求均路由给了第二个实例。访问<a href="http://localhost:8080/consumer/test" target="_blank" rel="noopener">http://localhost:8080/consumer/test</a> 多刷几次，可以看到，consumer调用均路由给了第二个实例。</p><p>Authorization头还可以设置为PreFilter里面的模拟token来做测试，至此所有内容讲解完毕，技术路线拉通，剩下的就是根据需求来完善你自己的路由策略啦。</p><h2 id="伪代码分析实现流程"><a href="#伪代码分析实现流程" class="headerlink" title="伪代码分析实现流程"></a>伪代码分析实现流程</h2><h3 id="伪代码示例"><a href="#伪代码示例" class="headerlink" title="伪代码示例"></a>伪代码示例</h3><p>Ribbon默认采用ZoneAvoidanceRule，优先选择同zone下的实例。我们继承这个rule并扩展我们自己的限流功能，仔细阅读ZoneAvoidanceRule及其父类源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeightedMetadataRule</span> <span class="keyword">extends</span> <span class="title">ZoneAvoidanceRule</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String META_DATA_KEY_WEIGHT = <span class="string">"weight"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    List&lt;Server&gt; serverList = <span class="keyword">this</span>.getPredicate().getEligibleServers(<span class="keyword">this</span>.getLoadBalancer().getAllServers(), key);</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(serverList)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算总值并剔除0权重节点</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    Map&lt;Server, Integer&gt; serverWeightMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Server server : serverList) &#123;</span><br><span class="line">        String strWeight = ((DiscoveryEnabledServer) server).getInstanceInfo().getMetadata().get(META_DATA_KEY_WEIGHT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> weight = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            weight = Integer.parseInt(strWeight);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 无需处理</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (weight &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        serverWeightMap.put(server, weight);</span><br><span class="line">        sum += weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 权重随机</span></span><br><span class="line">    <span class="keyword">int</span> random = (<span class="keyword">int</span>) (Math.random() * sum);</span><br><span class="line">    <span class="keyword">int</span> current = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Server, Integer&gt; entry : serverWeightMap.entrySet()) &#123;</span><br><span class="line">        current += entry.getValue();</span><br><span class="line">        <span class="keyword">if</span> (random &lt; current) &#123;</span><br><span class="line">            <span class="keyword">return</span> entry.getKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使上述代码生效，在zuul网关中加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IRule <span class="title">weightedMetadataRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> WeightedMetadataRule();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码示例测试"><a href="#代码示例测试" class="headerlink" title="代码示例测试"></a>代码示例测试</h3><p>打断点测试是否进入WeightedMetadataRule，开启多个服务A实例，通过zuul访问服务A。<br>成功进入断点，代码生效后，我们再来看如何指定metadata。<br>访问eureka restful API （我的eureka服务器端口为8100，修改为你自己的eureka端口）<br>Get <a href="http://localhost:8100/eureka/apps" target="_blank" rel="noopener">http://localhost:8100/eureka/apps</a><br>这个api可以看到所有服务<br>Get <a href="http://localhost:8100/eureka/apps/YOUR_SERVICE_NAME" target="_blank" rel="noopener">http://localhost:8100/eureka/apps/YOUR_SERVICE_NAME</a><br>这个api可以看到你的服务信息，包括部署了哪些实例<br>Get <a href="http://localhost:8100/eureka/apps/YOUR_SERVICE_NAME/INSTANCE_ID" target="_blank" rel="noopener">http://localhost:8100/eureka/apps/YOUR_SERVICE_NAME/INSTANCE_ID</a><br>这个api可以看到服务实例的信息，注意其中的metadata节点，目前为empty<br>Put <a href="http://localhost:8100/eureka/apps/YOUR_SERVICE_NAME/INSTANCE_ID/metadata?weight=10" target="_blank" rel="noopener">http://localhost:8100/eureka/apps/YOUR_SERVICE_NAME/INSTANCE_ID/metadata?weight=10</a><br>通过put方式可以修改metadata的内容，放入weight，设为10</p><p>然后稍等两分钟，让zuul更新注册中心中的信息，接着重新访问，调试就可以看到metadata的内容了，并且也是按照权重随机来进行流量限制的，至此hello world搞定。</p><h3 id="生产上使用WeightedMetadataRule"><a href="#生产上使用WeightedMetadataRule" class="headerlink" title="生产上使用WeightedMetadataRule"></a>生产上使用WeightedMetadataRule</h3><p>接下来，在生产环境中，我们如何应用这个WeightedMetadataRule呢，有如下几种方式：</p><h3 id="手动指定服务策略，"><a href="#手动指定服务策略，" class="headerlink" title="手动指定服务策略，"></a>手动指定服务策略，</h3><p>spring cloud ribbon并没有完整实现netflix ribbon的所有配置功能，负载策略默认只能配置微服务级别，无法配置全局默认值。<br>例如：只能配置 SOME_SERVICE_ID.ribbon.NFLoadBalancerRuleClassName=package.WeightedMetadataRule<br>而不支持配置全局默认值 ribbon.NFLoadBalancerRuleClassName=package.WeightedMetadataRule<br>这种方案明显不符合我们的要求。</p><h3 id="通过声明Irule-spring-bean配置全局负载策略"><a href="#通过声明Irule-spring-bean配置全局负载策略" class="headerlink" title="通过声明Irule spring bean配置全局负载策略"></a>通过声明Irule spring bean配置全局负载策略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IRule <span class="title">weightedMetadataRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> WeightedMetadataRule();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种方式也就是我们上面用的hello world方式，配置后强制所有微服务使用该策略，没有例外，微服务无法个性化定制策略，符合目前需求，但不适于长期规划。</p></blockquote><h3 id="继承重写PropertiesFactory"><a href="#继承重写PropertiesFactory" class="headerlink" title="继承重写PropertiesFactory"></a>继承重写PropertiesFactory</h3><p>继承重写org.springframework.cloud.netflix.ribbon.PropertiesFactory类，修正spring cloud ribbon未能完全支持netflix ribbon的问题。但是PropertiesFactory属性均为私有，应该是spring cloud不建议在此扩展。参见<a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/1741" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-netflix/issues/1741</a></p><h3 id="使用spring-cloud官方建议的-RibbonClient方式"><a href="#使用spring-cloud官方建议的-RibbonClient方式" class="headerlink" title="使用spring cloud官方建议的@RibbonClient方式"></a>使用spring cloud官方建议的@RibbonClient方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RibbonClients</span>(defaultConfiguration = DefaultRibbonConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultRibbonConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;ribbon.client.name:#&#123;null&#125;&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> IClientConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PropertiesFactory propertiesFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">ribbonRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.propertiesFactory.isSet(IRule.class, name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.propertiesFactory.get(IRule.class, config, name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认配置</span></span><br><span class="line">        WeightedMetadataRule rule = <span class="keyword">new</span> WeightedMetadataRule();</span><br><span class="line">        rule.initWithNiwsConfig(config);</span><br><span class="line">        <span class="keyword">return</span> rule;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于权重随机的性能，上述代码用的数组分段查找法，还可以采用TreeMap二分查找法。可以将权重数组或权重TreeMap缓存起来。<br>根据测试，在实例数量为50个时 缓存权重数组和权重TreeMap，数组分段查找百万次耗时78-125ms，TreeMap二分耗时50-80ms。</p><p>这篇文章只是把技术打通，至于如何根据服务器负载情况，自动降级，限流等需求，只需要监控服务器状况，调用eureka接口设置metadata即可（其实我个人建议这方面需求通过docker的自动扩容缩容完成，只是有朋友问到如何通过spring cloud实现）。</p><p>下一篇会写基于标签的流量控制。如何控制部分用户使用服务A2.0，其他用户使用服务A1.0。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://calvin1978.blogcn.com/articles/routing.html" target="_blank" rel="noopener">江南白衣-服务化之－路由</a><br><a href="http://www.jianshu.com/p/37ee1e84900a" target="_blank" rel="noopener">SpringCloud Ribbon 降级、限流、灰度发布</a></p>]]></content>
      
      <categories>
          
          <category> 跟我学Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Ribbon </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>快速使用Spring Cloud Feign作为客户端调用服务提供者</title>
      <link href="/sc/sc-fegin01/"/>
      <url>/sc/sc-fegin01/</url>
      <content type="html"><![CDATA[<p><strong>前言</strong> 在使用Spring Cloud开发微服务应用时中，各个微服务服务提供者都是以HTTP接口的形式对外提供服务，因此服务消费者在调用服务提供者时，通过HTTP Client的方式访问。当然我们可以使用JDK原生的<code>URLConnection</code>、<code>Apache的Http Client</code>、<code>Netty的异步HTTP Client</code>, Spring的<code>RestTemplate</code>去实现服务间的调用。Spring Cloud对Fegin进行了增强，使Fegin支持了Spring MVC的注解，并整合了Ribbon和Eureka，从而让Fegin的使用更加方便。</p><h2 id="Feign简介"><a href="#Feign简介" class="headerlink" title="Feign简介"></a>Feign简介</h2><p>Feign是一种声明式、模板化的HTTP客户端。在<strong>Spring Cloud</strong>中使用Feign, 可以做到使用HTTP<strong>请求远程服务</strong>时能就像调用本地方法一样的体验，开发者完全感知不到这是远程方法，更感知不到这是个HTTP请求。<a href="https://github.com/openfeign/feign" target="_blank" rel="noopener">Feign的Github网址</a>,比如：<br>Feign具有如下特性：</p><ul><li>可插拔的注解支持，包括Feign注解和JAX-RS注解</li><li>支持可插拔的HTTP编码器和解码器</li><li>支持Hystrix和它的Fallback</li><li>支持Ribbon的负载均衡</li><li>支持HTTP请求和响应的压缩<a id="more"></a>Feign是一个声明式的<strong>Web Service</strong>客户端，它的目的就是让<strong>Web Service</strong>调用更加简单。它整合了<code>Ribbon</code>和<code>Hystrix</code>，从而不再需要显式地使用这两个组件。Feign还提供了HTTP请求的模板，通过编写简单的接口和注解，就可以定义好HTTP请求的参数、格式、地址等信息。接下来，Feign会完全代理HTTP的请求，我们只需要像调用方法一样调用它就可以完成服务请求。<h2 id="Feign-示例工程"><a href="#Feign-示例工程" class="headerlink" title="Feign 示例工程"></a>Feign 示例工程</h2></li></ul><p><img src="/images/sc-study/sc-feign-ml.png" alt="工程目录"><br>链接：<a href="https://github.com/SoftwareKing/spring-cloud-study/tree/master/sc-feign-first" target="_blank" rel="noopener">https://github.com/SoftwareKing/spring-cloud-study/tree/master/sc-feign-first</a></p><blockquote><p>本文最终修改时间：2017-05-20 18:47:23，为了解决<code>问题1和2</code>最终使用版本:Spring Boot的版本为<code>1.5.3.RELEASE</code>，Spring Cloud版本为<code>Dalston.RELEASE</code></p></blockquote><h3 id="服务消费者中sc-feign-first-consumer的Feign的定义"><a href="#服务消费者中sc-feign-first-consumer的Feign的定义" class="headerlink" title="服务消费者中sc-feign-first-consumer的Feign的定义"></a>服务消费者中sc-feign-first-consumer的Feign的定义</h3><p>为了让Feign知道在调用方法时应该向哪个地址发请求以及请求需要带哪些参数，我们需要定义一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.sc.feign.user.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.feign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.xujin.sc.feign.user.model.OrderModel;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"sc-feign-first-provider"</span>)<span class="comment">//【A】</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/sc/order/&#123;id&#125;"</span>, method = RequestMethod.GET)<span class="comment">//【B】</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderModel <span class="title">findOrderById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>; <span class="comment">//【C】</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>A: @FeignClient用于通知Feign组件对该接口进行代理(不需要编写接口实现)，使用者可直接通过@Autowired注入，如下代码所示。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 注入服务提供者,远程的Http服务</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserFeignService userFeignService;</span><br></pre></td></tr></table></figure><blockquote><p>B: @RequestMapping表示在调用该方法时需要向/sc/order/{id}发送GET请求。</p><p>C: @PathVariable与SpringMVC中对应注解含义相同</p></blockquote><h3 id="服务消费者中Feign的使用"><a href="#服务消费者中Feign的使用" class="headerlink" title="服务消费者中Feign的使用"></a>服务消费者中Feign的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.sc.feign.user.controller;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.xujin.sc.feign.user.model.OrderModel;</span><br><span class="line"><span class="keyword">import</span> org.xujin.sc.feign.user.service.UserFeignService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UserController.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注入服务提供者,远程的Http服务</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserFeignService userFeignService;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务消费者对位提供的服务</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/sc/user/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderModel <span class="title">findByIdByEurekaServer</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userFeignService.findOrderById(id);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如上代码所示，通过@Autowired将声明的Feign依赖注入即可，调用userFeignService.findOrderById(id)使用。开发者通过userFeignService.findOrderById()就能完成发送HTTP请求和解码HTTP返回结果并封装成对象的过程。</p></blockquote><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p>依次按顺序启动如下工程<br>注册中心: sc-fegin-first-server<br>服务提供者1:sc-fegin-first-provider01<br>服务提供者2:sc-fegin-first-provider02<br>以上工程能正常启动work，但是当启动服务消费者: sc-fegin-first-consumer报错如下。</p><blockquote><p>使用的示例工程的Spring Boot的版本为1.5.2.RELEASE，Spring Cloud版本为Dalston.RELEASE会出现以下错误。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入spring boot的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入spring cloud的依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:8010/sc/user/1" target="_blank" rel="noopener">http://localhost:8010/sc/user/1</a> ,出现以下错误即：<br><code>【问题一】</code>feign/Feign$Builder<br>Caused by: java.lang.NoClassDefFoundError: feign/Feign$Builder<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call &apos;refresh&apos; before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2d140a7: startup date [Sun May 14 22:44:43 CST 2017]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@4bf48f6</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:404) [spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.context.support.ApplicationListenerDetector.postProcessBeforeDestruction(ApplicationListenerDetector.java:97) ~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:253) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578) [spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554) [spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961) [spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523) [spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968) [spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1033) [spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:555) [spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]</span><br><span class="line">at org.xujin.sc.feign.user.UserConsumerApplication.main(UserConsumerApplication.java:15) [classes/:na]</span><br><span class="line"></span><br><span class="line">2017-05-14 22:44:44.079 ERROR 2372 --- [           main] o.s.boot.SpringApplication               : Application startup failed</span><br><span class="line"></span><br><span class="line">org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &apos;methodValidationPostProcessor&apos; defined in class path resource [org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.class]: Unsatisfied dependency expressed through method &apos;methodValidationPostProcessor&apos; parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;org.xujin.sc.feign.user.service.UserFeignService&apos;: Failed to introspect bean class [org.springframework.cloud.netflix.feign.FeignClientFactoryBean] for lookup method metadata: could not find class that it depends on; nested exception is java.lang.NoClassDefFoundError: feign/Feign$Builder</span><br><span class="line">at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:223) ~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:702) ~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:527) ~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]</span><br><span class="line">at org.xujin.sc.feign.user.UserConsumerApplication.main(UserConsumerApplication.java:15) [classes/:na]</span><br><span class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;org.xujin.sc.feign.user.service.UserFeignService&apos;: Failed to introspect bean class [org.springframework.cloud.netflix.feign.FeignClientFactoryBean] for lookup method metadata: could not find class that it depends on; nested exception is java.lang.NoClassDefFoundError: feign/Feign$Builder</span><br><span class="line">at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.determineCandidateConstructors(AutowiredAnnotationBeanPostProcessor.java:269) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineConstructorsFromBeanPostProcessors(AbstractAutowireCapableBeanFactory.java:1118) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1091) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck(AbstractAutowireCapableBeanFactory.java:923) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:804) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:558) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:432) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:395) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1260) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1101) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">... 19 common frames omitted</span><br><span class="line">Caused by: java.lang.NoClassDefFoundError: feign/Feign$Builder</span><br><span class="line">at java.lang.Class.getDeclaredMethods0(Native Method) ~[na:1.8.0_112]</span><br><span class="line">at java.lang.Class.privateGetDeclaredMethods(Class.java:2701) ~[na:1.8.0_112]</span><br><span class="line">at java.lang.Class.getDeclaredMethods(Class.java:1975) ~[na:1.8.0_112]</span><br><span class="line">at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:613) ~[spring-core-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:524) ~[spring-core-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:510) ~[spring-core-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.determineCandidateConstructors(AutowiredAnnotationBeanPostProcessor.java:247) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]</span><br><span class="line">... 32 common frames omitted</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: feign.Feign$Builder</span><br><span class="line">at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_112]</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_112]</span><br><span class="line">at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[na:1.8.0_112]</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_112]</span><br><span class="line">... 39 common frames omitted</span><br></pre></td></tr></table></figure></p><p><img src="/images/sc-study/sc-feign1.png" alt="sc-feign1"></p><hr><p>经查找解决问题2天查看无果(捂脸，后面写源码分析定位)，因此决定将Spring Boot的版本改变为1.4.3.RELEASE，Spring Cloud版本为Camden.SR5之后,按上面的顺序启动，之后测试<a href="http://localhost:8010/sc/user/1" target="_blank" rel="noopener">http://localhost:8010/sc/user/1</a> ,可以正常work。</p><h2 id="Fegin的work原理"><a href="#Fegin的work原理" class="headerlink" title="Fegin的work原理"></a>Fegin的work原理</h2><p>Spring Cloud应用在启动时，Feign会<code>扫描标有@FeignClient</code>注解的接口，<code>生成代理</code>，并注册到<code>Spring容器中</code>。生成代理时Feign会为<code>每个接口方法创建一个RequetTemplate对象</code>，该对象<code>封装了HTTP请求</code>需要的全部信息，请求参数名、请求方法等信息都是在这个过程中确定的，Feign的模板化就体现在这里。<br>在本例中，我们将Feign与Eureka和Ribbon组合使用，@FeignClient(name = “sc-feign-first-provider”)意为通知Feign在调用该接口方法时要向Eureka中查询名为ea的服务，从而得到服务URL。</p><h2 id="Fegin的常见应用"><a href="#Fegin的常见应用" class="headerlink" title="Fegin的常见应用"></a>Fegin的常见应用</h2><h3 id="Feign的Encoder、Decoder和ErrorDecoder"><a href="#Feign的Encoder、Decoder和ErrorDecoder" class="headerlink" title="Feign的Encoder、Decoder和ErrorDecoder"></a>Feign的Encoder、Decoder和ErrorDecoder</h3><p>Feign将方法签名中方法参数对象序列化为请求参数放到HTTP请求中的过程，是由编码器(Encoder)完成的。同理，将HTTP响应数据反序列化为java对象是由解码器(Decoder)完成的。</p><p>默认情况下，Feign会将标有@RequestParam注解的参数转换成字符串添加到URL中，将没有注解的参数通过Jackson转换成json放到请求体中。</p><blockquote><p>注意，如果在@RequetMapping中的method将请求方式指定为GET，那么所有未标注解的参数将会被忽略，例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/group/&#123;groupId&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(@PathVariable(<span class="string">"groupId"</span>)</span> Integer groupId, @<span class="title">RequestParam</span><span class="params">(<span class="string">"groupName"</span>)</span> String groupName, DataObject obj)</span>;</span><br></pre></td></tr></table></figure><p>此时因为声明的是GET请求没有请求体，所以obj参数就会被忽略。</p><ul><li>在Spring Cloud环境下，Feign的Encoder只会用来编码没有添加注解的参数。如果你自定义了Encoder, 那么只有在编码obj参数时才会调用你的Encoder。</li><li>对于Decoder, 默认会委托给SpringMVC中的MappingJackson2HttpMessageConverter类进行解码。只有当状态码不在200 ~ 300之间时ErrorDecoder才会被调用。</li><li>ErrorDecoder的作用是可以根据HTTP响应信息返回一个异常，该异常可以在调用Feign接口的地方被捕获到。<br>我们目前就通过ErrorDecoder来使Feign接口抛出业务异常以供调用者处理。</li></ul><h3 id="更换Feign默认使用的HTTP-Client"><a href="#更换Feign默认使用的HTTP-Client" class="headerlink" title="更换Feign默认使用的HTTP Client"></a>更换Feign默认使用的HTTP Client</h3><p>Feign在默认情况下使用的是JDK原生的<code>URLConnection</code>发送HTTP请求，没有连接池，但是对每个地址会保持一个长连接，即利用HTTP的persistence connection 。我们可以用Apache的<code>HTTP Client</code>替换Feign原始的http client, 从而获取<code>连接池、超时时间</code>等与性能息息相关的控制能力。Spring Cloud从Brixtion.SR5版本开始支持这种替换，首先在项目中声明Apache HTTP Client和feign-httpclient依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用Apache HttpClient替换Feign原生httpclient --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.feign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.17.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在<code>application.yml</code>中添加如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feign:</span><br><span class="line">  httpclient:</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure></p><p><a href="https://segmentfault.com/a/1190000009071952" target="_blank" rel="noopener">spring cloud feign使用okhttp3参考</a></p><h2 id="spring-cloud-feign常见问题"><a href="#spring-cloud-feign常见问题" class="headerlink" title="spring cloud feign常见问题"></a>spring cloud feign常见问题</h2><h3 id="参数不会自动传递"><a href="#参数不会自动传递" class="headerlink" title="参数不会自动传递"></a>参数不会自动传递</h3><p>服务消费者端调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name, @<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> <span class="keyword">int</span> age) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userFeignService.hello(name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>服务提供者Controller对外服务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name, @<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> <span class="keyword">int</span> age) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name + age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Fegin客户端定义调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name, @RequestParam(<span class="string">"age"</span>)</span> <span class="keyword">int</span> age)</span>;</span><br></pre></td></tr></table></figure></p><p>启动的时候sc-fegin-first-consumer工程不报错。但是当访问<a href="http://localhost:8010/test?name=xujin&amp;age=25" target="_blank" rel="noopener">http://localhost:8010/test?name=xujin&amp;age=25</a> ,报错如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feign.FeignException: status 405 reading UserFeignService#hello(String,int); content:</span><br><span class="line">&#123;&quot;timestamp&quot;:1494856464666,&quot;status&quot;:405,&quot;error&quot;:&quot;Method Not Allowed&quot;,&quot;exception&quot;:&quot;org.springframework.web.HttpRequestMethodNotSupportedException&quot;,&quot;message&quot;:&quot;Request method &apos;POST&apos; not supported&quot;,&quot;path&quot;:&quot;/hello&quot;&#125;</span><br><span class="line">at feign.FeignException.errorStatus(FeignException.java:62) ~[feign-core-9.3.1.jar:na]</span><br></pre></td></tr></table></figure></p><p>Fegin客户端定义修改如下OK，原因是name被自动放到request body。只要有body，就会被feign认为是post请求，所以整个hello是被当作带有request parameter和body的post请求发送出去了，因此出现上面的错误提示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name, @<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> <span class="keyword">int</span> age)</span>;</span><br></pre></td></tr></table></figure><h3 id="POST多参数调用"><a href="#POST多参数调用" class="headerlink" title="POST多参数调用"></a>POST多参数调用</h3><ul><li>POST多参数 Feign端定义：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/test/post"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderModel <span class="title">post</span><span class="params">(OrderModel orderModel)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/test/post"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderModel <span class="title">post</span><span class="params">(@RequestBody OrderModel orderModel)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>以上两种定义方式等价</p></blockquote><ul><li>服务提供者的定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/test/post"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderModel <span class="title">testPost</span><span class="params">(@RequestBody OrderModel orderModel)</span> </span>&#123;</span><br><span class="line">orderModel.setOrderNo(<span class="number">2222222L</span>);</span><br><span class="line"><span class="keyword">return</span> orderModel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>修改订单号返回证明，服务提供者接到从Feign POST请求过来的数据。</p></blockquote><ul><li>服务消费者端的使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/test/post"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderModel <span class="title">testPost</span><span class="params">(@RequestBody OrderModel orderModel)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userFeignService.post(orderModel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试<br>当修改了Feign默认的http Client之后，出现如下错误，具体出错原因还在排查之中，本文会随时更改。<br><code>【问题二】</code>更换了Feign默认的Client出现HystrixRuntimeException<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="number">1494947172990</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Internal Server Error"</span>,</span><br><span class="line">    <span class="attr">"exception"</span>: <span class="string">"com.netflix.hystrix.exception.HystrixRuntimeException"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"UserFeignService#post(OrderModel) failed and no fallback available."</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/test/post"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">java.lang.IllegalArgumentException: MIME type may not contain reserved characters</span><br><span class="line">at org.apache.http.util.Args.check(Args.java:36) ~[httpcore-4.4.5.jar:4.4.5]</span><br><span class="line">at org.apache.http.entity.ContentType.create(ContentType.java:182) ~[httpcore-4.4.5.jar:4.4.5]</span><br><span class="line">at feign.httpclient.ApacheHttpClient.getContentType(ApacheHttpClient.java:159) ~[feign-httpclient-8.17.0.jar:8.17.0]</span><br><span class="line">at feign.httpclient.ApacheHttpClient.toHttpUriRequest(ApacheHttpClient.java:140) ~[feign-httpclient-8.17.0.jar:8.17.0]</span><br><span class="line">at feign.httpclient.ApacheHttpClient.execute(ApacheHttpClient.java:83) ~[feign-httpclient-8.17.0.jar:8.17.0]</span><br></pre></td></tr></table></figure><p> 当关闭之后，访问正常如下所示，醉了同样的代码(PS:捂脸)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  httpclient:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"createTime"</span>:<span class="number">1494944311023</span>,<span class="attr">"orderNo"</span>:<span class="number">33333</span>,<span class="attr">"payTime"</span>:<span class="number">1494944311023</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/sc-study/sc-feign-post.png" alt="sc-feign-post.png"></p><h3 id="GET多参数调用"><a href="#GET多参数调用" class="headerlink" title="GET多参数调用"></a>GET多参数调用</h3><p>当服务之间GET调用为多参数时，可以使用Map来构建参数传递<br>Feign接口中的示例定义<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/test/get"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testGet</span><span class="params">(@RequestParam Map&lt;String, Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure></p><p>服务消费者的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test/get"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">HashMap&lt;String, Object&gt; map = Maps.newHashMap();</span><br><span class="line">map.put(<span class="string">"orderNo"</span>, <span class="string">"1"</span>);</span><br><span class="line">map.put(<span class="string">"createTime"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">map.put(<span class="string">"payTime"</span>, <span class="keyword">new</span> Date());</span><br><span class="line"><span class="keyword">return</span> userFeignService.testGet(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>个人看来，如果是GET的多参数通过Map进行传递，当参数比较多时，个人建议使用面向对象的思维，通过POST的方式传递对象相对较好。</p></blockquote><p>服务提供者的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/test/get"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testGet</span><span class="params">(@RequestParam Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> String.valueOf(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问URL:<a href="http://localhost:8010/test/get" target="_blank" rel="noopener">http://localhost:8010/test/get</a> ,测试OK.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;orderNo=1, createTime=Sat May 20 19:47:38 CST 2017, payTime=Sat May 20 19:47:38 CST 2017&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> 本文主要介绍了Feign的基本的定义，以及Feign的work原理和使用Feign的注意事项和常见问题。最后介绍了一下更换Feign默认使用的HTTP Client。主要是遇到一个奇葩的问题，最终没解决更换版本。在下一篇文章中将介绍Feign的其它的使用，例如Feign的继承，日志级别，以及Feign源码分析等</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/1253" target="_blank" rel="noopener">希望Feign能够支持参数请求使用POJO的Issue</a><br><a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/659" target="_blank" rel="noopener">建议使用Feign原生的注解的Issue</a><br><a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/1360" target="_blank" rel="noopener">建议增强Feign的功能</a><br><a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/1047" target="_blank" rel="noopener">建议支持可选的Request Body（目前Feign当POST一个null时，会报异常）</a></p>]]></content>
      
      <categories>
          
          <category> 跟我学Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Fegin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java8编译器的新特性-参数名字保留在字节码中</title>
      <link href="/ex/jdk8-parameters/"/>
      <url>/ex/jdk8-parameters/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:很长一段时间里，Java程序员一直在发明不同的方式使得方法参数的名字能保留在Java字节码中，并且能够在运行时获取它们（比如，Paranamer类库）。最终，在Java 8中把这个强烈要求的功能添加到语言层面（通过反射API与Parameter.getName()方法）与字节码文件（通过新版的javac的–parameters选项）中。由于<code>中间件</code>框架使用jdk8的新特性check参数顺序和签名，因此在使用RPC框架中，RPC服务端接口定义编译后的Class文件中加入了参数,但是在webApp中使用RPC Client在Eclipse等IDE中开发调试，由于生成<code>class</code>的时候<code>Ide不会自动参数带进去</code>。因此需要对IDE进行设置。</p><h2 id="Java编译器的新特性"><a href="#Java编译器的新特性" class="headerlink" title="Java编译器的新特性"></a>Java编译器的新特性</h2><h3 id="参数名字"><a href="#参数名字" class="headerlink" title="参数名字"></a>参数名字</h3><p>很长一段时间里，Java程序员一直在发明不同的方式使得方法参数的名字能保留在Java字节码中，并且能够在运行时获取它们（比如，Paranamer类库）。最终，在Java 8中把这个强烈要求的功能添加到语言层面（通过反射API与Parameter.getName()方法）与字节码文件（通过新版的javac的–parameters选项）中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.jdk.parameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterNames</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Method method = ParameterNames.class.getMethod(<span class="string">"main"</span>, String[].class);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> Parameter parameter : method.getParameters()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Parameter: "</span> + parameter.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>如果不使用–parameters参数来编译这个类，然后运行这个类，会得到下面的输出：<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parameter: arg0</span><br></pre></td></tr></table></figure></p><p>如果使用–parameters参数来编译这个类，程序的结构会有所不同（参数的真实名字将会显示出来）：<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parameter: args</span><br></pre></td></tr></table></figure></p><h2 id="Maven和Gradle使用方式"><a href="#Maven和Gradle使用方式" class="headerlink" title="Maven和Gradle使用方式"></a>Maven和Gradle使用方式</h2><h3 id="Maven使用介绍"><a href="#Maven使用介绍" class="headerlink" title="Maven使用介绍"></a>Maven使用介绍</h3><p>对于有经验的Maven用户，通过maven-compiler-plugin的配置可以将-parameters参数添加到编译器中去。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">compilerArgument</span>&gt;</span>-parameters<span class="tag">&lt;/<span class="name">compilerArgument</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>针对Java 8最新发布的Eclipse Kepler SR2（请检查这里的下载说明）提供了非常实用的配置选项，可以通过下图的配置方式来控制编译器行为</p><h3 id="Gradle使用介绍"><a href="#Gradle使用介绍" class="headerlink" title="Gradle使用介绍"></a>Gradle使用介绍</h3><p>在build.gradle中配置如下即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">compileJava &#123;</span><br><span class="line">    sourceCompatibility = 1.8</span><br><span class="line">    targetCompatibility = 1.8</span><br><span class="line">    options.compilerArgs &lt;&lt; &apos;-parameters&apos;</span><br><span class="line">    options.fork = true</span><br><span class="line">    options.forkOptions.executable = &apos;javac&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="在IDE中的配置"><a href="#在IDE中的配置" class="headerlink" title="在IDE中的配置"></a>在IDE中的配置</h2><p> 有一种情况需要IDE编辑器在编译的时候，需要靠IDE自动的把参数等信息加到class文件中。</p><h3 id="Eclipse中的配置"><a href="#Eclipse中的配置" class="headerlink" title="Eclipse中的配置"></a>Eclipse中的配置</h3><p> 使用Eclipse进行本地调试时，需进行如下配置：<br>  Preferences -&gt; Java -&gt; Compiler<br>    JDK Compiliance -&gt; “Compiler compliance level”设置为1.8<br>    Classfile Generation -&gt; “Store information about method parameters (usable via reflection)”设置为勾选<br>    <img src="/images/project/sts-jdk-para.png" alt="STS配置图"></p><h3 id="在IdeA中的配置"><a href="#在IdeA中的配置" class="headerlink" title="在IdeA中的配置"></a>在IdeA中的配置</h3><p> 使用IDEA进行本地调试时，需进行如下配置：<br> Preferences -&gt; “Build, Execution, Deployment” -&gt; Compiler -&gt; “Java Compiler”<br>  “Project bytecode version”设置为1.8<br>  “Additional command line parameters”添加”-parameters”</p>]]></content>
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 项目经验 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Elastic Search java客户端封装使用</title>
      <link href="/ex/es-client/"/>
      <url>/ex/es-client/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:ES所提供的Http服务适合用作集群状态和数据的监控，而不适合直接用于数据操作。ES提供了多种语言（包括Java、Python、PHP、Ruby等）版本的Client API，可以使用这些Client API编程实现数据操作功能。在这里主要介绍使用Java版本的Client来操作数据。ES中所有的Java API调用都要使用Client对象，ES为API调用者提供了两类Client对象：NodeClient和TransportClient。TransportClient适合用于生产环境中，本文主要介绍TransportClient。</p><h2 id="使用TransportClient连接ES"><a href="#使用TransportClient连接ES" class="headerlink" title="使用TransportClient连接ES"></a>使用TransportClient连接ES</h2><p>使用elastic search Client 为5.2.2版本，引入如下依赖。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Tips: 建议API的版本与ES集群所使用的版本保持一致，以免出现因版本不一致而导致的冲突。由于org.elasticsearch.client依赖Log4j，因此还需要配置如下依赖</p></blockquote><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Tips</code>  <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.2/_maven_repository.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.2/_maven_repository.html</a></p><h2 id="封装ES-Client工具类"><a href="#封装ES-Client工具类" class="headerlink" title="封装ES Client工具类"></a>封装ES Client工具类</h2><p>1.在实际使用中，我们会把ES的相关配置信息，抽取到elasticsearch.yaml中</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">9300</span></span><br><span class="line"><span class="comment">#address: "192.168.67.200,192.168.67.149,192.168.67.215,192.168.67.156,192.168.67.178,192.168.67.240,192.168.67.153,192.168.67.90,192.168.67.228,192.168.67.125"</span></span><br><span class="line"><span class="attr">address:</span> <span class="string">"192.168.113.250"</span></span><br><span class="line"><span class="attr">cluster:</span> <span class="string">"elasticsearch"</span></span><br><span class="line"><span class="attr">index:</span> <span class="string">"mt-apm-*"</span></span><br></pre></td></tr></table></figure><ol><li>根据Java SDK的写法，需要做写如下硬编码操作的Code。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">String deviceId = <span class="string">"23566d22-6a30-30a9-a874-e1bf75ab688b"</span>;</span><br><span class="line">        Settings settings =Settings.builder().put(<span class="string">"cluster.name"</span>,<span class="string">"vpc-ops-elk-elastic-cluster"</span>).build();</span><br><span class="line">        Client client = <span class="keyword">new</span> PreBuiltTransportClient(settings)</span><br><span class="line">                .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"192.168.67.200"</span>), <span class="number">9300</span>))</span><br><span class="line">                .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"192.168.67.149"</span>), <span class="number">9300</span>))</span><br><span class="line">                .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"192.168.67.215"</span>), <span class="number">9300</span>))</span><br><span class="line">                .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"192.168.67.156"</span>), <span class="number">9300</span>))</span><br><span class="line">                .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"192.168.67.178"</span>), <span class="number">9300</span>))</span><br><span class="line">                .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"192.168.67.240"</span>), <span class="number">9300</span>))</span><br><span class="line">                .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"192.168.67.153"</span>), <span class="number">9300</span>))</span><br><span class="line">                .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"192.168.67.90"</span>), <span class="number">9300</span>))</span><br><span class="line">                .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"192.168.67.228"</span>), <span class="number">9300</span>))</span><br><span class="line">                .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"192.168.67.125"</span>), <span class="number">9300</span>));</span><br><span class="line">     QueryBuilder qb = matchQuery(</span><br><span class="line">                <span class="string">"@message.deviceInfo.deviceId"</span>,</span><br><span class="line">                deviceId</span><br><span class="line">     );</span><br><span class="line">     SearchResponse response = client.prepareSearch(<span class="string">"mt-apm-*"</span>)</span><br><span class="line">                .setQuery(qb)</span><br><span class="line">                .execute()</span><br><span class="line">                .actionGet();</span><br><span class="line">    System.out.println(response);</span><br><span class="line">   client.close();</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>上述写法存在很多硬编码，无法做到配置和程序代码分离，因此需要设计一个ES工具类用于生成调用Client,下面ESClientHelper工具类如下。</p></blockquote><h2 id="设计ESClientHelper"><a href="#设计ESClientHelper" class="headerlink" title="设计ESClientHelper"></a>设计ESClientHelper</h2><h3 id="ESClientHelper-java"><a href="#ESClientHelper-java" class="headerlink" title="ESClientHelper.java"></a>ESClientHelper.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * ESClientHelper 按照Elasticsearch API，在Java端使用是ES服务需要创建Java</span></span><br><span class="line"><span class="comment"> * Client，但是每一次连接都实例化一个client，对系统的消耗很大， 即使在使用完毕之后将client</span></span><br><span class="line"><span class="comment"> * close掉，由于服务器不能及时回收socket资源，极端情况下会导致服务器达到最大连接数。为了解决上述问题并提高client利用率，可以参考使用池化技术复用client。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESClientHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(ESClientHelper.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ESClientHelper instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Settings setting;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Client&gt; clientMap = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Client&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HostName与Port</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; ips = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String clusterName = Configs.ES_CONFIG.getCluster();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> ESClientHelper <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> ESClientHelper();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ESClientHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化默认的client</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String address = Configs.ES_CONFIG.getAddress();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(address)) &#123;</span><br><span class="line">            StringTokenizer stokenizer = <span class="keyword">new</span> StringTokenizer(address, <span class="string">","</span>);</span><br><span class="line">            <span class="keyword">while</span> (stokenizer.hasMoreTokens()) &#123;</span><br><span class="line">                String ip = stokenizer.nextToken();</span><br><span class="line">                ips.put(ip, Configs.ES_CONFIG.getPort());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        setting = Settings.builder().put(<span class="string">"cluster.name"</span>, Configs.ES_CONFIG.getCluster()).build();</span><br><span class="line">        addClient(setting, getAllAddress(ips));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得所有的地址端口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;InetSocketTransportAddress&gt; <span class="title">getAllAddress</span><span class="params">(Map&lt;String, Integer&gt; ips)</span> </span>&#123;</span><br><span class="line">        List&lt;InetSocketTransportAddress&gt; addressList = <span class="keyword">new</span> ArrayList&lt;InetSocketTransportAddress&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String ip : ips.keySet()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                addressList.add(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(ip), ips.get(ip)));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">                logger.error(<span class="string">" add InetSocketTransportAddress exception:[&#123;&#125;],ip:[&#123;&#125;]"</span>, e.getMessage(), ip);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> addressList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Client <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClient(clusterName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Client <span class="title">getClient</span><span class="params">(String clusterName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clientMap.get(clusterName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addClient</span><span class="params">(Settings setting, List&lt;InetSocketTransportAddress&gt; transportAddress)</span> </span>&#123;</span><br><span class="line">        Client client = <span class="keyword">new</span> PreBuiltTransportClient(setting).addTransportAddresses(</span><br><span class="line">                transportAddress.toArray(<span class="keyword">new</span> InetSocketTransportAddress[transportAddress.size()]));</span><br><span class="line">        clientMap.put(setting.get(<span class="string">"cluster.name"</span>), client);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相对于 java API 2.4.4 版本来说，升级依赖之后，需要做如下改动。将下面的代码修改上述中的代码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Client client = TransportClient.builder().settings(setting).build().addTransportAddresses(</span><br><span class="line">                transportAddress.toArray(<span class="keyword">new</span> InetSocketTransportAddress[transportAddress.size()]));</span><br></pre></td></tr></table></figure></p><h3 id="使用ESClientHelper"><a href="#使用ESClientHelper" class="headerlink" title="使用ESClientHelper"></a>使用ESClientHelper</h3><p>使用ESClientHelper.getInstance()获取ESClient<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Client client = ESClientHelper.getInstance().getClient(Configs.ES_CONFIG.getCluster());</span><br></pre></td></tr></table></figure></p><p>1.匹配查询<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Client client = ESClientHelper.getInstance().getClient(Configs.ES_CONFIG.getCluster());</span><br><span class="line">        String index = Configs.ES_CONFIG.getIndex();</span><br><span class="line">        QueryBuilder qb = matchQuery(<span class="string">"@message.deviceInfo.deviceId"</span>, deviceId);</span><br><span class="line">        SearchResponse response = client</span><br><span class="line">                .prepareSearch(index).setQuery(qb)</span><br><span class="line">                .setPostFilter(</span><br><span class="line">                        QueryBuilders.rangeQuery(<span class="string">"@message.apmLog.network.time.beginTime"</span>)</span><br><span class="line">                                .gte(DateUtils.StringToDate(beginTime)).lte(DateUtils.StringToDate(endTime)))</span><br><span class="line">                .execute().actionGet();</span><br></pre></td></tr></table></figure></p><p>2.根据时间段聚合查询<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> AppReqHistoryInfo <span class="title">getAppReqHistoryInfoByDeviceIdAndTime</span><span class="params">(String deviceId, <span class="keyword">int</span> hourNum)</span></span></span><br><span class="line"><span class="function">           <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">       String day = <span class="string">"now-"</span> + String.valueOf(hourNum) + <span class="string">"h"</span>;</span><br><span class="line">       String index = Configs.ES_CONFIG.getIndex();</span><br><span class="line">       Client client = ESClientHelper.getInstance().getClient(Configs.ES_CONFIG.getCluster());</span><br><span class="line">       QueryBuilder qb = matchQuery(<span class="string">"@message.deviceInfo.deviceId"</span>, deviceId);</span><br><span class="line">       MultiSearchRequestBuilder req = client.prepareMultiSearch().add(client.prepareSearch(index)</span><br><span class="line">               .setPostFilter(boolQuery().must(qb).must(QueryBuilders.rangeQuery(<span class="string">"@timestamp"</span>).gt(day).lt(<span class="string">"now"</span>)))</span><br><span class="line">               .addAggregation(AggregationBuilders.sum(<span class="string">"REQ_SUM"</span>).field(<span class="string">"@message.apmLog.network.reqLength"</span>))</span><br><span class="line">               .addAggregation(AggregationBuilders.sum(<span class="string">"RSP_SUM"</span>).field(<span class="string">"@message.apmLog.network.complete.respLength"</span>))</span><br><span class="line">               .setSize(<span class="number">0</span>))</span><br><span class="line">               .add(client.prepareSearch(index)</span><br><span class="line">                       .setPostFilter(</span><br><span class="line">                               boolQuery().must(qb).must(QueryBuilders.rangeQuery(<span class="string">"@timestamp"</span>).gt(day).lt(<span class="string">"now"</span>))</span><br><span class="line">                                       .must(QueryBuilders.rangeQuery(<span class="string">"@message.apmLog.network.complete.statusCode"</span>)</span><br><span class="line">                                               .gt(<span class="number">399</span>).lt(<span class="number">999</span>)))</span><br><span class="line">                       .setSize(<span class="number">0</span>))</span><br><span class="line">               .add(client.prepareSearch(index).setPostFilter(</span><br><span class="line">                       boolQuery().must(qb).must(QueryBuilders.rangeQuery(<span class="string">"@timestamp"</span>).gt(day).lt(<span class="string">"now"</span>))</span><br><span class="line">                               .must(QueryBuilders.existsQuery(<span class="string">"@message.apmLog.network.netError.errorDomain"</span>)))</span><br><span class="line">                       .setSize(<span class="number">0</span>));</span><br><span class="line">       AppReqHistoryInfo appReqHisInfo = <span class="keyword">new</span> AppReqHistoryInfo();</span><br><span class="line">       MultiSearchResponse rsp;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           rsp = req.execute().get();</span><br><span class="line">           MultiSearchResponse.Item[] items = rsp.getResponses();</span><br><span class="line">           MultiSearchResponse.Item totalItem = items[<span class="number">0</span>];</span><br><span class="line">           <span class="keyword">long</span> total = totalItem.getResponse().getHits().getTotalHits();</span><br><span class="line">           appReqHisInfo.setRequestNum(total);</span><br><span class="line">           Double REQ_SUM = (Double) (totalItem.getResponse().getAggregations().get(<span class="string">"REQ_SUM"</span>).getProperty(<span class="string">"value"</span>));</span><br><span class="line">           Double RSP_SUM = (Double) (totalItem.getResponse().getAggregations().get(<span class="string">"RSP_SUM"</span>).getProperty(<span class="string">"value"</span>));</span><br><span class="line">           Double totalFlow = REQ_SUM + RSP_SUM;</span><br><span class="line">           appReqHisInfo.setTotalFlow(totalFlow.longValue());</span><br><span class="line">           MultiSearchResponse.Item statusCodeItem = items[<span class="number">1</span>];</span><br><span class="line">           appReqHisInfo.setHttpError(statusCodeItem.getResponse().getHits().getTotalHits());</span><br><span class="line">           MultiSearchResponse.Item errorDomainItem = items[<span class="number">2</span>];</span><br><span class="line">           appReqHisInfo.setNetError(errorDomainItem.getResponse().getHits().getTotalHits());</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">           logger.info(<span class="string">"getAppReqHistoryInfoByDeviceIdAndTime exception:[&#123;&#125;]"</span>, e.getMessage());</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(<span class="string">"500"</span>, <span class="string">"getAppVisitTraceInfo exception"</span>, e.getCause());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> appReqHisInfo;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 项目经验 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SC中Eureka Server的HA和安全身份验证</title>
      <link href="/sc/sc-eureka-02/"/>
      <url>/sc/sc-eureka-02/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:在《跟我学Spring Cloud》中的上一篇文章中简单介绍了使用Eureka实现服务的注册与发现。在这篇文章中主要介绍一下Eureka Server注册中心的HA以及Eureka Server的身份验证。<br><a id="more"></a></p><h2 id="什么是高可用"><a href="#什么是高可用" class="headerlink" title="什么是高可用"></a>什么是高可用</h2><h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><p>   High Availability，即高可用HA。在分布式情况下，我们经常说<code>4个9</code>(99.99%)或者<code>5个9</code>(99.999%)。举个简单例子，如果一个微服务分布式系统依赖于30个微服务，每个微服务可用性是99.99%，那么整个微服务系统的可用性就是99.99%的30次方 ≈ 99.7% ，也就是说有0.3%系统是不可用的，0.3%意味着如果<code>Qps很高</code>，有一亿次请求的话，那么就会有<code>30万</code>次失败。换算成时间<code>大约每月有2个小时服务不稳定</code>。特别是随着服务依赖数量的变多，微服务不稳定的概率会成指数性上升。因此要保证微服务应用的HA需要从各方面入手，下面会介绍一下如何实现Eureka Server的HA。参考工程如下所示。 </p><blockquote><p><code>Tips</code>：代码示例:<a href="https://github.com/SoftwareKing/spring-cloud-study/tree/master/sc-eureka-ha" target="_blank" rel="noopener">https://github.com/SoftwareKing/spring-cloud-study/tree/master/sc-eureka-ha</a></p></blockquote><p><img src="/images/sc-study/sc-eureka-ha-01.png" alt="参考工程"></p><h2 id="Eureka-Server的HA"><a href="#Eureka-Server的HA" class="headerlink" title="Eureka Server的HA"></a>Eureka Server的HA</h2><h3 id="Eureka-Server的HA-1"><a href="#Eureka-Server的HA-1" class="headerlink" title="Eureka Server的HA"></a>Eureka Server的HA</h3><h4 id="两个工程演示HA"><a href="#两个工程演示HA" class="headerlink" title="两个工程演示HA"></a>两个工程演示HA</h4><p> 如示例工程所示，我新建了两个Project分别为sc-eureka-ha-server1，sc-eureka-ha-server2， 我们知道在Eureka Server的Standalone模式下面，由于只有一个Eureka Server，所以我们通过配置如下信息关闭Eureka Server的自我注册和抓取注册信息，但是两个Eureka Server之间需要设置为True，相互注册相互感知对方注册信息的变化，从而实现信息同步。<br> 1.sc-eureka-ha-server1的application.yml配置Info 如下：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">sc-eureka-ha-server1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span>                    <span class="comment"># 指定该Eureka实例的端口</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8762/eureka/</span></span><br></pre></td></tr></table></figure><p> 2.sc-eureka-ha-server2的application.yml配置Info 如下</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">sc-eureka-ha-server2</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8762</span>                    <span class="comment"># 指定该Eureka实例的端口</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><p> 3.主程序入口代码没什么区别如下:<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 4.分别启动sc-eureka-ha-server1和sc-eureka-ha-server2，访问<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a> ,<a href="http://localhost:8762/" target="_blank" rel="noopener">http://localhost:8762/</a> ，如下:<br><img src="/images/sc-study/sc-e-ha-02.png" alt="启动Eureka Server01"></p><p><img src="/images/sc-study/sc-e-ha-03.png" alt="启动Eureka Server02"></p><p> 5.服务提供者sc-eureka-ha-provider其它代码见工程,application.yml如下所示。<br> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr"> server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8000</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">sc-eureka-ha-provider</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure></p><blockquote><p><code>tips:</code> 把服务提供者的服务注册信息，注册到Eureka Server 01上。</p></blockquote><p>启动服务提供者，见如下图所示。<br> <img src="/images/sc-study/sc-e-ha-04.png" alt="服务提供者注册Eureka Server01"><br>片刻服务提供者的信息也同步到Eureka Server02上面<br> <img src="/images/sc-study/sc-e-ha-05.png" alt="服务提供者信息同步到Eureka Server02"></p><h4 id="Jar方式演示HA"><a href="#Jar方式演示HA" class="headerlink" title="Jar方式演示HA"></a>Jar方式演示HA</h4><p> Eureka Server的HA，其实可以通过<code>jar的方式</code>指定使用不同的<code>profile配置</code>的方式，在本地运行两个<code>Eureka Server</code>。只需将Eureka server的application.yml修改如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">sc-eureka-ha-server</span>  </span><br><span class="line"><span class="bullet">-</span><span class="bullet">--</span> </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">   profiles:</span> <span class="string">peer1</span>                                 </span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">   port:</span> <span class="number">8761</span> </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">   instance:</span></span><br><span class="line"><span class="attr">      hostname:</span> <span class="string">peer1.xujin.org</span>  </span><br><span class="line"><span class="attr">   client:</span>                                    </span><br><span class="line"><span class="attr">      serviceUrl:</span></span><br><span class="line"><span class="attr">         defaultZone:</span> <span class="attr">http://peer2.xujin.org:8762/eureka/</span> </span><br><span class="line"><span class="bullet">-</span><span class="bullet">--</span> </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr"> profiles:</span> <span class="string">peer2</span> </span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">   port:</span> <span class="number">8762</span> </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">   instance:</span></span><br><span class="line"><span class="attr">      hostname:</span> <span class="string">peer2.xujin.org</span></span><br><span class="line"><span class="attr">   client:</span></span><br><span class="line"><span class="attr">     serviceUrl:</span></span><br><span class="line"><span class="attr">        defaultZone:</span> <span class="attr">http://peer1.xujin.org:8761/eureka/</span></span><br></pre></td></tr></table></figure></p><p>通过配置switcHosts或者自行配置HostName对应的IP地址,把工程打成jar之后，运行如下命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> java -jar sc-eureka-ha-server1-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer2</span><br><span class="line"></span><br><span class="line">java -jar sc-eureka-ha-server1-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer1</span><br></pre></td></tr></table></figure></p><p>测试如下:<br><img src="/images/sc-study/sc-e-ha-06.png" alt="访问Eureka Server HA验证"><br><img src="/images/sc-study/sc-e-ha-07.png" alt="访问Eureka Server HA验证"></p><h2 id="安全身份验证"><a href="#安全身份验证" class="headerlink" title="安全身份验证"></a>安全身份验证</h2><p>   如果客户端的eureka.client.serviceUrl.defaultZone参数值(即Eureka Server的地址)中包含HTTP Basic Authentication信息，如<a href="http://user:password@localhost:8761/eureka" target="_blank" rel="noopener">http://user:password@localhost:8761/eureka</a>，那么客户端就会自动使用该用户名、密码信息与Eureka服务端进行验证。如果你需要更复杂的验证逻辑，你必须注册一个DiscoveryClientOptionalArgs组件，并将ClientFilter组件注入，在这里定义的逻辑会在每次客户端向服务端发起请求时执行。</p><blockquote><p><code>Tips</code>：代码示例:<a href="https://github.com/SoftwareKing/spring-cloud-study/tree/master/sc-eureka-security" target="_blank" rel="noopener">https://github.com/SoftwareKing/spring-cloud-study/tree/master/sc-eureka-security</a></p></blockquote><h3 id="访问Eureka-Server安全身份验证"><a href="#访问Eureka-Server安全身份验证" class="headerlink" title="访问Eureka Server安全身份验证"></a>访问Eureka Server安全身份验证</h3><ol><li><p>如工程sc-eureka-securit中的sc-eureka-security-server工程所示，在pom.xml中增加依赖如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.yml如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span>                    <span class="comment"># 指定该Eureka实例的端口</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册到Eureka Server上，默认为true，当前应用为Eureka Server所以无需注册</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">false</span>  </span><br><span class="line">    <span class="comment">#表示是否从Eureka Server获取注册信息，默认为true。因为这是一个单点的Eureka Server，不需要同步其他的Eureka Server节点的数据，故而设为false。 </span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#Eureka Server的访问地址，服务注册和client获取服务注册信息均通过该URL，多个服务注册地址用,隔开</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">  basic:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  user:</span></span><br><span class="line"><span class="attr">     name:</span> <span class="string">xujin</span></span><br><span class="line"><span class="attr">     password:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><p>3.启动Eureka server测试，如下图所示<br><img src="/images/sc-study/sc-e-s-01.png" alt="访问Eureka Server安全验证"></p><h3 id="服务提供者注册Eureka-Server安全身份验证"><a href="#服务提供者注册Eureka-Server安全身份验证" class="headerlink" title="服务提供者注册Eureka Server安全身份验证"></a>服务提供者注册Eureka Server安全身份验证</h3><p>1.服务提供者只需注册时修改application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr"> server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8000</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">sc-eureka-security-provider</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://xujin:123@localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><blockquote><p>Tips:如上所示:<a href="http://用户名:密码@localhost:8761/eureka/" target="_blank" rel="noopener">http://用户名:密码@localhost:8761/eureka/</a></p></blockquote></li></ol>]]></content>
      
      <categories>
          
          <category> 跟我学Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Eureka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Spring Cloud Eureka实现服务注册与发现</title>
      <link href="/sc/sc-eureka-01/"/>
      <url>/sc/sc-eureka-01/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:由于目前，<code>网上的Spring Cloud的学习的案列</code>，比较<code>凌乱</code>而且<code>没有形成整个体系</code>，因此特开一个专题为<code>跟我学Spring Cloud</code>，希望帮助到<code>有需要的人</code>。本文主要介绍如何使用<code>Spring Cloud中的Eureka组件</code>快速实现<code>微服务的服务注册与发现</code>。至于安全模式和Eureka Server的HA,后面的文章会详细介绍。如果您觉得，有想了解的内容，参与评论留言。<br><a id="more"></a></p><h2 id="什么是服务注册与发现"><a href="#什么是服务注册与发现" class="headerlink" title="什么是服务注册与发现"></a>什么是服务注册与发现</h2><h3 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h3><p>   在服务化的早期，服务不是很多，服务的注册与发现并不是什么新鲜的名词，Nginx+内部域名服务器方式，甚至Nginx+host文件配置方式也能完成服务的注册与发现。服务上下线需要在nginx,服务器做相应的配置，一旦服务的IP端口发生变化，都需要在nginx上做相应的配置，为了解决这个问题引入服务注册中心。<br>   服务注册,即服务在启动的时候就将服务的IP,端口,版本号等EndPoint注册到注册中心(Eueka,Zookeeper,Consul)对服务进行统一管理.<br>   服务发现,简单的就是说，不管服务上下线，当对某个服务发起请求时，能够快速的从本地缓存或者注册中心的注册列表中，快速找到服务提供者。</p><h2 id="服务化早期的做法"><a href="#服务化早期的做法" class="headerlink" title="服务化早期的做法"></a>服务化早期的做法</h2><h3 id="示例工程说明"><a href="#示例工程说明" class="headerlink" title="示例工程说明"></a>示例工程说明</h3><blockquote><p><code>Tips</code>：代码示例:<a href="https://github.com/SoftwareKing/spring-cloud-study/tree/master/sc-eureka-first" target="_blank" rel="noopener">https://github.com/SoftwareKing/spring-cloud-study/tree/master/sc-eureka-first</a></p></blockquote><p><img src="/images/sc-study/sc-e-p.png" alt="参考工程"></p><h3 id="Spring-MVC中基于无状态的REST"><a href="#Spring-MVC中基于无状态的REST" class="headerlink" title="Spring MVC中基于无状态的REST"></a>Spring MVC中基于无状态的REST</h3><p>   工程可以参考sc-rest-demo下面的sc-rest-provider和sc-rest-consumer，具体使用如下代码所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/sc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从属性文件中读取服务提供的URL</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;order.orderServiceUrl&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String orderServiceUrl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderModel <span class="title">getOrderInfo</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line"><span class="comment">// this.restTemplate.getForObject("http://localhost:8000/sc/order/" +</span></span><br><span class="line"><span class="comment">// id,OrderModel.class);</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForObject(<span class="keyword">this</span>.orderServiceUrl + <span class="string">"/sc/order/"</span> + id,</span><br><span class="line">OrderModel.class);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>大家注意到没，把<a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a> ,硬编码到程序中，是不是比较low。可以采用上面代码中的方式：orderServiceUrl解决。但是这样还是比较low,下面介绍一下引入Eureka实现服务注册与发现的处理。</p></blockquote><h2 id="使用Eureka实现服务的注册与发现"><a href="#使用Eureka实现服务的注册与发现" class="headerlink" title="使用Eureka实现服务的注册与发现"></a>使用Eureka实现服务的注册与发现</h2><h3 id="搭建注册中心-Eureka-Server"><a href="#搭建注册中心-Eureka-Server" class="headerlink" title="搭建注册中心-Eureka Server"></a>搭建注册中心-Eureka Server</h3><p>  1.引入依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入spring boot的依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sc-eureka-first-server-HA01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>sc-eureka-first-server-HA01<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入Spring Cloud Eureka依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 引入spring cloud的依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Camden.SR5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 添加spring-boot的maven插件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol><li>在Resources目录下创建application.yml<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span>                    <span class="comment"># 指定该Eureka实例的端口</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册到Eureka Server上，默认为true，当前应用为Eureka Server所以无需注册</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">false</span>  </span><br><span class="line">    <span class="comment">#表示是否从Eureka Server获取注册信息，默认为true。因为这是一个单点的Eureka Server，不需要同步其他的Eureka Server节点的数据，故而设为false。 </span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#Eureka Server的访问地址，服务注册和client获取服务注册信息均通过该URL，多个服务注册地址用,隔开</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参考文档：http://projects.spring.io/spring-cloud/docs/1.0.3/spring-cloud.html#_standalone_mode</span></span><br><span class="line"><span class="comment"># 参考文档：http://my.oschina.net/buwei/blog/618756</span></span><br></pre></td></tr></table></figure></li></ol><p>3.创建Spring Boot主应用程序启动代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.sc.eureka.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Eureka Server</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudEurekaServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SpringCloudEurekaServer.class, args);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动Eureka server测试：<br>  启动sc-eureka-first-server-HA01，访问<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a> ,如下图所示:</p><p>  <img src="/images/sc-study/sc-e-1.png" alt="Eureka server"></p><h3 id="创建服务提供者"><a href="#创建服务提供者" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h3><p>  1.服务提供者，为了演示在这里提供一个简单的<code>订单查询服务</code>，如工程<code>sc-eureka-first-provider01</code>和<code>sc-eureka-first-provider02</code>所示。<br>  2.主程序入口代码，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.sc.eureka.first.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务提供者端，加上<span class="doctag">@EnableDiscoveryClient</span>注解，完成服务注册。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@site</span> http://xujin.org</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="comment">// @EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderProviderSpringBootAppliaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(OrderProviderSpringBootAppliaction.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><code>Tips</code>:如果使用Eureka, 可以使用@EnableEurekaClient注解，但是推荐使用@EnableDiscoveryClient代替@EnableEurekaClient注解，因为@EnableDiscoveryClient是一个高度的抽象， 来自于spring-cloud-commons， 由于Spring Cloud选型是中立的因此抽象出该接口， 当服务注册中心选型改变为Eureka，ZK，Consul时，不需要修改原有代码中的注解。</p></blockquote><p>3.服务提供者暴露的服务-OrderController.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/sc/order/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderModel <span class="title">findOrderById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">OrderModel orderModel = orderService.findOrderByOrderId(id);</span><br><span class="line"><span class="keyword">return</span> orderModel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动服务提供者，把服务注册信息，注册到Eureka Server注册中心<br>启动sc-eureka-first-provider01,当启动其中一个服务后刷新Eureka Server会出现安全模式,如下图所示:<br><img src="/images/sc-study/sc-e-safe.png" alt="安全模式"></p><p>启动sc-eureka-first-provider02，刷新Eureka Server如下图所示。<br><img src="/images/sc-study/sc-e-safe-2.png" alt="安全模式"></p><h3 id="创建服务消费者"><a href="#创建服务消费者" class="headerlink" title="创建服务消费者"></a>创建服务消费者</h3><p> 服务消费者主要是一个简单的用户服务，用户服务查询订单服务的订单信息。<br> 1.引入相应的依赖<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xujin.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sc-eureka-first-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>sc-eureka-first-consumer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入spring boot的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入spring cloud的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>Camden.SR4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加spring-boot的maven插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2.主程序入口代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.sc.eureka.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者端加入服务发现注解</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(UserConsumerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>消费者调用Controller。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UserController.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">// discoveryClient获取服务列表中，应用名为sc-eureka-first-provider一个服务注册信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">serviceUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;ServiceInstance&gt; list = discoveryClient</span><br><span class="line">.getInstances(<span class="string">"sc-eureka-first-provider"</span>);</span><br><span class="line"><span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> String.valueOf(list.get(<span class="number">0</span>).getUri());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/sc/user/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Order <span class="title">findByIdByEurekaServer</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">String providerServiceUrl = serviceUrl();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForObject(providerServiceUrl + <span class="string">"sc/order/"</span> + id,</span><br><span class="line">Order.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如上述代码，所示使用<code>discoveryClient.getInstances(&quot;sc-eureka-first-provider&quot;)</code>获取服务名为<code>sc-eureka-first-provider</code>的服务注册列表信息。</p></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>先后启动sc-eureka-first-consumer,如没有异常，打开浏览器访问:<a href="http://localhost:8010/sc/user/2" target="_blank" rel="noopener">http://localhost:8010/sc/user/2</a> ,debug如下所示可以看到<br><img src="/images/sc-study/sc-e-consumer-1.png" alt="服务提供者端服务发现"></p><p>在刷新一下Eureka Server，如图下所示,此时安全模式关闭。<br><img src="/images/sc-study/sc-e-safe-3.png" alt="Eureka Server"></p><blockquote><p>关于安全模式，在本篇文章中，暂不讨论，后面将会专写一篇文章介绍，请暂时忽略。</p></blockquote><h3 id="获取消费者获取服务端消费列表"><a href="#获取消费者获取服务端消费列表" class="headerlink" title="获取消费者获取服务端消费列表"></a>获取消费者获取服务端消费列表</h3><ol><li><p>使用EurekaClient获取服务注册信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> EurekaClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">serviceUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    InstanceInfo instance = discoveryClient.getNextServerFromEureka(<span class="string">"STORES"</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">return</span> instance.getHomePageUrl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用DiscoveryClient获取服务注册信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">serviceUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;ServiceInstance&gt; list = discoveryClient.getInstances(<span class="string">"STORES"</span>);</span><br><span class="line">    <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>).getUri();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://github.com/spring-cloud/spring-cloud-netflix/blob/master/docs/src/main/asciidoc/spring-cloud-netflix.adoc" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-netflix/blob/master/docs/src/main/asciidoc/spring-cloud-netflix.adoc</a></p></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p> 上面这个例子使用Eureka实现了服务的注册与发现，但是有一个问题就是获取服务注册列表的方式比较low并且太方便，还有一个问题就是没有使用负载均衡（Load Balance)，这样就没法实现微服务的HA。在后面的文章将会介绍Eureka Server的HA和使用Robbin实现LB。。</p>]]></content>
      
      <categories>
          
          <category> 跟我学Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Eureka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HashMap多线程死循环问题</title>
      <link href="/java/hm02/"/>
      <url>/java/hm02/</url>
      <content type="html"><![CDATA[<p>摘要：一直都知道Java HashMap使用不当会导致CPU 达到100%的线上故障，以及怎么造成的，怎么在使用过程中进行规避，由于时间的关系。最近整理如本文所示。</p><h2 id="一-HashMap出现死循环原因"><a href="#一-HashMap出现死循环原因" class="headerlink" title="一.HashMap出现死循环原因"></a>一.HashMap出现死循环原因</h2><h3 id="1-1-什么是线程安全"><a href="#1-1-什么是线程安全" class="headerlink" title="1.1 什么是线程安全"></a>1.1 什么是线程安全</h3><p>当<code>多个线程</code>访问某<code>一个类(对象和方法)时</code>，这个<code>类的对象或方法</code>都能始终表现出正确的行为或者我们想要的结果，我们就认为其是线程安全的，否则非线程安全。我们都知道HashMap是非线程安全的，那怎么使用HashMap会导致CPU占用率达到100%。</p><a id="more"></a><p>之所以会导致HashMap出现死循环是因为多线程会导致HashMap的<code>Entry节点形成环链</code>，这样当遍历集合时<code>Entry的next节点由于不为空</code>，从而形成死循环，从而导致CPU达到100%</p><h3 id="1-2-为何出现死循环简要说明"><a href="#1-2-为何出现死循环简要说明" class="headerlink" title="1.2 为何出现死循环简要说明"></a>1.2 为何出现死循环简要说明</h3><p>HashMap是非线程安全的，在高并发场景下，如果不能保持足够的同步，就有可能在执行HashMap.get时进入死循环，将CPU的消耗到100%。</p><ul><li><p>HashMap采用链表解决Hash冲突。因为是链表结构，那么就很容易形成闭合的链路，这样在循环的时候只要有线程对这个HashMap进行get操作就会产生死循环，</p></li><li><p>单线程情况下，只有一个线程对HashMap的数据结构进行操作，是不可能产生闭合的回路的。</p></li><li><p>只有在多线程并发的情况下才会出现这种情况，那就是在put操作的时候，如果size&gt;initialCapacity*loadFactor，hash表进行扩容，那么这时候HashMap就会进行rehash操作，随之HashMap的结构就会很大的变化。很有可能就是在两个线程在这个时候同时触发了rehash操作，产生了闭合的回路。</p></li></ul><h2 id="二-HashMap死循环原因分析"><a href="#二-HashMap死循环原因分析" class="headerlink" title="二.HashMap死循环原因分析"></a>二.HashMap死循环原因分析</h2><h3 id="2-1-问题的症状"><a href="#2-1-问题的症状" class="headerlink" title="2.1 问题的症状"></a>2.1 问题的症状</h3><p>在多线程下使用HashMap，到了线上之后，我们发现程序经常占了100%的CPU，查看堆栈，你会发现程序都Hang在了HashMap.get()这个方法上了，重启程序后问题消失。但是过段时间又会来。而且，这个问题在测试环境里可能很难重现。</p><h3 id="2-2-为什么会造成死循环"><a href="#2-2-为什么会造成死循环" class="headerlink" title="2.2 为什么会造成死循环"></a>2.2 为什么会造成死循环</h3><p>HashMap采用链表解决Hash冲突，因为是链表结构，那么就很容易形成闭合的链路，这样在循环的时候只要有线程对这个HashMap进行get操作就会产生死循环。但是，我好奇的是，这种闭合的链路是如何形成的呢。在单线程情况下，只有一个线程对HashMap的数据结构进行操作，是不可能产生闭合的回路的。那就只有在多线程并发的情况下才会出现这种情况，那就是在put操作的时候，如果size&gt;initialCapacity*loadFactor，那么这时候HashMap就会进行rehash操作，随之HashMap的结构就会发生翻天覆地的变化。很有可能就是在两个线程在这个时候同时触发了<code>rehash</code>操作，产生了闭合的回路。</p><h2 id="三-参考文章"><a href="#三-参考文章" class="headerlink" title="三.参考文章"></a>三.参考文章</h2><p><a href="http://blog.csdn.net/xuefeng0707/article/details/40797085" target="_blank" rel="noopener">http://blog.csdn.net/xuefeng0707/article/details/40797085</a></p><p><a href="http://coolshell.cn/articles/9606.html" target="_blank" rel="noopener">http://coolshell.cn/articles/9606.html</a></p><p><a href="http://firezhfox.iteye.com/blog/2241043" target="_blank" rel="noopener">http://firezhfox.iteye.com/blog/2241043</a></p><p><a href="http://www.cnblogs.com/kxdblog/p/4323892.html" target="_blank" rel="noopener">http://www.cnblogs.com/kxdblog/p/4323892.html</a></p><p><a href="http://www.cnblogs.com/ITtangtang/p/3966467.html" target="_blank" rel="noopener">http://www.cnblogs.com/ITtangtang/p/3966467.html</a></p><p><a href="http://blog.csdn.net/xuefeng0707/article/details/40797085" target="_blank" rel="noopener">http://blog.csdn.net/xuefeng0707/article/details/40797085</a><br><a href="http://blog.csdn.net/zhuqiuhui/article/details/51849692" target="_blank" rel="noopener">http://blog.csdn.net/zhuqiuhui/article/details/51849692</a></p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Jdk </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Eclipse for Mac 快捷键</title>
      <link href="/ex/eclipse-for-mac/"/>
      <url>/ex/eclipse-for-mac/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本文主要介绍了Mac下Eclipse的常用快捷键，开发环境切换到Mac下后原来Window下的快捷键很大一部分是不相容的，一方面不熟悉快捷键会导致开发效率明显降低，另一方面频繁录入错误的快捷键IDE也一脸懵逼，方便速查记录如下，尤其像我习惯了Eclipse IDE。<br><a id="more"></a></p><h3 id="最常用"><a href="#最常用" class="headerlink" title="最常用"></a>最常用</h3><table><thead><tr><th style="text-align:left">快捷键</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Option+↓</td><td style="text-align:left">向下移动代码</td></tr><tr><td style="text-align:left">Option+↑</td><td style="text-align:left">向上移动代码</td></tr><tr><td style="text-align:left">Option+/</td><td style="text-align:left">代码智能提示</td></tr><tr><td style="text-align:left">Option+Command+C</td><td style="text-align:left">修改函数结构，适用重构</td></tr><tr><td style="text-align:left">Command+Option+R</td><td style="text-align:left">批量重命名</td></tr><tr><td style="text-align:left">Option+Command+L</td><td style="text-align:left">抽取本地变量</td></tr><tr><td style="text-align:left">Command+Option+S</td><td style="text-align:left">快速生成代码，Getter&amp;Setter，Constructor等</td></tr><tr><td style="text-align:left">Option+回车</td><td style="text-align:left">显示当前选择资源的属性</td></tr><tr><td style="text-align:left">Command+Shift+O</td><td style="text-align:left">整理包去掉多余的import语句</td></tr></tbody></table><h3 id="文本位置跳转快捷键"><a href="#文本位置跳转快捷键" class="headerlink" title="文本位置跳转快捷键"></a>文本位置跳转快捷键</h3><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Command+左箭头</td><td>跳转到一行的开头</td></tr><tr><td>Command+右箭头</td><td>跳转到一行的末尾</td></tr><tr><td>Command+上箭头</td><td>跳转到文本的开头</td></tr><tr><td>Command+下箭头</td><td>跳转到文本的末尾</td></tr><tr><td>Option+左箭头</td><td>跳转到当前单词的开头</td></tr><tr><td>Option+右箭头</td><td>跳转到当前单词的末尾</td></tr></tbody></table><h3 id="文本选中快捷键"><a href="#文本选中快捷键" class="headerlink" title="文本选中快捷键"></a>文本选中快捷键</h3><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Shift+Command+左箭头</td><td>选中光标到本行开头的文本</td></tr><tr><td>Shift+Command+右箭头</td><td>选中光标到本行末尾的文本</td></tr><tr><td>Shift+Command+上箭头</td><td>选中光标到全部文本的开头</td></tr><tr><td>Shift+Command+下箭头</td><td>选中光标到全部文本的末尾</td></tr><tr><td>Shift+Option+左箭头</td><td>选中光标到当前单词的开头</td></tr><tr><td>Shift+Option+右箭头</td><td>选中光标到当前单词的末尾</td></tr></tbody></table><h3 id="Command类"><a href="#Command类" class="headerlink" title="Command类"></a>Command类</h3><p><img src="/images/tools/c-key.png" alt="Command快捷键"></p>]]></content>
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>爱油科技基于SpringCloud的微服务实践</title>
      <link href="/sc/sc-fx1/"/>
      <url>/sc/sc-fx1/</url>
      <content type="html"><![CDATA[<h1 id="爱油科技基于SpringCloud的微服务实践"><a href="#爱油科技基于SpringCloud的微服务实践" class="headerlink" title="爱油科技基于SpringCloud的微服务实践"></a>爱油科技基于SpringCloud的微服务实践</h1><h2 id="个人简介"><a href="#个人简介" class="headerlink" title="个人简介"></a>个人简介</h2><p>刘思贤（微博<a href="http://weibo.com/starlight36" target="_blank" rel="noopener">@starlight36</a>），爱油科技架构师、PMP。主要负责业务平台架构设计，DevOps实施和研发过程持续改进等，关注领域驱动设计与微服务、建设高效团队和工程师文化培养。</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本次分享主要介绍了爱油科技基于Docker和Spring Cloud将整体业务微服务化的一些实践经验，主要包括：</p><ul><li>微服务架构的分层和框架选型</li><li>服务发现和配置管理</li><li>服务集成和服务质量保证</li><li>基于领域驱动设计</li><li>实施DevOps<a id="more"></a><h2 id="从单体应用到微服务"><a href="#从单体应用到微服务" class="headerlink" title="从单体应用到微服务"></a>从单体应用到微服务</h2></li></ul><h3 id="单体应用"><a href="#单体应用" class="headerlink" title="单体应用"></a>单体应用</h3><p>优点</p><ul><li>小而美，结构简单易于开发实现</li><li>部署门槛低，单个Jar包或者网站打包即可部署</li><li>可快速实现多实例部署</li></ul><p>缺点</p><ul><li>随着业务发展更多的需求被塞进系统，体系结构逐渐被侵蚀反应堆林立</li><li>被技术绑架，难以为特定业务选择平台或框架，尽管可能有更适宜的技术做这件事</li><li>协作困难，不同业务的团队在一个系统上进行开发相互冲突</li><li>难以扩展，为了热点业务而不得不同时扩容全部业务，或者难以继续扩容</li></ul><h3 id="架构拆分"><a href="#架构拆分" class="headerlink" title="架构拆分"></a>架构拆分</h3><p>拆分：按行分层，按列分业务</p><p>在我们的微服务体系中，所有的服务被划分为了三个层次：</p><ol><li>基础设施层：为所有业务提供基础设施，包括服务注册、数据库和NoSQL、对象存储、消息队列等基础设施服务，这一层通常是由成熟组件、第三方服务组成。</li><li>业务服务层：业务微服务，根据业务领域每个子域单独一个微服务，分而治之。</li><li>接入层：直接对外提供服务，例如网站、API接口等。接入层不包含复杂的业务逻辑，只做呈现和转换。</li></ol><p>项目中我们主要关注业务服务层和接入层，对于没有足够运维力量的我们，基础设施使用云服务是省事省力的选择。</p><p>业务服务层我们给他起名叫作Epic，接入层我们起名Rune，建立之初便订立了如下原则：</p><ol><li>业务逻辑层内所有服务完全对等，可相互调用</li><li>业务逻辑层所有服务必须是无状态的</li><li>接入层所有服务可调用业务逻辑层所有服务，但接入层内部同层服务之间<strong>不可</strong>调用</li><li>接入层不能包含业务逻辑代码</li><li>所有微服务必须运行在Docker容器里</li></ol><p>业务逻辑层我们主要使用使用Java，接入层我们主要使用PHP或Node。后来随着团队的成长，逐步将接入层全部迁移至Node。</p><h3 id="框架选型"><a href="#框架选型" class="headerlink" title="框架选型"></a>框架选型</h3><p>爱油科技作为一家成品油行业的初创型公司，需要面对非常复杂的业务场景，而且随着业务的发展，变化的可能性非常高。所以在微服务架构设计之初，我们就期望我们的微服务体系能：</p><ul><li>不绑定到特定的框架、语言</li><li>服务最好是Restful风格</li><li>足够简单，容易落地，将来能扩展</li><li>和Docker相容性好</li></ul><p>目前常见的微服务相关框架：</p><ul><li>Dubbo、DubboX</li><li>Spring Cloud</li><li>Motan</li><li>Thrift、gRPC</li></ul><p>这些常见的框架中，Dubbo几乎是唯一能被称作全栈微服务框架的“框架”，它包含了微服务所需的几乎所有内容，而DubboX作为它的增强，增加了REST支持。</p><p>它优点很多，例如：</p><ul><li>全栈，服务治理的所有问题几乎都有现成答案</li><li>可靠，经过阿里实践检验的产品</li><li>实践多，社区有许多成功应用Dubbo的经验</li></ul><p>不过遗憾的是：</p><ul><li>已经停止维护</li><li>不利于裁剪使用</li><li>“过于Java”，与其他语言相容性一般</li></ul><p>Motan是微博平台微服务框架，承载了微博平台千亿次调用业务。</p><p>优点是：</p><ul><li>性能好，源自于微博对高并发和实时性的要求</li><li>模块化，结构简单，易于使用</li><li>与其他语言相容性好</li></ul><p>不过：</p><ul><li>为“短平快”业务而生，即业务简单，追求高性能高并发。</li></ul><p>Apache Thrift、gRPC等虽然优秀，并不能算作微服务框架，自身并不包括服务发现等必要特性。</p><p>如果说微服务少不了Java，那么一定少不了Spring，如果说少不了Spring，那么微服务“官配”Spring Cloud当然是值得斟酌的选择。</p><p>优点：</p><ul><li>“不做生产者，只做搬运工”</li><li>简单方便，几乎零配置</li><li>模块化，松散耦合，按需取用</li><li>社区背靠Spring大树</li></ul><p>不足：</p><ul><li>轻量并非全栈</li><li>没解决RPC的问题</li><li>实践案例少</li></ul><p>根据我们的目标，我们最终选择了Spring Cloud作为我们的微服务框架，原因有4点：</p><ol><li>虽然Dubbo基础设施更加完善，但结构复杂，我们很难吃得下，容易出坑</li><li>基于<code>Apache Thrift</code>和<code>gRPC</code>自研，投入产出比很差</li><li>不想过早引入RPC以防滥用，Restful风格本身就是一种约束。</li><li>做选择时，<code>Motan</code>还没有发布</li></ol><h3 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h3><p>Spring Cloud是一个集成框架，将开源社区中的框架集成到Spring体系下，几个重要的家族项目：</p><ul><li><code>spring-boot</code>，一改Java应用程序运行难、部署难，甚至无需Web容器，只依赖JRE即可</li><li><code>spring-cloud-netflix</code>，集成Netflix优秀的组件Eureka、Hystrix、Ribbon、Zuul，提供服务发现、限流、客户端负载均衡和API网关等特性支持</li><li><code>spring-cloud-config</code>，微服务配置管理</li><li><code>spring-cloud-consul</code>，集成Consul支持</li></ul><h2 id="服务发现和配置管理"><a href="#服务发现和配置管理" class="headerlink" title="服务发现和配置管理"></a>服务发现和配置管理</h2><p>Spring Cloud Netflix提供了Eureka服务注册的集成支持，不过没选它是因为：</p><ul><li>更适合纯Java平台的服务注册和发现</li><li>仍然需要其他分布式KV服务做后端，没解决我们的核心问题</li></ul><p>Docker作为支撑平台的重要技术之一，Consul几乎也是我们的必选服务。因此我们觉得一事不烦二主，理所应当的Consul成为我们的服务注册中心。</p><p>Consul的优势：</p><ul><li>使用Raft一致性算法，能保证分布式集群内各节点状态一致</li><li>提供服务注册、服务发现、服务状态检查</li><li>支持HTTP、DNS等协议</li><li>提供分布式一致性KV存储</li></ul><p>也就是说，Consul可以一次性解决我们对服务注册发现、配置管理的需求，而且长期来看也更适合跟不同平台的系统，包括和Docker调度系统进行整合。</p><p>最初打算自己开发一个Consul和Spring Cloud整合的组件，不过幸运的是，我们做出这个决定的时候，<code>spring-cloud-consul</code>刚刚发布了，我们可以拿来即用，这节约了很多的工作量。</p><p>因此借助Consul和<code>spring-cloud-consul</code>，我们实现了</p><ul><li>服务注册，引用了<code>srping-cloud-consul</code>的项目可以自动注册服务，也可以通过HTTP接口手动注册，Docker容器也可以自动注册</li><li>服务健康状态检查，Consul可以自动维护健康的服务列表</li><li>异构系统可以直接通过Consul的HTTP接口拉取并监视服务列表，或者直接使用DNS解析服务</li><li>通过分布式一致性KV存储进行微服务的配置下发</li><li>为一些业务提供选主和分布式锁服务</li></ul><p>当然也踩到了一些坑：</p><p><code>spring-cloud-consul</code>服务注册时不能正确选判本地ip地址。对于我们的环境来说，无论是在服务器上，还是Docker容器里，都有多个网络接口同时存在，而<code>spring-cloud-consul</code>在注册服务时，需要先选判本地服务的IP地址，判断逻辑是以第一个非本地地址为准，常常错判。因此在容器中我们利用entrypoint脚本获取再通过环境变量强制指定。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># If service runs as Rancher service, auto set advertise ip address</span></span><br><span class="line"><span class="comment"># from Rancher metadata service.</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$RUN_IN_RANCHER</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Waiting for ip address..."</span></span><br><span class="line">    <span class="comment"># Waiting for ip address</span></span><br><span class="line">    sleep 5</span><br><span class="line"></span><br><span class="line">    RANCHER_MS_BASE=http://rancher-metadata/2015-12-19</span><br><span class="line">    PRIMARY_IP=`curl -sSL <span class="variable">$RANCHER_MS_BASE</span>/self/container/primary_ip`</span><br><span class="line">    SERVICE_INDEX=`curl -sSL <span class="variable">$RANCHER_MS_BASE</span>/self/container/service_index`</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$PRIMARY_IP</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">export</span> SPRING_CLOUD_CONSUL_DISCOVERY_HOSTNAME=<span class="variable">$PRIMARY_IP</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Starting service #<span class="variable">$&#123;SERVICE_INDEX-1&#125;</span> at <span class="variable">$PRIMARY_IP</span>."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure><p>我们的容器运行在Rancher中，所以可以利用Rancher的metadata服务来获取容器的IP地址，再通过<code>SPRING_CLOUD_CONSUL_DISCOVERY_HOSTNAME</code>环境变量来设置服务发现的注册地址。基于其他容器调度平台也会很相似。</p><p>另外一些服务中内置了定时调度任务等，多实例启动时需要单节点运行调度任务。通过Consul的分布式锁服务，我们可以让获取到锁的节点启用调度任务，没获取到的节点等待获取锁。</p><h2 id="服务集成"><a href="#服务集成" class="headerlink" title="服务集成"></a>服务集成</h2><p>为了方便开发人员使用，微服务框架应当简单容易使用。对于很多微服务框架和RPC框架来说，都提供了很好的机制。在Spring Cloud中通过<code>OpenFeign</code>实现微服务之间的快速集成：</p><p>服务方声明一个Restful的服务接口，和普通的Spring MVC控制器几乎别无二致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserResource</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"&#123;id&#125;"</span>, method = RequestMethod.GET, produces = <span class="string">"application/json"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRepresentation <span class="title">findOne</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String id) </span>&#123;</span><br><span class="line">        User user = <span class="keyword">this</span>.userRepository.findByUserId(<span class="keyword">new</span> UserId(id));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span> || user.getDeleted()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundException(<span class="string">"指定ID的用户不存在或者已被删除。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserRepresentation(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户方使用一个微服务接口，只需要定义一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"epic-member-microservice"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/users/&#123;id&#125;"</span>, method = RequestMethod.GET, produces = <span class="string">"application/json"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findOne</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要使用<code>UserClient</code>的Bean中，直接注入<code>UserClient</code>类型即可。事实上，<code>UserClient</code>和相关VO类，可以直接作为公共接口封装在公共项目中，供任意需要使用的微服务引用，服务方Restful Controller直接实现这一接口即可。</p><p><code>OpenFeign</code>提供了这种简单的方式来使用Restful服务，这大大降低了进行接口调用的复杂程度。</p><p>对于错误的处理，我们使用HTTP状态码作为错误标识，并做了如下规定：</p><ul><li>4xx用来表示由于客户方参数错误、状态不正确、没有权限、操作冲突等种种原因导致的业务错误。</li><li>5xx用来表示由于服务方系统异常、无法服务等原因服务不可用的错误。</li></ul><p>对于服务器端，只需要在一个异常类上添加注解，即可指定该异常的HTTP响应状态码，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotFoundException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NotFoundException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"查找的资源不存在或者已被删除。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NotFoundException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NotFoundException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于客户端我们实现了自己的<code>FeignClientExceptionErrorDecoder</code>来将请求异常转换为对于的异常类，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignClientExceptionErrorDecoder</span> <span class="keyword">implements</span> <span class="title">ErrorDecoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ErrorDecoder delegate = <span class="keyword">new</span> ErrorDecoder.Default();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exception <span class="title">decode</span><span class="params">(String methodKey, Response response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Only decode 4xx errors.</span></span><br><span class="line">        <span class="keyword">if</span> (response.status() &gt;= <span class="number">500</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> delegate.decode(methodKey, response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Response content type must be json</span></span><br><span class="line">        <span class="keyword">if</span> (response.headers().getOrDefault(<span class="string">"Content-Type"</span>, Lists.newArrayList()).stream()</span><br><span class="line">            .filter(s -&gt; s.toLowerCase().contains(<span class="string">"json"</span>)).count() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String body = Util.toString(response.body().asReader());</span><br><span class="line">                <span class="comment">// 转换并返回异常对象</span></span><br><span class="line">                ...</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to process response body."</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> delegate.decode(methodKey, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，<code>decode</code>方法返回的4xx状态码异常应当是<code>HystrixBadRequestException</code>的子类对象，原因在于，我们把4xx异常视作业务异常，而不是由于故障导致的异常，所以不应当被Hystrix计算为失败请求，并引发断路器动作，这一点<strong>非常重要</strong>。</p><p>在<code>UserClient.findOne</code>方法的调用代码中，即可直接捕获相应的异常了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    User user = <span class="keyword">this</span>.userClient.findOne(<span class="keyword">new</span> UserId(id));</span><br><span class="line">&#125; <span class="keyword">catch</span>(NotFoundException ex) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>OpenFeign</code>，我们大大降低了Restful接口进行服务集成的难度，几乎做到了无额外工作量的服务集成。</p><h2 id="服务质量保证"><a href="#服务质量保证" class="headerlink" title="服务质量保证"></a>服务质量保证</h2><p>微服务架构下，由于调用需要跨系统进行远程操作，各微服务独立运维，所以在设计架构时还必须考虑伸缩性和容错性，具体地说主要包括以下几点要求：</p><ul><li>服务实例可以平滑地加入、移除</li><li>流量可以均匀地分布在不同的实例上</li><li>接口应当资源隔离，防止因为个别接口调用时间过长导致线程池被占满而导致整个服务不可用</li><li>能支持接口降级并隔离故障节点，防止集群雪崩</li><li>服务能进行平滑升级</li></ul><p>Spring Cloud中内置的<code>spring-cloud-netflix</code>的其他组件为我们提供了很好的解决方案：</p><ul><li>Hystrix - 实现了断路器模式，帮助控流和降级，防止集群雪崩，就像汽车的避震器</li><li>Ribbon - 提供了客户端负载均衡器</li><li>Zuul - API网关模式，帮助实现接口的路由、认证等</li></ul><p>下面主要介绍一下，各个组件在进行服务质量保证中是如何发挥作用的。</p><h3 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h3><p>Consul中注册了一致性的可用的服务列表，并通过健康检查保证这些实例都是存活的，服务注册和检查的过程如下：</p><ul><li>服务启动完成，服务端口开始监听时，<code>spring-cloud-consul</code>通过Consul接口发起服务注册，将服务的<code>/health</code>作为健康检查端点；</li><li>Consul每隔5秒访问<code>/health</code>，检查当前微服务是否为<code>UP</code>状态；</li><li><code>/health</code>将会收集微服务内各个仪表收集上来的状态数据，主要包括数据库、消息队列是否连通等；</li><li>如果为UP状态，则微服务实例被标记为健康可用，否则被标记成失败；</li><li>当服务关闭时，先从Consul中取消服务注册，再优雅停机。</li></ul><p>这样能够保证Consul中列出的所有微服务状态都是健康可用的，各个微服务会监视微服务实例列表，自动同步更新他们。</p><h3 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h3><p>Hystrix提供了断路器模式的实现，主要在三个方面可以说明：</p><p><img src="/images/fx/07-flow-hystrix.png" alt="hystrix-command-flow-chart"></p><p><em>图片来自Hystrix项目文档</em></p><p>首先Hystrix提供了降级方法，断路器开启时，操作请求会快速失败不再向后投递，直接调用fallback方法来返回操作；当操作失败、被拒或者超时后，也会直接调用fallback方法返回操作。这可以保证在系统过载时，能有后备方案来返回一个操作，或者优雅的提示错误信息。断路器的存在能让故障业务被隔离，防止过载的流量涌入打死后端数据库等。</p><p>然后是基于请求数据统计的断路开关，在Hystrix中维护一个请求统计了列表（默认最多10条），列表中的每一项是一个桶。每个桶记录了在这个桶的时间范围内（默认是1秒），请求的成功数、失败数、超时数、被拒数。其中当失败请求的比例高于某一值时，将会触发断路器工作。</p><p>最后是不同的请求命令（<code>HystrixCommand</code>）可以使用彼此隔离的资源池，不会发生相互的挤占。在Hystrix中提供了两种隔离机制，包括线程池和信号量。线程池模式下，通过线程池的大小来限制同时占用资源的请求命令数目；信号量模式下通过控制进入临界区的操作数目来达到限流的目的。</p><p>这里包括了Hystrix的一些重要参数的配置项：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>circuitBreaker.requestVolumeThreshold</td><td>至少在一个统计窗口内有多少个请求后，才执行断路器的开关，默认20</td></tr><tr><td>circuitBreaker.sleepWindowInMilliseconds</td><td>断路器触发后多久后才进行下一次判定，默认5000毫秒</td></tr><tr><td>circuitBreaker.errorThresholdPercentage</td><td>一个统计窗口内百分之多少的请求失败才触发熔断，默认是50%</td></tr><tr><td>execution.isolation.strategy</td><td>运行隔离策略，支持<code>Thread</code>，<code>Semaphore</code>，前者通过线程池来控制同时运行的命令，后者通过信号来控制，默认是<code>Thread</code></td></tr><tr><td>execution.isolation.thread.interruptOnTimeout</td><td>命令执行的超时时间，默认1000毫秒</td></tr><tr><td>coreSize</td><td>线程池大小，默认10</td></tr><tr><td>keepAliveTimeMinutes</td><td>线程存活时间，默认为1分钟</td></tr><tr><td>maxQueueSize</td><td>最大队列长度，-1使用SynchronousQueue，默认-1。</td></tr><tr><td>queueSizeRejectionThreshold</td><td>允许队列堆积的最大数量</td></tr></tbody></table><h3 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h3><p>Ribbon使用Consul提供的服务实例列表，可以通过服务名选取一个后端服务实例连接，并保证后端流量均匀分布。<code>spring-cloud-netflix</code>整合了OpenFeign、Hystrix和Ribbon的负载均衡器，整个调用过程如下（返回值路径已经省略）：</p><p><img src="/images/fx/09-flow-spring-ribbon.png" alt=""></p><p>在这个过程中，各个组件扮演的角色如下：</p><ul><li>Feign作为客户端工厂，负责生成客户端对象，请求和应答的编解码</li><li>Hystrix提供限流、断路器、降级、数据统计</li><li>Ribbon提供负载均衡器</li></ul><p>Feign负责提供客户端接口收调用，把发起请求操作（包括编码、解码和请求数据）封装成一个Hystrix命令，这个命令包裹的请求对象，会被Ribbon的负载均衡器处理，按照负载均衡策略选择一个主机，然后交给请求对象绑定的HTTP客户端对象发请求，响应成功或者不成功的结果，返回给Hystrix。</p><p><code>spring-cloud-netflix</code>中默认使用了Ribbon的<code>ZoneAwareLoadBalancer</code>负载均衡器，它的负载均衡策略的核心指标是平均活跃请求数（Average Active Requests）。<code>ZoneAwareLoadBalancer</code>会拉取所有当前可用的服务器列表，然后将目前由于种种原因（比如网络异常）响应过慢的实例暂时从可用服务实例列表中移除，这样的机制可以保证故障实例被隔离，以免继续向其发送流量导致集群状态进一步恶化。不过由于目前<code>spring-cloud-consul</code>还不支持通过consul来指定服务实例的所在区，我们正在努力将这一功能完善。除了选区策略外，Ribbon中还提供了其他的负载均衡器，也可以自定义合适的负载均衡器。</p><p>总的来看，<code>spring-cloud-netflix</code>和Ribbon中提供了基本的负载均衡策略，对于我们来说已经足够用了。但实践中，如果需要进行灰度发布或者需要进行流量压测，目前来看还很难直接实现。而这些特性在Dubbo则开箱即用。</p><h1 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h1><p>Zuul为使用Java语言的接入层服务提供API网关服务，既可以根据配置反向代理指定的接口，也可以根据服务发现自动配置。Zuul提供了类似于iptables的处理机制，来帮助我们实现验证权鉴、日志等，请求工作流如下所示：</p><p><img src="/images/fx/10-flow-zuul.png" alt="zuul-lifecycle"><br>图片来自Zuul官方文档。</p><p>使用Zuul进行反向代理时，同样会走与OpenFeign类似的请求过程，确保API的调用过程也能通过Hystrix、Ribbon提供的降级、控流机制。</p><h3 id="Hystrix-Dashboard"><a href="#Hystrix-Dashboard" class="headerlink" title="Hystrix Dashboard"></a>Hystrix Dashboard</h3><p>Hystrix会统计每个请求操作的情况来帮助控制断路器，这些数据是可以暴露出来供监控系统热点。Hystrix Dashboard可以将当前接口调用的情况以图形形式展示出来：</p><p><img src="/images/fx/11-flow-hystrix-dashboard.png" alt="hystrix-dashboard-netflix-api-example"></p><p>图片来自Hystrix Dashboard官方示例</p><p>Hystrix Dashboard既可以集成在其他项目中，也可以独立运行。我们直接使用Docker启动一个Hystrix Dashboard服务即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -ti -p 7979:7979 kennedyoliveira/hystrix-dashboard</span><br></pre></td></tr></table></figure><p>为了实现能对整个微服务集群的接口调用情况汇总，可以使用<code>spring-cloud-netflix-turbine</code>来将整个集群的调用情况汇集起来，供Hystrix Dashboard展示。</p><h3 id="日志监控"><a href="#日志监控" class="headerlink" title="日志监控"></a>日志监控</h3><p>微服务的日志直接输出到标准输出/标准错误中，再由Docker通过syslog日志驱动将日志写入至节点机器机的rsyslog中。rsyslog在本地暂存并转发至日志中心节点的Logstash中，既归档存储，又通过ElasticSearch进行索引，日志可以通过Kibana展示报表。</p><p><img src="/images/fx/12-flow-elk.png" alt="logs"></p><p>在rsyslog的日志收集时，需要将容器信息和镜像信息加入到tag中，通过Docker启动参数来进行配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--log-driver syslog --log-opt tag=&quot;&#123;&#123;.ImageName&#125;&#125;/&#123;&#123;.Name&#125;&#125;/&#123;&#123;.ID&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>不过rsyslog默认只允许tag不超过32个字符，这显然是不够用的，所以我们自定义了日志模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template (name=&quot;LongTagForwardFormat&quot; type=&quot;string&quot; string=&quot;&lt;%PRI%&gt;%TIMESTAMP:::date-rfc3339% %HOSTNAME% %syslogtag%%msg:::sp-if-no-1st-sp%%msg%&quot;)</span><br></pre></td></tr></table></figure><p>在实际的使用过程中发现，当主机内存负载比较高时，rsyslog会发生日志无法收集的情况，报日志数据文件损坏。后来在Redhat官方找到了相关的问题，确认是rsyslog中的一个Bug导致的，当开启日志压缩时会出现这个问题，我们选择暂时把它禁用掉。</p><h2 id="领域驱动设计"><a href="#领域驱动设计" class="headerlink" title="领域驱动设计"></a>领域驱动设计</h2><p>我们使用领域驱动设计（DDD）的方法来构建微服务，因为微服务架构和DDD有一种天然的契合。把所有业务划分成若干个子领域，有强内在关联关系的领域（界限上下文）应当被放在一起作为一个微服务。最后形成了界限上下文-工作团队-微服务一一对应的关系：</p><ul><li>身份与访问 - 团队A - 成员微服务</li><li>商品与促销 - 团队B - 商品微服务</li><li>订单交易 - 团队C - 交易微服务</li><li>…</li></ul><h3 id="微服务设计"><a href="#微服务设计" class="headerlink" title="微服务设计"></a>微服务设计</h3><p>在设计单个微服务（Epic层的微服务）时，我们这样做：</p><ul><li>使用OOD方法对业务进行领域建模，领域模型应当是充血模型</li><li>领域服务帮助完成多个领域对象协作</li><li>事件驱动，提供领域事件，供内部或者其他微服务使用</li><li>依赖倒置，在适配器接口中实现和框架、组件、SDK的整合</li></ul><p>这给我们带来了显著的好处：</p><ul><li>服务开发时关注于业务，边界合理清晰</li><li>容易直接对领域模型进行单元测试</li><li>不依赖特定组件或者平台</li></ul><h3 id="事务问题"><a href="#事务问题" class="headerlink" title="事务问题"></a>事务问题</h3><p>从单体应用迁移到微服务架构时，不得不面临的问题之一就是事务。在单体应用时代，所有业务共享同一个数据库，一次请求操作可放置在同一个数据库事务中；在微服务架构下，这件事变得非常困难。然而事务问题不可避免，非常关键。</p><p>解决事务问题时，最先想到的解决方法通常是分布式事务。分布式事务在传统系统中应用的比较广泛，主要基于两阶段提交的方式实现。然而分布式事务在微服务架构中可行性并不高，主要基于这些考虑：</p><ul><li>分布式事务需要事务管理器，对于不同语言平台来说，几乎没有有一致的实现来进行事务管理；</li><li>并非所有的持久化基施都提供完整ACID的事务，比如现在广泛使用的NoSQL；</li><li>分布式事务存在性能问题。</li></ul><p>根据CAP理论，分布式系统不可兼得一致性、可用性、分区容错性（可靠性）三者，对于微服务架构来讲，我们通常会保证可用性、容错性，牺牲一部分一致性，追求最终一致性。所以对于微服务架构来说，使用分布式事务来解决事务问题无论是从成本还是收益上来看，都不划算。</p><p>对微服务系统来说解决事务问题，CQRS+Event Sourcing是更好的选择。</p><p>CQRS是命令和查询职责分离的缩写。CQRS的核心观点是，把操作分为修改状态的命令（Command），和返回数据的查询（Query），前者对应于“写”的操作，不能返回数据，后者对应于“读”的操作，不造成任何影响，由此领域模型被一分为二，分而治之。</p><p>Event Sourcing通常被翻译成事件溯源，简单的来说就是某一对象的当前状态，是由一系列的事件叠加后产生的，存储这些事件即可通过重放获得对象在任一时间节点上的状态。</p><p>通过CQRS+Event Sourcing，我们很容易获得最终一致性，例如对于一个跨系统的交易过程而言：</p><ul><li>用户在交易微服务提交下单命令，产生领域事件<code>PlaceOrderEvent</code>，订单状态<code>PENDING</code>；</li><li>支付微服务收到领域事件进行扣款，扣款成功产生领域事件<code>PaidEvent</code>；</li><li>交易微服务收到领域事件<code>PaidEvent</code>，将订单标记为<code>CREATED</code>；</li><li>若支付微服务发现额度不足扣款失败，产生领域事件<code>InsufficientEvent</code>，交易微服务消费将订单标记为<code>CANCELED</code>。</li></ul><p>我们只要保证领域事件能被持久化，那么即使出现网络延迟或部分系统失效，我们也能保证最终一致性。</p><p>实践上，我们利用Spring从4.2版本开始支持的自定义应用事件机制将本地事务和事件投递结合起来进行：</p><ul><li>领域内业务过程会产生领域事件，通过Spring的应用事件机制进行应用内投递；</li><li>监听相应的领域事件，在事务提交前投递至消息队列；</li><li>以上全都没有异常发生，则本地事务提交，如果出现异常，本地事务回滚。</li></ul><h3 id="一些小经验"><a href="#一些小经验" class="headerlink" title="一些小经验"></a>一些小经验</h3><ul><li>使用Spring Configured实现非Spring Bean的依赖注入（自己new的对象也可以注入了，对充血模型非常有用）</li><li>使用Swagger UI实现自文档的微服务，写好接口即有文档，即可调试</li></ul><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><p>到目前为止我们已经有数十个微服务运行于线上了，微服务数目甚至多过了团队人数。如果没有DevOps支持，运维这些微服务将是一场灾难。<br>我们使用Docker镜像作为微服务交付的标准件：</p><ul><li>Gitlab管理团队项目代码</li><li>Gitlab-CI提供构建打包，大家提交的项目都要构建并跑通测试</li><li>使用Rancher作为Docker调度平台，Merge后RC分支自动部署</li><li>测试通过后统一上线发布</li></ul><p>由于时间所限，这里就不展开赘述了。</p><h2 id="永不完美"><a href="#永不完美" class="headerlink" title="永不完美"></a>永不完美</h2><p>基于<code>spring-cloud-consul</code>的配置管理仍然需要完善，对于大规模应用的环境中，配置的版本控制、灰度、回滚等非常重要。SpringCloud提供了一个核，但是具体的使用还要结合场景、需求和环境等，再做一些工作。</p><p>对于非JVM语言的微服务和基于SpringCloud的微服务如何协同治理，这一问题仍然值得探索。包括像与Docker编排平台，特别是与Mesos协同进行伸缩的服务治理，还需要更多的实践来支持。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>是否选用微服务架构，应当根据业务实际情况进行判断，切勿跟风为了微服务而微服务；</li><li>目前来看还没有微服务全栈框架，Spring Cloud也未必是最优方案，技术选型还是应当务实；</li><li>微服务架构下，对于业务的理解拆分、领域建模等提出了更高的要求，相比框架，它们才是微服务架构的基石；</li><li>DevOps是微服务实践中的重要一环，不容小视。</li></ul>]]></content>
      
      <categories>
          
          <category> 社区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Eureka </tag>
            
            <tag> 实践分享 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Eureka服务下线(Cancel)源码分析</title>
      <link href="/sc/sc-eureka-cancle/"/>
      <url>/sc/sc-eureka-cancle/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:在本篇文章中主要对Eureka的Cancel(服务下线)进行源码分析，在Service Provider服务shut down的时候，需要及时通知Eureka Server把自己剔除，从而避免其它客户端调用已经下线的服务，导致服务不可用。</p><h2 id="Cancel-服务下线"><a href="#Cancel-服务下线" class="headerlink" title="Cancel(服务下线)"></a>Cancel(服务下线)</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在Service Provider服务shut down的时候，需要及时通知Eureka Server把自己剔除，从而避免客户端调用已经下线的服务。</p><h2 id="服务提供者端源码分析"><a href="#服务提供者端源码分析" class="headerlink" title="服务提供者端源码分析"></a>服务提供者端源码分析</h2><ol><li>在eureka-client-1.4.1中的com.netflix.discovery.DiscoveryClient中shutdown()的<code>867</code>行。<a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Shuts down Eureka Client. Also sends a deregistration request to the</span></span><br><span class="line"><span class="comment">    * eureka server.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PreDestroy</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (isShutdown.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">           logger.info(<span class="string">"Shutting down DiscoveryClient ..."</span>);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (statusChangeListener != <span class="keyword">null</span> &amp;&amp; applicationInfoManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">               applicationInfoManager.unregisterStatusChangeListener(statusChangeListener.getId());</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           cancelScheduledTasks();</span><br><span class="line"></span><br><span class="line">           <span class="comment">// If APPINFO was registered</span></span><br><span class="line">           <span class="keyword">if</span> (applicationInfoManager != <span class="keyword">null</span> &amp;&amp; clientConfig.shouldRegisterWithEureka()) &#123;</span><br><span class="line">               applicationInfoManager.setInstanceStatus(InstanceStatus.DOWN);</span><br><span class="line">               <span class="comment">//调用下线接口</span></span><br><span class="line">               unregister();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (eurekaTransport != <span class="keyword">null</span>) &#123;</span><br><span class="line">               eurekaTransport.shutdown();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           heartbeatStalenessMonitor.shutdown();</span><br><span class="line">           registryStalenessMonitor.shutdown();</span><br><span class="line"></span><br><span class="line">           logger.info(<span class="string">"Completed shut down of DiscoveryClient"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><code>Tips</code> <code>@PreDestroy</code>注解或<code>shutdown()</code>的方法是服务下线的入口</p></blockquote><ol><li>在eureka-client-1.4.1中的<code>com.netflix.discovery.DiscoveryClient</code>中<code>unregister（）</code>的<code>897</code>行<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * unregister w/ the eureka service.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">unregister</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// It can be null if shouldRegisterWithEureka == false</span></span><br><span class="line">  <span class="keyword">if</span>(eurekaTransport != <span class="keyword">null</span> &amp;&amp; eurekaTransport.registrationClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">         logger.info(<span class="string">"Unregistering ..."</span>);</span><br><span class="line">         <span class="comment">//发送服务下线请求</span></span><br><span class="line">         EurekaHttpResponse&lt;Void&gt; httpResponse = eurekaTransport.registrationClient.cancel(instanceInfo.getAppName(), instanceInfo.getId());</span><br><span class="line">         logger.info(PREFIX + appPathIdentifier + <span class="string">" - deregister  status: "</span> + httpResponse.getStatusCode());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                logger.error(PREFIX + appPathIdentifier + <span class="string">" - de-registration failed"</span> + e.getMessage(), e);</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Eureka-Server服务下线实现细节"><a href="#Eureka-Server服务下线实现细节" class="headerlink" title="Eureka Server服务下线实现细节"></a>Eureka Server服务下线实现细节</h2><ol><li><p>在<code>com.netflix.eureka.resources.InstanceResource</code>中的<code>280</code>行中的<code>cancelLease()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DELETE</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">cancelLease</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"> @HeaderParam(PeerEurekaNode.HEADER_REPLICATION)</span> String isReplication) </span>&#123;</span><br><span class="line">   <span class="comment">//调用cancel</span></span><br><span class="line">   <span class="keyword">boolean</span> isSuccess = registry.cancel(app.getName(), id,</span><br><span class="line">                <span class="string">"true"</span>.equals(isReplication));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">     logger.debug(<span class="string">"Found (Cancel): "</span> + app.getName() + <span class="string">" - "</span> + id);</span><br><span class="line">            <span class="keyword">return</span> Response.ok().build();</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     logger.info(<span class="string">"Not Found (Cancel): "</span> + app.getName() + <span class="string">" - "</span> + id);</span><br><span class="line">            <span class="keyword">return</span> Response.status(Status.NOT_FOUND).build();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>org.springframework.cloud.netflix.eureka.server.InstanceRegistry</code>中的<code>95</code>行的<code>cancel()</code>方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(String appName, String serverId, <span class="keyword">boolean</span> isReplication)</span> </span>&#123;</span><br><span class="line">   handleCancelation(appName, serverId, isReplication);</span><br><span class="line">   <span class="comment">//调用父类中的cancel</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">super</span>.cancel(appName, serverId, isReplication);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl</code>中的<code>376</code>行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">final</span> String appName, <span class="keyword">final</span> String id,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">final</span> <span class="keyword">boolean</span> isReplication)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">super</span>.cancel(appName, id, isReplication)) &#123;</span><br><span class="line">            <span class="comment">//服务下线成功后，同步更新信息到其它Eureka Server节点</span></span><br><span class="line">            replicateToPeers(Action.Cancel, appName, id, <span class="keyword">null</span>, <span class="keyword">null</span>, isReplication);</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.expectedNumberOfRenewsPerMin &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// Since the client wants to cancel it, reduce the threshold (1 for 30 seconds, 2 for a minute)</span></span><br><span class="line">                    <span class="keyword">this</span>.expectedNumberOfRenewsPerMin = <span class="keyword">this</span>.expectedNumberOfRenewsPerMin - <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">this</span>.numberOfRenewsPerMinThreshold =</span><br><span class="line">                            (<span class="keyword">int</span>) (<span class="keyword">this</span>.expectedNumberOfRenewsPerMin * serverConfig.getRenewalPercentThreshold());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>4.在com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl中的<code>618</code>行，主要接口实现方式和register基本一致：首先更新自身Eureka Server中服务的状态，再同步到其它Eureka Server中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replicateToPeers</span><span class="params">(Action action, String appName, String id,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  InstanceInfo info <span class="comment">/* optional */</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  InstanceStatus newStatus <span class="comment">/* optional */</span>, <span class="keyword">boolean</span> isReplication)</span> </span>&#123;</span><br><span class="line">        Stopwatch tracer = action.getTimer().start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isReplication) &#123;</span><br><span class="line">                numberOfReplicationsLastMin.increment();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// If it is a replication already, do not replicate again as this will create a poison replication</span></span><br><span class="line">            <span class="keyword">if</span> (peerEurekaNodes == Collections.EMPTY_LIST || isReplication) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 同步把服务信息同步到其它的Eureka Server中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">final</span> PeerEurekaNode node : peerEurekaNodes.getPeerEurekaNodes()) &#123;</span><br><span class="line">                <span class="comment">// If the url represents this host, do not replicate to yourself.</span></span><br><span class="line">                <span class="keyword">if</span> (peerEurekaNodes.isThisMyUrl(node.getServiceUrl())) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//根据action做相应操作的同步</span></span><br><span class="line">                replicateInstanceActionsToPeers(action, appName, id, info, newStatus, node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            tracer.stop();</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>至此，Eureka服务续约源码分析结束，大家有兴趣可自行阅读。</p><h3 id="源码分析链接"><a href="#源码分析链接" class="headerlink" title="源码分析链接"></a>源码分析链接</h3><p> 其它源码分析链接:<br> Spring Cloud中@EnableEurekaClient源码分析:<br> <a href="http://xujin.org/sc/sc-enableEurekaClient-annonation/">http://xujin.org/sc/sc-enableEurekaClient-annonation/</a><br> Spring Cloud Eureka服务注册源码分析：<br> <a href="http://xujin.org/sc/sc-eureka-register/">http://xujin.org/sc/sc-eureka-register/</a><br> Spring Cloud Eureka服务续约(Renew)源码分析<br> <a href="http://xujin.org/sc/sc-eureka-renew/">http://xujin.org/sc/sc-eureka-renew/</a></p>]]></content>
      
      <categories>
          
          <category> Spring Cloud Eureka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Eureka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Eureka服务续约(Renew)源码分析</title>
      <link href="/sc/sc-eureka-renew/"/>
      <url>/sc/sc-eureka-renew/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:在本篇文章中主要对Eureka的Renew(服务续约)，从服务提供者发起续约请求开始分析，通过阅读源码和画时序图的方式，展示Eureka服务续约的整个生命周期。服务续约主要是把服务续约的信息更新到自身的Eureka Server中，然后再同步到其它Eureka Server中。</p><h2 id="1-Renew-服务续约"><a href="#1-Renew-服务续约" class="headerlink" title="1. Renew(服务续约)"></a>1. Renew(服务续约)</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>Renew（服务续约）操作由Service Provider定期调用，类似于heartbeat。目的是隔一段时间Service Provider调用接口，告诉Eureka Server它还活着没挂，不要把它T了。通俗的说就是它们两之间的心跳检测，避免服务提供者被剔除掉。<br>请参考:<a href="http://blog.xujin.org/sc/sc-eureka-mid/#名词解释" target="_blank" rel="noopener">Spring Cloud Eureka名词解释</a><br><a id="more"></a></p><h3 id="1-2-服务续约配置"><a href="#1-2-服务续约配置" class="headerlink" title="1.2 服务续约配置"></a>1.2 服务续约配置</h3><p>  Renew操作会在Service Provider定时发起，用来通知Eureka Server自己还活着。 这里有两个比较重要的配置需要如下，可以在Run之前配置。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.instance.leaseRenewalIntervalInSeconds</span><br></pre></td></tr></table></figure></p><p>  Renew频率。默认是<code>30秒</code>，也就是每30秒会向Eureka Server发起Renew操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.instance.leaseExpirationDurationInSeconds</span><br></pre></td></tr></table></figure></p><p> 服务失效时间。默认是<code>90秒</code>，也就是如果Eureka Server在90秒内没有接收到来自Service Provider的Renew操作，就会把<code>Service Provider剔除</code>。</p><h2 id="2-Renew源码分析"><a href="#2-Renew源码分析" class="headerlink" title="2. Renew源码分析"></a>2. Renew源码分析</h2><h3 id="2-1-服务提供者实现细节"><a href="#2-1-服务提供者实现细节" class="headerlink" title="2.1 服务提供者实现细节"></a>2.1 服务提供者实现细节</h3><p> 服务提供者发发起服务续约的时序图，如下图所示,大家先直观的看一下时序图，等阅读完源码再回顾一下。<br><img src="/images/spring-cloud-netflix/eureka/service-renew.png" alt="服务提供者发起续约时序图"></p><ol><li>在com.netflix.discovery.DiscoveryClient.initScheduledTasks()中的1272行，TimedSupervisorTask会定时发起服务续约，代码如下所示:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Heartbeat timer</span></span><br><span class="line">  scheduler.schedule(</span><br><span class="line">     <span class="keyword">new</span> TimedSupervisorTask(</span><br><span class="line">            <span class="string">"heartbeat"</span>,</span><br><span class="line">             scheduler,</span><br><span class="line">             heartbeatExecutor,</span><br><span class="line">             renewalIntervalInSecs,</span><br><span class="line">             TimeUnit.SECONDS,</span><br><span class="line">             expBackOffBound,</span><br><span class="line">              <span class="keyword">new</span> HeartbeatThread()</span><br><span class="line">            ),</span><br><span class="line">  renewalIntervalInSecs, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure></li></ol><p>2.在com.netflix.discovery.DiscoveryClient中的1393行，有一个<code>HeartbeatThread</code>线程发起续约操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartbeatThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//调用eureka-client中的renew</span></span><br><span class="line">            <span class="keyword">if</span> (renew()) &#123;</span><br><span class="line">                lastSuccessfulHeartbeatTimestamp = System.currentTimeMillis();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>renew()调用eureka-client-1.4.11.jarcom.netflix.discovery.DiscoveryClient中<code>829</code>行renew()发起<code>PUT Reset</code>请求，调用com.netflix.eureka.resources.InstanceResource中的renewLease()续约。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Renew with the eureka service by making the appropriate REST call</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">renew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       EurekaHttpResponse&lt;InstanceInfo&gt; httpResponse;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           httpResponse = eurekaTransport.registrationClient.sendHeartBeat(instanceInfo.getAppName(), instanceInfo.getId(), instanceInfo, <span class="keyword">null</span>);</span><br><span class="line">           logger.debug(<span class="string">"&#123;&#125; - Heartbeat status: &#123;&#125;"</span>, PREFIX + appPathIdentifier, httpResponse.getStatusCode());</span><br><span class="line">           <span class="keyword">if</span> (httpResponse.getStatusCode() == <span class="number">404</span>) &#123;</span><br><span class="line">               REREGISTER_COUNTER.increment();</span><br><span class="line">               logger.info(<span class="string">"&#123;&#125; - Re-registering apps/&#123;&#125;"</span>, PREFIX + appPathIdentifier, instanceInfo.getAppName());</span><br><span class="line">               <span class="keyword">return</span> register();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> httpResponse.getStatusCode() == <span class="number">200</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">           logger.error(<span class="string">"&#123;&#125; - was unable to send heartbeat!"</span>, PREFIX + appPathIdentifier, e);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-2-Netflix中的Eureka-Core实现细节"><a href="#2-2-Netflix中的Eureka-Core实现细节" class="headerlink" title="2.2 Netflix中的Eureka Core实现细节"></a>2.2 Netflix中的Eureka Core实现细节</h3><p>   NetFlix中Eureka Core中的服务续约时序图，如下图所示。<br>  <img src="/images/spring-cloud-netflix/eureka/eureka-renew.png" alt="服务续约时序图"></p><ol><li><p>打开<code>com.netflix.eureka.resources.InstanceResource</code>中的<code>106</code>行的<code>renewLease()</code>方法，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> PeerAwareInstanceRegistry registry</span><br><span class="line"><span class="meta">@PUT</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">renewLease</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @HeaderParam(PeerEurekaNode.HEADER_REPLICATION)</span> String isReplication,</span></span><br><span class="line"><span class="function">        @<span class="title">QueryParam</span><span class="params">(<span class="string">"overriddenstatus"</span>)</span> String overriddenStatus,</span></span><br><span class="line"><span class="function">        @<span class="title">QueryParam</span><span class="params">(<span class="string">"status"</span>)</span> String status,</span></span><br><span class="line"><span class="function">        @<span class="title">QueryParam</span><span class="params">(<span class="string">"lastDirtyTimestamp"</span>)</span> String lastDirtyTimestamp) </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isFromReplicaNode = <span class="string">"true"</span>.equals(isReplication);</span><br><span class="line">    <span class="comment">//调用</span></span><br><span class="line">    <span class="keyword">boolean</span> isSuccess = registry.renew(app.getName(), id, isFromReplicaNode);</span><br><span class="line">    <span class="comment">//其余省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>点开registry.renew(app.getName(), id, isFromReplicaNode);我们可以看到，调用了<code>org.springframework.cloud.netflix.eureka.server.InstanceRegistry</code>中的<code>renew（）</code>方法，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">renew</span><span class="params">(<span class="keyword">final</span> String appName, <span class="keyword">final</span> String serverId,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">boolean</span> isReplication)</span> </span>&#123;</span><br><span class="line">log(<span class="string">"renew "</span> + appName + <span class="string">" serverId "</span> + serverId + <span class="string">", isReplication &#123;&#125;"</span></span><br><span class="line">+ isReplication);</span><br><span class="line">List&lt;Application&gt; applications = getSortedApplications();</span><br><span class="line"><span class="keyword">for</span> (Application input : applications) &#123;</span><br><span class="line"><span class="keyword">if</span> (input.getName().equals(appName)) &#123;</span><br><span class="line">InstanceInfo instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (InstanceInfo info : input.getInstances()) &#123;</span><br><span class="line"><span class="keyword">if</span> (info.getHostName().equals(serverId)) &#123;</span><br><span class="line">instance = info;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">publishEvent(<span class="keyword">new</span> EurekaInstanceRenewedEvent(<span class="keyword">this</span>, appName, serverId,</span><br><span class="line">instance, isReplication));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//调用com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl中的renew方法</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.renew(appName, serverId, isReplication);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>3.从<code>super.renew()</code>看到调用了父类中的<code>com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl</code>中<code>420</code>行的<code>renew()</code>方法，代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">renew</span><span class="params">(<span class="keyword">final</span> String appName, <span class="keyword">final</span> String id, <span class="keyword">final</span> <span class="keyword">boolean</span> isReplication)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//服务续约成功，</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">super</span>.renew(appName, id, isReplication)) &#123;</span><br><span class="line">            <span class="comment">//然后replicateToPeers同步其它Eureka Server中的数据</span></span><br><span class="line">            replicateToPeers(Action.Heartbeat, appName, id, <span class="keyword">null</span>, <span class="keyword">null</span>, isReplication);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.1 从上面代码中<code>super.renew(appName, id, isReplication)</code>可以看出调用的是com.netflix.eureka.registry.AbstractInstanceRegistry中<code>345</code>行的renew()方法，代码如下所示<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">renew</span><span class="params">(String appName, String id, <span class="keyword">boolean</span> isReplication)</span> </span>&#123;</span><br><span class="line">      RENEW.increment(isReplication);</span><br><span class="line">      Map&lt;String, Lease&lt;InstanceInfo&gt;&gt; gMap = registry.get(appName);</span><br><span class="line">      Lease&lt;InstanceInfo&gt; leaseToRenew = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (gMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">          leaseToRenew = gMap.get(id);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (leaseToRenew == <span class="keyword">null</span>) &#123;</span><br><span class="line">          RENEW_NOT_FOUND.increment(isReplication);</span><br><span class="line">          logger.warn(<span class="string">"DS: Registry: lease doesn't exist, registering resource: &#123;&#125; - &#123;&#125;"</span>, appName, id);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          InstanceInfo instanceInfo = leaseToRenew.getHolder();</span><br><span class="line">          <span class="keyword">if</span> (instanceInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="comment">// touchASGCache(instanceInfo.getASGName());</span></span><br><span class="line">              InstanceStatus overriddenInstanceStatus = <span class="keyword">this</span>.getOverriddenInstanceStatus(</span><br><span class="line">                      instanceInfo, leaseToRenew, isReplication);</span><br><span class="line">              <span class="keyword">if</span> (overriddenInstanceStatus == InstanceStatus.UNKNOWN) &#123;</span><br><span class="line">                  logger.info(<span class="string">"Instance status UNKNOWN possibly due to deleted override for instance &#123;&#125;"</span></span><br><span class="line">                          + <span class="string">"; re-register required"</span>, instanceInfo.getId());</span><br><span class="line">                  RENEW_NOT_FOUND.increment(isReplication);</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (!instanceInfo.getStatus().equals(overriddenInstanceStatus)) &#123;</span><br><span class="line">                  Object[] args = &#123;</span><br><span class="line">                          instanceInfo.getStatus().name(),</span><br><span class="line">                          instanceInfo.getOverriddenStatus().name(),</span><br><span class="line">                          instanceInfo.getId()</span><br><span class="line">                  &#125;;</span><br><span class="line">                  logger.info(</span><br><span class="line">                          <span class="string">"The instance status &#123;&#125; is different from overridden instance status &#123;&#125; for instance &#123;&#125;. "</span></span><br><span class="line">                                  + <span class="string">"Hence setting the status to overridden status"</span>, args);</span><br><span class="line">                  instanceInfo.setStatus(overriddenInstanceStatus);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          renewsLastMin.increment();</span><br><span class="line">          leaseToRenew.renew();</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>其中 <code>leaseToRenew.renew()</code>是调用com.netflix.eureka.lease.Lease<t>中的<code>62</code>行的renew()方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Renew the lease, use renewal duration if it was specified by the</span></span><br><span class="line"><span class="comment"> * associated &#123;<span class="doctag">@link</span> T&#125; during registration, otherwise default duration is</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #DEFAULT_DURATION_IN_SECS&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">renew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lastUpdateTimestamp = System.currentTimeMillis() + duration;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></t></p><p>3.2 replicateToPeers(Action.Heartbeat, appName, id, null, null, isReplication);调用自身的<code>replicateToPeers()</code>方法，在com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl中的<code>618</code>行，主要接口实现方式和register基本一致：首先更新自身Eureka Server中服务的状态，再同步到其它Eureka Server中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replicateToPeers</span><span class="params">(Action action, String appName, String id,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  InstanceInfo info <span class="comment">/* optional */</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  InstanceStatus newStatus <span class="comment">/* optional */</span>, <span class="keyword">boolean</span> isReplication)</span> </span>&#123;</span><br><span class="line">        Stopwatch tracer = action.getTimer().start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isReplication) &#123;</span><br><span class="line">                numberOfReplicationsLastMin.increment();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// If it is a replication already, do not replicate again as this will create a poison replication</span></span><br><span class="line">            <span class="keyword">if</span> (peerEurekaNodes == Collections.EMPTY_LIST || isReplication) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 同步把续约信息同步到其它的Eureka Server中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">final</span> PeerEurekaNode node : peerEurekaNodes.getPeerEurekaNodes()) &#123;</span><br><span class="line">                <span class="comment">// If the url represents this host, do not replicate to yourself.</span></span><br><span class="line">                <span class="keyword">if</span> (peerEurekaNodes.isThisMyUrl(node.getServiceUrl())) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//根据action做相应操作的同步</span></span><br><span class="line">                replicateInstanceActionsToPeers(action, appName, id, info, newStatus, node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            tracer.stop();</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>至此，Eureka服务续约源码分析结束，大家有兴趣可自行阅读。</p><h3 id="2-3-源码分析链接"><a href="#2-3-源码分析链接" class="headerlink" title="2.3 源码分析链接"></a>2.3 源码分析链接</h3><p> 其它源码分析链接:<br> Spring Cloud中@EnableEurekaClient源码分析:<br> <a href="http://blog.xujin.org/sc/sc-enableEurekaClient-annonation/" target="_blank" rel="noopener">http://blog.xujin.org/sc/sc-enableEurekaClient-annonation/</a><br> Spring Cloud Eureka服务注册源码分析：<br> <a href="http://blog.xujin.org/sc/sc-eureka-register/" target="_blank" rel="noopener">http://blog.xujin.org/sc/sc-eureka-register/</a></p>]]></content>
      
      <categories>
          
          <category> Spring Cloud Eureka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Eureka </tag>
            
            <tag> Spring Cloud 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud中@EnableEurekaClient源码分析</title>
      <link href="/sc/sc-enableEurekaClient-annonation/"/>
      <url>/sc/sc-enableEurekaClient-annonation/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:在这篇文章中主要介绍一下Spring Cloud中的@EnableEurekaClient注解，从源码的角度分析是如何work的，让大家能了解Spring Cloud如何通过@EnableEurekaClient注解对NetFlix Eureka Client进行封装为它所用。</p><h2 id="NetFlix-Eureka-client简介"><a href="#NetFlix-Eureka-client简介" class="headerlink" title="NetFlix Eureka client简介"></a>NetFlix Eureka client简介</h2><h3 id="NetFlix-Eureka-client"><a href="#NetFlix-Eureka-client" class="headerlink" title="NetFlix Eureka client"></a>NetFlix Eureka client</h3><p><code>Eureka client</code> 负责与<code>Eureka Server</code> 配合向外提供注册与发现服务接口。首先看下eureka client是怎么定义，Netflix的 eureka client的行为在<code>LookupService</code>中定义，Lookup service for finding active instances，定义了，从outline中能看到起“规定”了如下几个最基本的方法。<br>服务发现必须实现的基本类：com.netflix.discovery.shared.LookupService<t>，可以自行查看源码。</t></p><h2 id="Eureka-client与Spring-Cloud类关系"><a href="#Eureka-client与Spring-Cloud类关系" class="headerlink" title="Eureka client与Spring Cloud类关系"></a>Eureka client与Spring Cloud类关系</h2><p> Eureka client与Spring Cloud Eureka Client类图，如下所示:<br><img src="/images/spring-cloud-netflix/eureka/anoation/class.png" alt="类关系图"><br>在上图中，我加了前缀，带有<code>S</code>的是Spring Cloud封装的，带有<code>N</code>是NetFlix原生的。<br><a id="more"></a></p><ol><li>org.springframework.cloud.netflix.eureka.EurekaDiscoveryClient中<code>49</code>行的eurekaClient就是com.netflix.discovery.EurekaClient，代码如下所示:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaDiscoveryClient</span> <span class="keyword">implements</span> <span class="title">DiscoveryClient</span> </span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTION = <span class="string">"Spring Cloud Eureka Discovery Client"</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> EurekaInstanceConfig config;</span><br><span class="line"> <span class="comment">// Netflix中的Eureka Client</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> EurekaClient eurekaClient;</span><br><span class="line"> <span class="comment">//其余省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><code>Tips</code>:org.springframework.cloud.netflix.eureka.EurekaDiscoveryClient实现了DiscoveryClient，并依赖于com.netflix.discovery.EurekaClient</p></blockquote><ol><li><p>点开com.netflix.discovery.EurekaClient查看代码，可以看出EurekaClient继承了LookupService并实现了EurekaClient接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImplementedBy</span>(DiscoveryClient.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EurekaClient</span> <span class="keyword">extends</span> <span class="title">LookupService</span> </span>&#123;</span><br><span class="line">  <span class="comment">//其余省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>com.netflix.discovery.DiscoveryClient是netflix使用的客户端，从其class的注释可以看到他主要做这几件事情：<br>a) Registering the instance with Eureka Server<br>b) Renewalof the lease with Eureka Server<br>c) Cancellation of the lease from Eureka Server during shutdown</p></li></ol><p>其中<code>com.netflix.discovery.DiscoveryClient</code>实现了<code>com.netflix.discovery.EurekaClient</code>,而spring Cloud中的<code>org.springframework.cloud.netflix.eureka.EurekaDiscoveryClient</code>，依赖于<code>com.netflix.discovery.EurekaClient</code>，因此Spring Cloud与NetFlix的关系由此联系到一起。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscoveryClient</span> <span class="keyword">implements</span> <span class="title">EurekaClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(DiscoveryClient.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constants</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HTTP_X_DISCOVERY_ALLOW_REDIRECT = <span class="string">"X-Discovery-AllowRedirect"</span>;</span><br><span class="line">    <span class="comment">//其余省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="EnableEurekaClient注解入口分析"><a href="#EnableEurekaClient注解入口分析" class="headerlink" title="@EnableEurekaClient注解入口分析"></a>@EnableEurekaClient注解入口分析</h2><p>   在上面小节中，理清了<code>NetFlix Eureka</code>与<code>Spring cloud</code>中类的依赖关系，下面将以@EnableEurekaClient为入口，分析主要调用链中的类和方法。</p><h3 id="EnableEurekaClient使用"><a href="#EnableEurekaClient使用" class="headerlink" title="@EnableEurekaClient使用"></a>@EnableEurekaClient使用</h3><ol><li>用过spring cloud的同学都知道，使用@EnableEurekaClient就能简单的开启Eureka Client中的功能，如下代码所示。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloudEurekaClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> SpringApplicationBuilder(CloudEurekaClientApplication.class).web(<span class="keyword">true</span>).run(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过@EnableEurekaClient这个简单的注解，在spring cloud应用启动的时候，就可以把EurekaDiscoveryClient注入，继而使用NetFlix提供的Eureka client。</p><ol><li><p>打开EnableEurekaClient这个类，可以看到这个自定义的annotation @EnableEurekaClient里面没有内容。它的作用就是开启Eureka discovery的配置，正是通过这个标记，autoconfiguration就可以加载相关的Eureka类。那我们看下它是怎么做到的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableEurekaClient &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在上述代码中，我们看到，EnableEurekaClient上面加入了另外一个注解@EnableDiscoveryClient，看看这个注解的代码如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation to enable a DiscoveryClient implementation.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(EnableDiscoveryClientImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableDiscoveryClient &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个注解import了EnableDiscoveryClientImportSelector.class这样一个类，其实就是通过这个类来<code>加载</code>需要用到的bean。<br>点开EnableDiscoveryClientImportSelector类，如下代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order</span>(Ordered.LOWEST_PRECEDENCE - <span class="number">100</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableDiscoveryClientImportSelector</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">SpringFactoryImportSelector</span>&lt;<span class="title">EnableDiscoveryClient</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RelaxedPropertyResolver(getEnvironment()).getProperty(</span><br><span class="line"><span class="string">"spring.cloud.discovery.enabled"</span>, Boolean.class, Boolean.TRUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">hasDefaultFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>看到这里有覆盖了<code>父类SpringFactoryImportSelector</code>的一个方法<code>isEnabled</code>，注意，默认是TRUE，也就是只要import了这个配置，就会enable。</p></blockquote><p>在其父类<code>org.springframework.cloud.commons.util.SpringFactoryImportSelector</code><br>的<code>String[] selectImports(AnnotationMetadata metadata)</code>方法中正是根据这个标记类判定是否加载如下定义的类。在源码第59行，局部代码如下所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata metadata) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isEnabled()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">AnnotationAttributes attributes = AnnotationAttributes.fromMap(</span><br><span class="line">metadata.getAnnotationAttributes(<span class="keyword">this</span>.annotationClass.getName(), <span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">Assert.notNull(attributes, <span class="string">"No "</span> + getSimpleName() + <span class="string">" attributes found. Is "</span></span><br><span class="line">+ metadata.getClassName() + <span class="string">" annotated with @"</span> + getSimpleName() + <span class="string">"?"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find all possible auto configuration classes, filtering duplicates</span></span><br><span class="line">List&lt;String&gt; factories = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">new</span> LinkedHashSet&lt;&gt;(SpringFactoriesLoader</span><br><span class="line">.loadFactoryNames(<span class="keyword">this</span>.annotationClass, <span class="keyword">this</span>.beanClassLoader)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (factories.isEmpty() &amp;&amp; !hasDefaultFactory()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Annotation @"</span> + getSimpleName()</span><br><span class="line">+ <span class="string">" found, but there are no implementations. Did you forget to include a starter?"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (factories.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// there should only ever be one DiscoveryClient, but there might be more than</span></span><br><span class="line"><span class="comment">// one factory</span></span><br><span class="line">log.warn(<span class="string">"More than one implementation "</span> + <span class="string">"of @"</span> + getSimpleName()</span><br><span class="line">+ <span class="string">" (now relying on @Conditionals to pick one): "</span> + factories);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> factories.toArray(<span class="keyword">new</span> String[factories.size()]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在源码中70-71行，即在<br>org.springframework.core.io.support.SpringFactoriesLoader 中的109行的loadFactoryNames(Class&lt;?&gt; factoryClass, ClassLoader classLoader)方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">String factoryClassName = factoryClass.getName();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">URL url = urls.nextElement();</span><br><span class="line">Properties properties = PropertiesLoaderUtils.loadProperties(<span class="keyword">new</span> UrlResource(url));</span><br><span class="line">String factoryClassNames = properties.getProperty(factoryClassName);</span><br><span class="line">result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load ["</span> + factoryClass.getName() +</span><br><span class="line"><span class="string">"] factories from location ["</span> + FACTORIES_RESOURCE_LOCATION + <span class="string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>实际调用<code>loadFactoryNames</code>其实加载<code>META-INF/spring.factories</code>下的class。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">* The location to look for factories.</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Can be present in multiple JAR files.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACTORIES_RESOURCE_LOCATION = <span class="string">"META-INF/spring.factories"</span>;</span><br></pre></td></tr></table></figure></li></ol><p>而在spring-cloud-netflix-eureka-client\src\main\resources\META-INF\spring.factories中配置，用于加载一系列配置信息和Dependences Bean<br><img src="/images/spring-cloud-netflix/eureka/anoation/1.png" alt="spring.factories"><br>可以看到<code>EnableAutoConfiguration</code>的包含了<code>EurekaClientConfigServerAutoConfiguration</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.cloud.netflix.eureka.config.EurekaClientConfigServerAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.eureka.config.EurekaDiscoveryClientConfigServiceAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.ribbon.eureka.RibbonEurekaAutoConfiguration</span><br><span class="line"></span><br><span class="line">org.springframework.cloud.bootstrap.BootstrapConfiguration=\</span><br><span class="line">org.springframework.cloud.netflix.eureka.config.EurekaDiscoveryClientConfigServiceBootstrapConfiguration</span><br><span class="line"></span><br><span class="line">org.springframework.cloud.client.discovery.EnableDiscoveryClient=\</span><br><span class="line">org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration</span><br></pre></td></tr></table></figure></p><p>打开org.springframework.cloud.netflix.eureka.config.EurekaClientConfigServerAutoConfiguration可以看到<br>EurekaClientAutoConfiguration具体的注入信息。</p><p>具体@EnableEurekaClien注解开启之后，服务启动后，是服务怎么注册的请参考，下面链接：<br><a href="http://blog.xujin.org/sc/sc-eureka-register/" target="_blank" rel="noopener">http://blog.xujin.org/sc/sc-eureka-register/</a></p><h2 id="其它源码分析链接"><a href="#其它源码分析链接" class="headerlink" title="其它源码分析链接"></a>其它源码分析链接</h2><p> Spring Cloud中@EnableEurekaClient源码分析:<br> <a href="http://blog.xujin.org/sc/sc-enableEurekaClient-annonation/" target="_blank" rel="noopener">http://blog.xujin.org/sc/sc-enableEurekaClient-annonation/</a><br> Spring Cloud Eureka服务注册源码分析：<br> <a href="http://blog.xujin.org/sc/sc-eureka-register/" target="_blank" rel="noopener">http://blog.xujin.org/sc/sc-eureka-register/</a><br> Spring Cloud Eureka服务续约(Renew)源码分析<br> <a href="http://blog.xujin.org/sc/sc-eureka-renew/" target="_blank" rel="noopener">http://blog.xujin.org/sc/sc-eureka-renew/</a><br> Spring Cloud Eureka服务下线(Cancel)源码分析<br> <a href="http://blog.xujin.org/sc/sc-eureka-cancle/" target="_blank" rel="noopener">http://blog.xujin.org/sc/sc-eureka-cancle/</a></p>]]></content>
      
      <categories>
          
          <category> Spring Cloud Eureka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Eureka </tag>
            
            <tag> Spring Cloud 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Java Signal将应用程序从LVS中摘除</title>
      <link href="/ex/java-singal-linux/"/>
      <url>/ex/java-singal-linux/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本文主要介绍了，如何使用Java Signal和SignalHandler实现，通过Linux 命令实现kill -s BUS pid和kill -s USR2 pid实现不kill应用进程，把应用程序从LVS中摘除。而不是通过Reset 请求调用。由于只允许本机操作，所以可选方案三种:1.reset 调用更改Status，2.Linux 信号量传递给Java程序 3.配置中心或者XX管理系统后台权限管理，调用reset服务。从安全性和快速解决需求的角度考虑使用Linux 信号量传递给Java程序方案。</p><h2 id="Java-Signal-概述"><a href="#Java-Signal-概述" class="headerlink" title="Java Signal 概述"></a>Java Signal 概述</h2><h3 id="信号简介"><a href="#信号简介" class="headerlink" title="信号简介"></a>信号简介</h3><p>信号是在软件层次上对中断机制的一种模拟，在原理上，一个进程收到一个信号与处理器收到一个中断请求可以说是一样的。通俗来讲，信号就是进程间的一种异步通信机制。<br>典型的例子:<code>kill -s SIGKILL pid</code> (即kill -9 pid) 立即杀死指定pid的进程。<br>在上面这个例子中，SIGKILL就是往pid进程发送的信号。<br><a id="more"></a></p><h3 id="平台相关性"><a href="#平台相关性" class="headerlink" title="平台相关性"></a>平台相关性</h3><p> 信号具有平台相关性，不同平台下能使用的信号种类是有差异的。<br>在Linux下支持的信号(对比信号列表查看描述)<br>　SEGV, ILL, FPE, BUS, SYS, CPU, FSZ, ABRT, INT, TERM, HUP, USR1, USR2, QUIT, BREAK, TRAP, PIPE<br>在Windows下支持的信号<br>　SEGV, ILL, FPE, ABRT, INT, TERM, BREAK</p><h3 id="信号选择"><a href="#信号选择" class="headerlink" title="信号选择"></a>信号选择</h3><p>   为了不干扰正常信号的运作，又能模拟Java异步通知，我们需要先选定一种特殊的信号。<br>通过查看信号列表上的描述，发现 SIGUSR1 和 SIGUSR2 是允许用户自定义的信号。<br>那么选择它们，理论上就不会影响正常功能了。这里我选用了<code>BUS</code>和<code>USR2</code>作为传递信号。原因是USR1在Linux系统下面，很大可能性会被其它应用占用。在本次实践中，就是被占用导致<code>handle</code>出现异常。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><h3 id="JDK-API实现调研"><a href="#JDK-API实现调研" class="headerlink" title="JDK API实现调研"></a>JDK API实现调研</h3><p>  Sun为我们提供了2个方便安装和替换信号处理器的工具类。通过下面的api可以快速实现。<br>  sun.misc.Signal<br>  sun.misc.SignalHandler</p><h3 id="JanusSignalHandler的code"><a href="#JanusSignalHandler的code" class="headerlink" title="JanusSignalHandler的code"></a>JanusSignalHandler的code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JanusSignalHandler</span> <span class="keyword">implements</span> <span class="title">SignalHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(JanusSignalHandler.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Signal signal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != signal) &#123;</span><br><span class="line">            signalHandle(signal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">signalHandle</span><span class="params">(Signal sn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sn.getName().equals(<span class="string">"BUS"</span>)) &#123;</span><br><span class="line">            JanusNettyServer.online = <span class="keyword">false</span>;</span><br><span class="line">            logger.info(<span class="string">"Signal name is:SIGBUS,online is:false"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sn.getName().equals(<span class="string">"USR2"</span>)) &#123;</span><br><span class="line">            JanusNettyServer.online = <span class="keyword">true</span>;</span><br><span class="line">            logger.info(<span class="string">"Signal name is:SIGUSR2,online is:true"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="addSingalHook的Code"><a href="#addSingalHook的Code" class="headerlink" title="addSingalHook的Code"></a>addSingalHook的Code</h3><p>   应用程序启动的时候，调用此方法install signals<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addSingalHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JanusSignalHandler janusSignalHandler = <span class="keyword">new</span> JanusSignalHandler();</span><br><span class="line">            <span class="comment">// install signals</span></span><br><span class="line">            Signal.handle(<span class="keyword">new</span> Signal(<span class="string">"BUS"</span>), janusSignalHandler);</span><br><span class="line">            Signal.handle(<span class="keyword">new</span> Signal(<span class="string">"USR2"</span>), janusSignalHandler);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"exception:[&#123;&#125;]"</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="部署到Linux程序中Test"><a href="#部署到Linux程序中Test" class="headerlink" title="部署到Linux程序中Test"></a>部署到Linux程序中Test</h3><p>执行 kill -s BUS pid  从LVS中摘除<br>执行 kill -s USR2 pid 加入LVS中</p><p><img src="/images/project/20161104/test.png" alt="linus中测试"></p><p>健康检查result:<br><img src="/images/project/20161104/offline.png" alt="从LVS中摘除"></p><p><img src="/images/project/20161104/online.png" alt="加入LVS中 "></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>   本文主要介绍了，如何使用Java Signa和SignalHandler实现，通过Linux 命令实现kill -s BUS pid和kill -s USR2 pid实现不kill应用进程，把应用程序从LVS中摘除。但是在实践过程中，需要选对用户可以自定义的信号量。不然，会误杀应用程序本身。</p>]]></content>
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 项目经验 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Eureka服务注册源码分析</title>
      <link href="/sc/sc-eureka-register/"/>
      <url>/sc/sc-eureka-register/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:在上一篇中，介绍了Eureka的相关的知识，解释了Eureka为什么适合做服务发现和注册。接下来，在本篇文章将通过源码分析的方式，看一下Eureka是怎么work的。本章主要介绍Eureka的服务注册。那eureka client如何将本地服务的注册信息发送到远端的注册服务器eureka server上。通过下面的源码分析，看出Eureka Client的定时任务调用Eureka Server的REST接口，而Eureka接收到调用请求后会处理服务的注册以及Eureka Server中的数据同步的问题。</p><h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><p> 服务注册，想必大家并不陌生，就是服务提供者启动的时候，把自己提供的服务信息，例如 服务名，IP，端口号，版本号等信息注册到注册中心，比如注册到ZK中。那eureka client如何将本地服务的注册信息发送到远端的注册服务器eureka server上。通过下面的源码分析，看出服务注册可以认为是Eureka client自己完成，不需要服务本身来关心。</p><h3 id="Eureka-Client的定时任务调用Eureka-Server的提供接口"><a href="#Eureka-Client的定时任务调用Eureka-Server的提供接口" class="headerlink" title="Eureka Client的定时任务调用Eureka Server的提供接口"></a>Eureka Client的定时任务调用Eureka Server的提供接口</h3><p>实现思路其实也挺简单，在com.netflix.discovery.DiscoveryClient启动的时候，会初始化一个定时任务，定时的把本地的服务配置信息，即需要注册到远端的服务信息自动刷新到注册服务器上。<br>首先看一下Eureka的代码，在spring-cloud-netflix-eureka-server工程中可以找到这个依赖eureka-client-1.4.11.jar查看代码可以看到，<br>com.netflix.discovery.DiscoveryClient.java中的1240行可以看到Initializes all scheduled tasks，在1277行，可以看到InstanceInfoReplicator定时任务。<br><a id="more"></a></p><ol><li>在DiscoveryClient中初始化一个InstanceInfoReplicator，其实里面封装了以定时任务。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initializes all scheduled tasks.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initScheduledTasks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (clientConfig.shouldFetchRegistry()) &#123;</span><br><span class="line">            <span class="comment">// registry cache refresh timer</span></span><br><span class="line">            <span class="keyword">int</span> registryFetchIntervalSeconds = clientConfig.getRegistryFetchIntervalSeconds();</span><br><span class="line">            <span class="keyword">int</span> expBackOffBound = clientConfig.getCacheRefreshExecutorExponentialBackOffBound();</span><br><span class="line">            scheduler.schedule(</span><br><span class="line">                    <span class="keyword">new</span> TimedSupervisorTask(</span><br><span class="line">                            <span class="string">"cacheRefresh"</span>,</span><br><span class="line">                            scheduler,</span><br><span class="line">                            cacheRefreshExecutor,</span><br><span class="line">                            registryFetchIntervalSeconds,</span><br><span class="line">                            TimeUnit.SECONDS,</span><br><span class="line">                            expBackOffBound,</span><br><span class="line">                            <span class="keyword">new</span> CacheRefreshThread()</span><br><span class="line">                    ),</span><br><span class="line">                    registryFetchIntervalSeconds, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clientConfig.shouldRegisterWithEureka()) &#123;</span><br><span class="line">            <span class="keyword">int</span> renewalIntervalInSecs = instanceInfo.getLeaseInfo().getRenewalIntervalInSecs();</span><br><span class="line">            <span class="keyword">int</span> expBackOffBound = clientConfig.getHeartbeatExecutorExponentialBackOffBound();</span><br><span class="line">            logger.info(<span class="string">"Starting heartbeat executor: "</span> + <span class="string">"renew interval is: "</span> + renewalIntervalInSecs);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Heartbeat timer</span></span><br><span class="line">            scheduler.schedule(</span><br><span class="line">                    <span class="keyword">new</span> TimedSupervisorTask(</span><br><span class="line">                            <span class="string">"heartbeat"</span>,</span><br><span class="line">                            scheduler,</span><br><span class="line">                            heartbeatExecutor,</span><br><span class="line">                            renewalIntervalInSecs,</span><br><span class="line">                            TimeUnit.SECONDS,</span><br><span class="line">                            expBackOffBound,</span><br><span class="line">                            <span class="keyword">new</span> HeartbeatThread()</span><br><span class="line">                    ),</span><br><span class="line">                    renewalIntervalInSecs, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// InstanceInfo replicator</span></span><br><span class="line">            <span class="comment">/**************************封装了定时任务**********************************/</span></span><br><span class="line">            instanceInfoReplicator = <span class="keyword">new</span> InstanceInfoReplicator(</span><br><span class="line">                    <span class="keyword">this</span>,</span><br><span class="line">                    instanceInfo,</span><br><span class="line">                    clientConfig.getInstanceInfoReplicationIntervalSeconds(),</span><br><span class="line">                    <span class="number">2</span>); <span class="comment">// burstSize</span></span><br><span class="line"></span><br><span class="line">            statusChangeListener = <span class="keyword">new</span> ApplicationInfoManager.StatusChangeListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"statusChangeListener"</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(StatusChangeEvent statusChangeEvent)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (InstanceStatus.DOWN == statusChangeEvent.getStatus() ||</span><br><span class="line">                            InstanceStatus.DOWN == statusChangeEvent.getPreviousStatus()) &#123;</span><br><span class="line">                        <span class="comment">// log at warn level if DOWN was involved</span></span><br><span class="line">                        logger.warn(<span class="string">"Saw local status change event &#123;&#125;"</span>, statusChangeEvent);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        logger.info(<span class="string">"Saw local status change event &#123;&#125;"</span>, statusChangeEvent);</span><br><span class="line">                    &#125;</span><br><span class="line">                    instanceInfoReplicator.onDemandUpdate();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (clientConfig.shouldOnDemandUpdateStatusChange()) &#123;</span><br><span class="line">                applicationInfoManager.registerStatusChangeListener(statusChangeListener);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//点击可以查看start方法</span></span><br><span class="line">            instanceInfoReplicator.start(clientConfig.getInitialInstanceInfoReplicationIntervalSeconds());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"Not registering with Eureka server per configuration"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>2.以initialDelayMs为间隔调用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">int</span> initialDelayMs)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (started.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">           instanceInfo.setIsDirty();  <span class="comment">// for initial register</span></span><br><span class="line">           Future next = scheduler.schedule(<span class="keyword">this</span>, initialDelayMs, TimeUnit.SECONDS);</span><br><span class="line">           scheduledPeriodicRef.set(next);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.ScheduledExecutorService的task的具体业务定义在com.netflix.discovery.InstanceInfoReplicator.run()中，也就是InstanceInfoReplicator中的98-113行，可以看到调用了了client的register方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           discoveryClient.refreshInstanceInfo();</span><br><span class="line"></span><br><span class="line">           Long dirtyTimestamp = instanceInfo.isDirtyWithTime();</span><br><span class="line">           <span class="keyword">if</span> (dirtyTimestamp != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">//客户端发送hhtp注册请求的真正入口</span></span><br><span class="line">               discoveryClient.register();</span><br><span class="line">               instanceInfo.unsetIsDirty(dirtyTimestamp);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">           logger.warn(<span class="string">"There was a problem with the instance info replicator"</span>, t);</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           Future next = scheduler.schedule(<span class="keyword">this</span>, replicationIntervalSeconds, TimeUnit.SECONDS);</span><br><span class="line">           scheduledPeriodicRef.set(next);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.com.netflix.discovery.DiscoveryClient中的 register()方法，大概在811行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register with the eureka service by making the appropriate REST call.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">register</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    logger.info(PREFIX + appPathIdentifier + <span class="string">": registering service..."</span>);</span><br><span class="line">    EurekaHttpResponse&lt;Void&gt; httpResponse;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//Eureka Client客户端，调用Eureka服务端的入口</span></span><br><span class="line">        httpResponse = eurekaTransport.registrationClient.register(instanceInfo);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.warn(<span class="string">"&#123;&#125; - registration failed &#123;&#125;"</span>, PREFIX + appPathIdentifier, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(<span class="string">"&#123;&#125; - registration status: &#123;&#125;"</span>, PREFIX + appPathIdentifier, httpResponse.getStatusCode());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> httpResponse.getStatusCode() == <span class="number">204</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Eureka-server端接到请求后的处理"><a href="#Eureka-server端接到请求后的处理" class="headerlink" title="Eureka server端接到请求后的处理"></a>Eureka server端接到请求后的处理</h3><p>打开spring-cloud-netflix-eureka-server工程或spring-cloud-netflix-eureka-client过程，找到相应的maven依赖jar，如下图所示<br><img src="/images/spring-cloud-netflix/eureka/2016-11-01_223409.png" alt="Eureka中register入口"><br> 1.Eureka server服务端请求入口<br>ApplicationResource.java文件中第183行，如下所示，可以看出Eureka是通过http post的方式去服务注册<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@POST</span></span><br><span class="line">    <span class="meta">@Consumes</span>(&#123;<span class="string">"application/json"</span>, <span class="string">"application/xml"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">addInstance</span><span class="params">(InstanceInfo info,</span></span></span><br><span class="line"><span class="function"><span class="params">                                @HeaderParam(PeerEurekaNode.HEADER_REPLICATION)</span> String isReplication) </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"Registering instance &#123;&#125; (replication=&#123;&#125;)"</span>, info.getId(), isReplication);</span><br><span class="line">        <span class="comment">// validate that the instanceinfo contains all the necessary required fields</span></span><br><span class="line">        <span class="keyword">if</span> (isBlank(info.getId())) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.status(<span class="number">400</span>).entity(<span class="string">"Missing instanceId"</span>).build();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isBlank(info.getHostName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.status(<span class="number">400</span>).entity(<span class="string">"Missing hostname"</span>).build();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isBlank(info.getAppName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.status(<span class="number">400</span>).entity(<span class="string">"Missing appName"</span>).build();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!appName.equals(info.getAppName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.status(<span class="number">400</span>).entity(<span class="string">"Mismatched appName, expecting "</span> + appName + <span class="string">" but was "</span> + info.getAppName()).build();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (info.getDataCenterInfo() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.status(<span class="number">400</span>).entity(<span class="string">"Missing dataCenterInfo"</span>).build();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (info.getDataCenterInfo().getName() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.status(<span class="number">400</span>).entity(<span class="string">"Missing dataCenterInfo Name"</span>).build();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// handle cases where clients may be registering with bad DataCenterInfo with missing data</span></span><br><span class="line">        DataCenterInfo dataCenterInfo = info.getDataCenterInfo();</span><br><span class="line">        <span class="keyword">if</span> (dataCenterInfo <span class="keyword">instanceof</span> UniqueIdentifier) &#123;</span><br><span class="line">            String dataCenterInfoId = ((UniqueIdentifier) dataCenterInfo).getId();</span><br><span class="line">            <span class="keyword">if</span> (isBlank(dataCenterInfoId)) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> experimental = <span class="string">"true"</span>.equalsIgnoreCase(serverConfig.getExperimental(<span class="string">"registration.validation.dataCenterInfoId"</span>));</span><br><span class="line">                <span class="keyword">if</span> (experimental) &#123;</span><br><span class="line">                    String entity = <span class="string">"DataCenterInfo of type "</span> + dataCenterInfo.getClass() + <span class="string">" must contain a valid id"</span>;</span><br><span class="line">                    <span class="keyword">return</span> Response.status(<span class="number">400</span>).entity(entity).build();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dataCenterInfo <span class="keyword">instanceof</span> AmazonInfo) &#123;</span><br><span class="line">                    AmazonInfo amazonInfo = (AmazonInfo) dataCenterInfo;</span><br><span class="line">                    String effectiveId = amazonInfo.get(AmazonInfo.MetaDataKey.instanceId);</span><br><span class="line">                    <span class="keyword">if</span> (effectiveId == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        amazonInfo.getMetadata().put(AmazonInfo.MetaDataKey.instanceId.getName(), info.getId());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    logger.warn(<span class="string">"Registering DataCenterInfo of type &#123;&#125; without an appropriate id"</span>, dataCenterInfo.getClass());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//InstanceRegistry.java文件中的88行的405行register方法</span></span><br><span class="line">        registry.register(info, <span class="string">"true"</span>.equals(isReplication));</span><br><span class="line">        <span class="keyword">return</span> Response.status(<span class="number">204</span>).build();  <span class="comment">// 204 to be backwards compatible</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>2.如下图所示可以看到，从ApplicationResource.java怎么进入到PeerAwareInstanceRegistryImpl中的register方法<br><img src="/images/spring-cloud-netflix/eureka/2016-11-01_222223.png" alt="调用PeerAwareInstanceRegistryImpl中的register"><br>InstanceRegistry.java文件中的88行，可以看到调用PeerAwareInstanceRegistryImpl中的405行register方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(<span class="keyword">final</span> InstanceInfo info, <span class="keyword">final</span> <span class="keyword">boolean</span> isReplication)</span> </span>&#123;</span><br><span class="line">handleRegistration(info, resolveInstanceLeaseDuration(info), isReplication);</span><br><span class="line">       <span class="comment">//调用PeerAwareInstanceRegistryImpl中的405行register方法</span></span><br><span class="line"><span class="keyword">super</span>.register(info, isReplication);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>3.PeerAwareInstanceRegistryImpl中的405行register方法，代码如下所示。阅读方法上面的注释，就知道该方法是注册服务信息并把Eureka Server中的配置信息同步。执行注册的动作在com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl.register(InstanceInfo info, boolean isReplication)中，具体代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Registers the information about the &#123;<span class="doctag">@link</span> InstanceInfo&#125; and replicates</span></span><br><span class="line"><span class="comment">    * this information to all peer eureka nodes. If this is replication event</span></span><br><span class="line"><span class="comment">    * from other replica nodes then it is not replicated.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> info</span></span><br><span class="line"><span class="comment">    *            the &#123;<span class="doctag">@link</span> InstanceInfo&#125; to be registered and replicated.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> isReplication</span></span><br><span class="line"><span class="comment">    *            true if this is a replication event from other replica nodes,</span></span><br><span class="line"><span class="comment">    *            false otherwise.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(<span class="keyword">final</span> InstanceInfo info, <span class="keyword">final</span> <span class="keyword">boolean</span> isReplication)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> leaseDuration = Lease.DEFAULT_DURATION_IN_SECS;</span><br><span class="line">       <span class="keyword">if</span> (info.getLeaseInfo() != <span class="keyword">null</span> &amp;&amp; info.getLeaseInfo().getDurationInSecs() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           leaseDuration = info.getLeaseInfo().getDurationInSecs();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//调用父类方法注册</span></span><br><span class="line">       <span class="keyword">super</span>.register(info, leaseDuration, isReplication);</span><br><span class="line">       <span class="comment">// 同步Eureka中的服务信息</span></span><br><span class="line">       replicateToPeers(Action.Register, info.getAppName(), info.getId(), info, <span class="keyword">null</span>, isReplication);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>4.AbstractInstanceRegistry.java中192行，可以看到Eureka真正的服务注册实现的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Registers a new instance with a given duration.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> com.netflix.eureka.lease.LeaseManager#register(java.lang.Object, int, boolean)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(InstanceInfo registrant, <span class="keyword">int</span> leaseDuration, <span class="keyword">boolean</span> isReplication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            read.lock();</span><br><span class="line">            Map&lt;String, Lease&lt;InstanceInfo&gt;&gt; gMap = registry.get(registrant.getAppName());</span><br><span class="line">            REGISTER.increment(isReplication);</span><br><span class="line">            <span class="keyword">if</span> (gMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> ConcurrentHashMap&lt;String, Lease&lt;InstanceInfo&gt;&gt; gNewMap = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Lease&lt;InstanceInfo&gt;&gt;();</span><br><span class="line">                gMap = registry.putIfAbsent(registrant.getAppName(), gNewMap);</span><br><span class="line">                <span class="keyword">if</span> (gMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    gMap = gNewMap;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Lease&lt;InstanceInfo&gt; existingLease = gMap.get(registrant.getId());</span><br><span class="line">            <span class="comment">// Retain the last dirty timestamp without overwriting it, if there is already a lease</span></span><br><span class="line">            <span class="keyword">if</span> (existingLease != <span class="keyword">null</span> &amp;&amp; (existingLease.getHolder() != <span class="keyword">null</span>)) &#123;</span><br><span class="line">                Long existingLastDirtyTimestamp = existingLease.getHolder().getLastDirtyTimestamp();</span><br><span class="line">                Long registrationLastDirtyTimestamp = registrant.getLastDirtyTimestamp();</span><br><span class="line">                logger.debug(<span class="string">"Existing lease found (existing=&#123;&#125;, provided=&#123;&#125;"</span>, existingLastDirtyTimestamp, registrationLastDirtyTimestamp);</span><br><span class="line">                <span class="keyword">if</span> (existingLastDirtyTimestamp &gt; registrationLastDirtyTimestamp) &#123;</span><br><span class="line">                    logger.warn(<span class="string">"There is an existing lease and the existing lease's dirty timestamp &#123;&#125; is greater"</span> +</span><br><span class="line">                            <span class="string">" than the one that is being registered &#123;&#125;"</span>, existingLastDirtyTimestamp, registrationLastDirtyTimestamp);</span><br><span class="line">                    logger.warn(<span class="string">"Using the existing instanceInfo instead of the new instanceInfo as the registrant"</span>);</span><br><span class="line">                    registrant = existingLease.getHolder();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// The lease does not exist and hence it is a new registration</span></span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.expectedNumberOfRenewsPerMin &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// Since the client wants to cancel it, reduce the threshold</span></span><br><span class="line">                        <span class="comment">// (1</span></span><br><span class="line">                        <span class="comment">// for 30 seconds, 2 for a minute)</span></span><br><span class="line">                        <span class="keyword">this</span>.expectedNumberOfRenewsPerMin = <span class="keyword">this</span>.expectedNumberOfRenewsPerMin + <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">this</span>.numberOfRenewsPerMinThreshold =</span><br><span class="line">                                (<span class="keyword">int</span>) (<span class="keyword">this</span>.expectedNumberOfRenewsPerMin * serverConfig.getRenewalPercentThreshold());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                logger.debug(<span class="string">"No previous lease information found; it is new registration"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Lease&lt;InstanceInfo&gt; lease = <span class="keyword">new</span> Lease&lt;InstanceInfo&gt;(registrant, leaseDuration);</span><br><span class="line">            <span class="keyword">if</span> (existingLease != <span class="keyword">null</span>) &#123;</span><br><span class="line">                lease.setServiceUpTimestamp(existingLease.getServiceUpTimestamp());</span><br><span class="line">            &#125;</span><br><span class="line">            gMap.put(registrant.getId(), lease);</span><br><span class="line">            <span class="keyword">synchronized</span> (recentRegisteredQueue) &#123;</span><br><span class="line">                recentRegisteredQueue.add(<span class="keyword">new</span> Pair&lt;Long, String&gt;(</span><br><span class="line">                        System.currentTimeMillis(),</span><br><span class="line">                        registrant.getAppName() + <span class="string">"("</span> + registrant.getId() + <span class="string">")"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// This is where the initial state transfer of overridden status happens</span></span><br><span class="line">            <span class="keyword">if</span> (!InstanceStatus.UNKNOWN.equals(registrant.getOverriddenStatus())) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Found overridden status &#123;&#125; for instance &#123;&#125;. Checking to see if needs to be add to the "</span></span><br><span class="line">                                + <span class="string">"overrides"</span>, registrant.getOverriddenStatus(), registrant.getId());</span><br><span class="line">                <span class="keyword">if</span> (!overriddenInstanceStatusMap.containsKey(registrant.getId())) &#123;</span><br><span class="line">                    logger.info(<span class="string">"Not found overridden id &#123;&#125; and hence adding it"</span>, registrant.getId());</span><br><span class="line">                    overriddenInstanceStatusMap.put(registrant.getId(), registrant.getOverriddenStatus());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            InstanceStatus overriddenStatusFromMap = overriddenInstanceStatusMap.get(registrant.getId());</span><br><span class="line">            <span class="keyword">if</span> (overriddenStatusFromMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">                logger.info(<span class="string">"Storing overridden status &#123;&#125; from map"</span>, overriddenStatusFromMap);</span><br><span class="line">                registrant.setOverriddenStatus(overriddenStatusFromMap);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set the status based on the overridden status rules</span></span><br><span class="line">            InstanceStatus overriddenInstanceStatus = getOverriddenInstanceStatus(registrant, existingLease, isReplication);</span><br><span class="line">            registrant.setStatusWithoutDirty(overriddenInstanceStatus);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If the lease is registered with UP status, set lease service up timestamp</span></span><br><span class="line">            <span class="keyword">if</span> (InstanceStatus.UP.equals(registrant.getStatus())) &#123;</span><br><span class="line">                lease.serviceUp();</span><br><span class="line">            &#125;</span><br><span class="line">            registrant.setActionType(ActionType.ADDED);</span><br><span class="line">            recentlyChangedQueue.add(<span class="keyword">new</span> RecentlyChangedItem(lease));</span><br><span class="line">            registrant.setLastUpdatedTimestamp();</span><br><span class="line">            invalidateCache(registrant.getAppName(), registrant.getVIPAddress(), registrant.getSecureVipAddress());</span><br><span class="line">            logger.info(<span class="string">"Registered instance &#123;&#125;/&#123;&#125; with status &#123;&#125; (replication=&#123;&#125;)"</span>,</span><br><span class="line">                    registrant.getAppName(), registrant.getId(), registrant.getStatus(), isReplication);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            read.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>更多的细节源码内容，大家可以自己阅读。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ApplicationResource类接收Http服务请求，调用PeerAwareInstanceRegistryImpl的register方法，PeerAwareInstanceRegistryImpl完成服务注册后，调用replicateToPeers向其它Eureka Server节点（Peer）做状态同步。如下图所示。<br><img src="/images/spring-cloud-netflix/eureka/eureka-server-register.png" alt="Eureka Server注册时序图"></p>]]></content>
      
      <categories>
          
          <category> Spring Cloud Eureka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Eureka </tag>
            
            <tag> Spring Cloud 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Corn表达式与时间整点半点代码片</title>
      <link href="/ex/get-hfs/"/>
      <url>/ex/get-hfs/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本文主要介绍了Corn表达式和判断时间是否半点或者整点执行的代码片。</p><a id="more"></a><h2 id="Corn表达式"><a href="#Corn表达式" class="headerlink" title="Corn表达式"></a>Corn表达式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String exp=<span class="string">"0/3 * * * * ? "</span>;</span><br><span class="line"><span class="comment">//判断表达式是否有效</span></span><br><span class="line"><span class="keyword">boolean</span> valid = CronExpression.isValidExpression(exp);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//使用CronExpression生成时间序列  </span></span><br><span class="line">CronExpression cronExpression = <span class="keyword">new</span> CronExpression(exp);</span><br><span class="line">System.out.println(cronExpression.getNextValidTimeAfter(<span class="keyword">new</span> Date()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用CronSequenceGenerator生成时间序列</span></span><br><span class="line"> CronSequenceGenerator cronSequenceGenerator = <span class="keyword">new</span> CronSequenceGenerator(exp);</span><br><span class="line"> Date nextTimePoint = cronSequenceGenerator.next(<span class="keyword">new</span> Date());</span><br></pre></td></tr></table></figure><h2 id="判断时间是否整点或者半点执行"><a href="#判断时间是否整点或者半点执行" class="headerlink" title="判断时间是否整点或者半点执行"></a>判断时间是否整点或者半点执行</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.xxx.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.GregorianCalendar;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> xujin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前时间是半点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">judgeTimeIsHalf</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Boolean judgeTimeIsHalf=<span class="keyword">false</span>;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        GregorianCalendar gc = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">        gc.setTime(date);</span><br><span class="line">        <span class="keyword">if</span> (gc.get(gc.MINUTE)==<span class="number">30</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            judgeTimeIsHalf= <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> judgeTimeIsHalf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前时间是半点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">judgeTimeIsWhole</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Boolean judgeTimeIsWhole=<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        GregorianCalendar gc = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">        gc.setTime(date);</span><br><span class="line">        <span class="keyword">if</span> ( gc.get(gc.MINUTE)==<span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            judgeTimeIsWhole= <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> judgeTimeIsWhole;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMinute</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        GregorianCalendar gc = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">        gc.setTime(date);</span><br><span class="line">        <span class="keyword">return</span> gc.get(gc.MINUTE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">quarztTime</span><span class="params">(<span class="keyword">int</span> h,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Boolean isQuarztTime=<span class="keyword">false</span>;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        GregorianCalendar gc = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">        gc.setTime(date);</span><br><span class="line">        <span class="keyword">if</span>((gc.get(gc.HOUR_OF_DAY)==h&amp;&amp;gc.get(gc.MINUTE)==m))</span><br><span class="line">        &#123;</span><br><span class="line">            isQuarztTime= <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isQuarztTime;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getHourAndMinute</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        GregorianCalendar gc = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">        gc.setTime(date);</span><br><span class="line">        String hour=String.valueOf(gc.get(gc.HOUR_OF_DAY));</span><br><span class="line">        String minute=String.valueOf(gc.get(gc.MINUTE));</span><br><span class="line">        <span class="keyword">return</span> hour+minute;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(getHourAndMinute());</span><br><span class="line"></span><br><span class="line">        Calendar calendar=Calendar.getInstance();</span><br><span class="line">        System.out.println(</span><br><span class="line">            <span class="string">"现在是："</span>+</span><br><span class="line">                calendar.get(GregorianCalendar.YEAR)+<span class="string">"年"</span>+</span><br><span class="line">                (calendar.get(GregorianCalendar.MONTH)+<span class="number">1</span>)+<span class="string">"月"</span>+</span><br><span class="line">                calendar.get(GregorianCalendar.DAY_OF_MONTH)+<span class="string">"日"</span>+</span><br><span class="line">                calendar.get(GregorianCalendar.HOUR)+<span class="string">"时"</span>+</span><br><span class="line">                calendar.get(GregorianCalendar.MINUTE)+<span class="string">"分"</span>+</span><br><span class="line">                calendar.get(GregorianCalendar.SECOND)+<span class="string">"秒"</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 代码片 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目经验 </tag>
            
            <tag> 代码片 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Netflix之Eureka下篇原理</title>
      <link href="/sc/sc-eureka-mid/"/>
      <url>/sc/sc-eureka-mid/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本文主要介绍Eureka的工作原理，Eureka 组件分为两部分：<code>Eureka server</code>和 <code>Eureka client</code>。而客户端又分为 <code>Application Service 客户端</code>和 <code>Application Client 客户端</code>两种。Eureka 的工作机制每个 region 都有自己的 Eureka 服务器集群，每个 zone 至少要有一个 Eureka 服务器以应对 zone 瘫痪。<br><a id="more"></a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ol><li>Renew:我的理解是续约，为什么叫续约呢？<br>Renew（服务续约）操作由Service Provider<code>定期调用</code>，类似于heartbeat。目的是隔一段时间Service Provider调用接口，告诉Eureka Server它还活着没挂，不要把它踢掉。通俗的说就是它们两之间的心跳检测，避免服务提供者被剔除掉。</li><li>Cancel（服务下线）<br>一般在Service Provider<code>挂了</code>或<code>shut down</code>的时候调用，用来把自身的服务从Eureka Server中<code>删除</code>，以防客户端调用到不存在的服务。</li><li>Fetch Registries(获取注册信息)，<br>Fetch Registries由Service Consumer(服务消费者)调用，用来获取Eureka Server上注册的服务info。</li><li>Eviction(剔除)<br>Eviction（失效服务剔除）用来定期在Eureka Server检测失效的服务，检测标准就是超过一定时间没有Renew的服务。<h2 id="回顾Eureka架构图"><a href="#回顾Eureka架构图" class="headerlink" title="回顾Eureka架构图"></a>回顾Eureka架构图</h2><h3 id="Eureka架构图"><a href="#Eureka架构图" class="headerlink" title="Eureka架构图"></a>Eureka架构图</h3>Eureka架构图如下图所示，github地址:<a href="https://github.com/netflix/eureka" target="_blank" rel="noopener">https://github.com/netflix/eureka</a><br>document地址:<a href="https://github.com/Netflix/eureka/wiki/Eureka-at-a-glance" target="_blank" rel="noopener">https://github.com/Netflix/eureka/wiki/Eureka-at-a-glance</a><br><img src="/images/spring-cloud-netflix/eureka/eureka_architecture.png" alt="Eureka架构图"><br>&ensp;　从图中我们可以看出，Eureka 组件分为两部分：<code>Eureka server</code>和 <code>Eureka client</code>。而客户端又分为 <code>Application Service 客户端</code>和 <code>Application Client 客户端</code>两种。Eureka 的工作机制每个 region 都有自己的 Eureka 服务器集群，每个 zone 至少要有一个 Eureka 服务器以应对 zone 瘫痪。<br>&ensp;　Application Service 在启动时注册到 Eureka 服务器，之后每 <code>30</code> 秒钟发送心跳以更新自身状态,即<code>Renew(续约)</code>。如果该客户端没能发送心跳更新，它将在 <code>90</code> 秒之后被其注册的 Eureka 服务器剔除，即<code>Eviction(剔除)</code>。来自任意 zone 的 Application Client 可以获取这些注册信息(每隔 <code>30</code> 秒查看一次)并依此定位到在任何区域可以给自己提供服务的提供者(即Fetch Registries)，进而进行远程调用。<blockquote><p>服务提供者本身携带的Eureka Client既能<code>服务注册</code>，<code>服务续约</code>，也能通过client<code>定位服务</code>和<code>调用其它的服务</code>。</p></blockquote></li></ol><h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><h3 id="服务注册-1"><a href="#服务注册-1" class="headerlink" title="服务注册"></a>服务注册</h3><p>  服务注册源码分析，请参考:<a href="http://blog.xujin.org/sc/sc-eureka-register/" target="_blank" rel="noopener">http://blog.xujin.org/sc/sc-eureka-register/</a></p><h2 id="Renew-服务续约"><a href="#Renew-服务续约" class="headerlink" title="Renew(服务续约)"></a>Renew(服务续约)</h2><h3 id="服务续约"><a href="#服务续约" class="headerlink" title="服务续约"></a>服务续约</h3><p>  Renew操作会在Service Provider端定期发起，用来通知Eureka Server自己还活着。 这里有两个比较重要的配置需要注意一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.instance.leaseRenewalIntervalInSeconds</span><br></pre></td></tr></table></figure></p><p>  Renew频率。默认是30秒，也就是每30秒会向Eureka Server发起Renew操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.instance.leaseExpirationDurationInSeconds</span><br></pre></td></tr></table></figure></p><p> 服务失效时间。默认是90秒，也就是如果Eureka Server在90秒内没有接收到来自Service Provider的Renew操作，就会把Service Provider剔除。</p>]]></content>
      
      <categories>
          
          <category> Spring Cloud Eureka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Eureka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Netflix之Eureka上篇</title>
      <link href="/sc/sc-netflix-eureka/"/>
      <url>/sc/sc-netflix-eureka/</url>
      <content type="html"><![CDATA[<p>前言:Spring Cloud NetFlix这个项目对NetFlix中一些久经考验靠谱的服务发现，熔断，网关，智能路由，以及负载均衡等做了封装，并通过注解的或简单配置的方式提供给Spring Cloud用户用。本文主要介绍 Spring Cloud中的Eureka组件。由于Spring Cloud做技术选型时中立的，因此Spring Cloud也提供了Spring Cloud Zookeeper,Spring Cloud Consul用于服务治理或服务发现供大家选择使用，另外我还发现<a href="https://github.com/SpringCloud/spring-cloud-etcd" target="_blank" rel="noopener">Spring Cloud etcd</a>这个项目，也可以用于服务注册和发现<br><a id="more"></a></p><h2 id="什么是-Spring-Cloud-Netflix"><a href="#什么是-Spring-Cloud-Netflix" class="headerlink" title="什么是 Spring Cloud Netflix ?"></a>什么是 Spring Cloud Netflix ?</h2><p>其官方文档中对自己的定义是如下，<a href="http://cloud.spring.io/spring-cloud-netflix/" target="_blank" rel="noopener">官网连接</a>,<a href="https://github.com/spring-cloud/spring-cloud-netflix" target="_blank" rel="noopener">Github地址</a></p><blockquote><p>This project provides Netflix OSS integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms. With a few simple annotations you can quickly enable and configure the common patterns inside your application and build large distributed systems with battle-tested Netflix components. The patterns provided include Service Discovery (Eureka), Circuit Breaker (Hystrix), Intelligent Routing (Zuul) and Client Side Load Balancing (Ribbon).</p></blockquote><p>Spring Cloud Netflix这个项目对于Spring Boot应用来说，它集成了NetFlix OSS的一些组件，只需通过注解配置和Spring环境的通用简单的使用注解，你可以快速的启用和配置这些久经测试考验的NetFlix的组件于你的应用和用于构建分布式系统中。这些组件包含的功能有服务发现（Eureka），熔断器（Hystrix），智能路由(Zuul)以及客户端的负载均衡器（Ribbon）</p><p>简单的来说，Spring Cloud NetFlix这个项目对NetFlix中一些久经考验靠谱的服务发现，熔断，网关，智能路由，以及负载均衡等做了封装，并通过注解的或简单配置的方式提供给Spring Cloud用户用。</p><h2 id="什么是-Eureka"><a href="#什么是-Eureka" class="headerlink" title="什么是 Eureka?"></a>什么是 Eureka?</h2><p>官网定义是:</p><blockquote><p>Eureka is a REST (Representational State Transfer) based service that is primarily used in the AWS cloud for locating services for the purpose of load balancing and failover of middle-tier servers. We call this service, the Eureka Server. Eureka also comes with a Java-based client component,the Eureka Client, which makes interactions with the service much easier. The client also has a built-in load balancer that does basic round-robin load balancing.</p></blockquote><p>简单来说Eureka就是Netflix开源的一款提供服务注册和发现的产品，并且提供了相应的Java客户端。</p><h2 id="为什么要选择-Eureka"><a href="#为什么要选择-Eureka" class="headerlink" title="为什么要选择 Eureka?"></a>为什么要选择 Eureka?</h2><p>那么为什么我们在项目中使用了Eureka呢？主要原因如下:</p><ul><li><strong>它提供了完整的Service Registry和Service Discovery实现</strong><ul><li>首先是提供了完整的实现，并且也经受住了Netflix的生产环境考验，使用比较方便只需通过注解或简单配置的方式即可。</li></ul></li><li><strong>和Spring Cloud无缝集成</strong><ul><li>Spring Cloud对Eureka做了无缝集成，提供了一套完善的解决方案，所以使用起来非常方便。</li><li>另外，Eureka支持嵌入到应用自身的容器中启动，应用启动完之后，既充当了Eureka的角色，同时也是服务的提供者。这样就极大的提高了服务的可用性。</li></ul></li><li><strong>开源</strong><ul><li>开源代码，方便学习掌握其源码并驾驭它。  </li></ul></li></ul><p>参考阅读：为什么不应该使用ZooKeeper做服务发现<br>英文链接:<br>Eureka! Why You Shouldn’t Use ZooKeeper for Service Discovery:<br><a href="http://www.knewton.com/tech/blog/2014/12/eureka-shouldnt-use-zookeeper-service-discovery/" target="_blank" rel="noopener">http://www.knewton.com/tech/blog/2014/12/eureka-shouldnt-use-zookeeper-service-discovery/</a><br>中文链接:<br><a href="http://blog.csdn.net/jenny8080/article/details/52448403" target="_blank" rel="noopener">http://blog.csdn.net/jenny8080/article/details/52448403</a><br>Eureka vs. Zookeeper：<br><a href="https://groups.google.com/forum/#%21topic/eureka_netflix/LXKWoD14RFY" target="_blank" rel="noopener">https://groups.google.com/forum/#%21topic/eureka_netflix/LXKWoD14RFY</a></p><h2 id="进一步了解-Eureka"><a href="#进一步了解-Eureka" class="headerlink" title="进一步了解 Eureka"></a>进一步了解 Eureka</h2><h3 id="Eureka基本架构图"><a href="#Eureka基本架构图" class="headerlink" title="Eureka基本架构图"></a>Eureka基本架构图</h3><p><img src="/images/spring-cloud-netflix/eureka/architecture-overview.png" alt="architecture-overview"></p><p>上图简要描述了Eureka的基本架构，由3个角色组成：</p><ol><li><p><strong>Eureka Server</strong></p><ul><li>提供服务注册和发现</li></ul></li><li><p><strong>Service Provider</strong></p><ul><li>服务提供者，服务启动的时候会将自己的服务信息注册到Eureka</li></ul></li><li><p><strong>Service Consumer</strong></p><ul><li>服务消费者，从Eureka中获取已注的服务信息，用于调用服务生产者</li></ul></li></ol><p>需要注意一点是：一个Service Provider既可以是Service Consumer，也可以是Service Provider。</p><h3 id="集群模式下的Eureka"><a href="#集群模式下的Eureka" class="headerlink" title="集群模式下的Eureka"></a>集群模式下的Eureka</h3><p><img src="/images/spring-cloud-netflix/eureka/architecture-detail.png" alt="architecture-detail"></p><p>上图更进一步的展示了3个角色之间的交互。</p><ol><li>Service Provider会向Eureka Server做Register（服务注册）、Renew（服务续约）、Cancel（服务下线）等操作。</li><li>Eureka Server之间会做注册服务的同步，从而保证状态一致</li><li>Service Consumer会向Eureka Server获取注册服务列表，并消费服务</li></ol>]]></content>
      
      <categories>
          
          <category> Spring Cloud Eureka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Netflix </tag>
            
            <tag> Eureka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud Sleuth-全链路监控调研</title>
      <link href="/sc/sc-sleuth/"/>
      <url>/sc/sc-sleuth/</url>
      <content type="html"><![CDATA[<p>前言:做过软件开发的都知道，对<code>系统进行全链路的监控</code>是非常有必要的。在单体应用中，传统的方式是软件开发者，通过自定义日志的level，日志文件的方式记录单体应用的<code>运行日志</code>。从而排查线上系统出现运行过慢，出现故障，异常等问题，但是在微服务架构或分布式系统中，一个系统被拆分成了A、B、C、D、E等多个服务，而每个服务可能又有多个实例组成集群，采用上诉定位问题的方式就行不通了，你充其量就知道某个服务是应用的瓶颈，但中间发生了什么你完全不知道。而且问题的查询，因为有海量各种各样的日志等文件，导致<code>追溯定位问题</code>等极其不方便。因此需要<code>全链路监控系统的收集，上报，对海量日志实时计算生成，监控告警，视图报表，帮助开发人员快速定位问题</code>。</p><h2 id="服务追踪分析"><a href="#服务追踪分析" class="headerlink" title="服务追踪分析"></a>服务追踪分析</h2><p>一个由微服务构成的应用系统由N个服务实例组成，通过<code>REST请求</code>或者<code>RPC协议</code>等来通讯完成一个业务流程的调用。对于入口的一个调用可能需要有多个后台服务协同完成，链路上<code>任何一个调用超时</code>或<code>出错</code>都可能造成前端请求的失败。服务的调用链也会越来越长，并形成一个树形的调用链。如下图所示:<br><img src="/images/spring-cloud-sleuth/1/dyl.png" alt="调用链"><br><a id="more"></a><br>但是随着服务的增多，对调用链的分析也会越来越负责。设想你在负责下面这个系统，其中每个小点都是一个微服务，他们之间的调用关系形成了复杂的网络。如下图所示:<br><img src="/images/spring-cloud-sleuth/1/qzfw.png" alt="调用关系复杂网络图"></p><p>通过该图，可以看出错综复杂的调用网路图。针对服务化应用全链路追踪的问题，Google发表了Dapper论文，介绍了他们如何进行服务追踪分析。其基本思路是在服务调用的请求和响应中加入ID，标明上下游请求的关系。利用这些信息，可以可视化地分析服务调用链路和服务间的依赖关系。</p><h2 id="什么是-Spring-Cloud-Sleuth"><a href="#什么是-Spring-Cloud-Sleuth" class="headerlink" title="什么是 Spring Cloud Sleuth ?"></a>什么是 Spring Cloud Sleuth ?</h2><p>Spring Cloud Sleuth为Spring Cloud提供了分布式追踪方案，为了更好的理解这个领域中的一些概念，建议先自行搜索学习一下Google Dapper相关的论文，<a href="http://research.google.com/pubs/pub36356.html，github" target="_blank" rel="noopener">http://research.google.com/pubs/pub36356.html，github</a> Code连接:<a href="https://github.com/spring-cloud/spring-cloud-sleuth" target="_blank">Spring Cloud Sleuth Code</a>。官方文档地址:<a href="http://cloud.spring.io/spring-cloud-sleuth/spring-cloud-sleuth.html" target="_blank" rel="noopener">http://cloud.spring.io/spring-cloud-sleuth/spring-cloud-sleuth.html</a>. 其官方文档中对自己的定义是如下：</p><blockquote><p>Spring Cloud Sleuth implements a distributed tracing solution for Spring Cloud, borrowing heavily from Dapper, Zipkin and HTrace. For most users Sleuth should be invisible, and all your interactions with external systems should be instrumented automatically. You can capture data simply in logs, or by sending it to a remote collector service.</p></blockquote><p>简单来说，Spring Cloud Sleuth就是APM(Application Performance Monitor),全链路监控的APM的一部分，如果要完整的使用该组件需要自己定制化或者和开源的系统集成，例如:ZipKin。</p><blockquote><p>APM（Application Performance Monitor）这个领域最近异常火热。国外该领域知名公司包括New Relic，Appdynamics，Splunk。其中New Relic已经成功IPO，估值超过20亿美元。<br>国内外的个大互联网公司也都有类似大名鼎鼎的APM产品，例如淘宝鹰眼Eagle Eyes，点评的CAT，微博的Watchman，twitter的Zipkin。他们的产品虽未像专业APM公司的产品这样功能强大，但结合各自公司的业务特点，这些产品在支撑业务系统的高性能和稳定性方面，发挥了显著的作用。</p></blockquote><h2 id="Spring-Cloud-Sleuth和Zipkin"><a href="#Spring-Cloud-Sleuth和Zipkin" class="headerlink" title="Spring Cloud Sleuth和Zipkin"></a>Spring Cloud Sleuth和Zipkin</h2><p>对应Dpper的开源实现是Zipkin，支持多种语言包括JavaScript，Python，Java, Scala, Ruby, C#, Go等。其中Java由多种不同的库来支持。</p><h2 id="SpringCloudSleuth-借用了-Dapper-的术语"><a href="#SpringCloudSleuth-借用了-Dapper-的术语" class="headerlink" title="SpringCloudSleuth 借用了 Dapper 的术语"></a>SpringCloudSleuth 借用了 Dapper 的术语</h2><ul><li><strong>Span</strong><ul><li>基本工作单元，例如，在一个新建的span中发送一个RPC等同于发送一个回应请求给RPC，span通过一个64位ID唯一标识，trace以另一个64位ID表示，span还有其他数据信息，比如摘要、时间戳事件、关键值注释(tags)、span的ID、以及进度ID(通常是IP地址) span在不断的启动和停止，同时记录了时间信息，当你创建了一个span，你必须在未来的某个时刻停止它。</li></ul></li><li><strong>Trace</strong><ul><li>一系列spans组成的一个树状结构，例如，如果你要在分布式中大数据存储中使用，Trace将会由一个请求执行调用链形成。</li></ul></li><li><strong>Annotation</strong><ul><li>用来及时记录一个事件的存在，一些核心annotations用来定义一个请求的开始和结束。<br><em>cs：Client Sent - 客户端发起一个请求，这个annotion描述了这个span的开始</em>sr：Server Received - 服务端获得请求并准备开始处理它，如果将其sr减去cs时间戳便可得到网络延迟<br><em>ss：Server Sent - 注解表明请求处理的完成(当请求返回客户端)，如果ss减去sr时间戳便可得到服务端需要的处理请求时间</em>cr：Client Received - 表明span的结束，客户端成功接收到服务端的回复，如果cr减去cs时间戳便可得到客户端从服务端获取回复的所有所需时间<br>将Span和Trace在一个系统中使用Zipkin注解的过程图形化，如下图所示:</li></ul></li></ul><p><img src="/images/spring-cloud-sleuth/1/trace-id.png" alt="Spring Cloud Sleuth使用ZipKin过程图形化"></p>]]></content>
      
      <categories>
          
          <category> Spring Cloud Sleuth </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Spring Cloud Sleuth </tag>
            
            <tag> 全链路监控 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>什么是Spring Cloud Config？</title>
      <link href="/sc/sc-config/"/>
      <url>/sc/sc-config/</url>
      <content type="html"><![CDATA[<p>前言:在单体应用中，我们一般的做法是把Property和Code放在一起，没有什么问题。但是在分布式系统中，由于存在多个服务实例，需要分别管理到每个具体的服务工程中的配置，上线需要准备check list 并逐个检查每个上线的服务是否正确。在系统上线之后修改某个配置，需要重启服务。这样开发就相当麻烦。因此我们急需需要把分布式系统中的配置信息抽取出来统一管理，服务获取系统信息时有一个覆盖顺序:property–&gt; Evn—-&gt;配置中心。这样修改环境变量或者修改配置中心的配置就能取到最新的配置信息。在唯品会 Venus Framework中我们专门设计了这个功能。Spring cloud出现之后，避免了大家重复造轮子。</p><h2 id="什么是-Spring-Cloud-Config"><a href="#什么是-Spring-Cloud-Config" class="headerlink" title="什么是 Spring Cloud Config ?"></a>什么是 Spring Cloud Config ?</h2><p>其官方文档中对自己的定义是如下，官网连接:<a href="http://cloud.spring.io/spring-cloud-config/" target="_blank">Spring Cloud Config</a>。</p><blockquote><p>Spring Cloud Config provides server and client-side support for externalized configuration in a distributed system.<br>With the Config Server you have a central place to manage external properties for applications across all environments.</p></blockquote><p>简单来说，Spring Cloud Config就是我们通常意义上的配置中心 - 把应用原本放在本地文件的配置抽取出来放在中心服务器，从而能够提供更好的管理、发布能力。<br><a id="more"></a></p><p>另外，Spring Cloud Config提供基于以下3个维度的配置管理：</p><ul><li><strong>应用</strong><ul><li>这个比较好理解，每个配置都是属于某一个应用的</li></ul></li><li><strong>环境</strong><ul><li>每个配置都是区分环境的，如dev, test, prod等</li></ul></li><li><strong>版本</strong><ul><li>这个可能是一般的配置中心所缺乏的，就是对同一份配置的不同版本管理，比如:可以通过Git进行版本控制。</li><li>Spring Cloud Config提供版本的支持，也就是说对于一个应用的不同部署实例，可以从服务端获取到不同版本的配置，这对于一些特殊场景如：灰度发布，A/B测试等提供了很好的支持。</li></ul></li></ul><h2 id="为什么会诞生Spring-Cloud-Config"><a href="#为什么会诞生Spring-Cloud-Config" class="headerlink" title="为什么会诞生Spring Cloud Config?"></a>为什么会诞生Spring Cloud Config?</h2><p>   配置中心目前现状:不管是开源的(百度的disconf)，还是一些公司自己闭源投入使用的产品已经不少了，那为什么还会诞生Spring Cloud Config呢？</p><p>在我看来，Spring Cloud Config在以下几方面还是有比较独特的优势，如下：</p><ul><li><strong>基于应用、环境、版本三个维度管理</strong><ul><li>这个在前面提过了，主要是有版本的支持</li></ul></li><li><strong>配置存储支持Git</strong><ul><li>这个就比较有特色了，后端基于Git存储，一方面程序员非常熟悉，另一方面在部署上会非常简单，而且借助于Git，天生就能非常好的支持版本</li><li>当然，它还支持其它的存储如本地文件、SVN等</li></ul></li><li><strong>和Spring无缝集成</strong><ul><li>它无缝支持Spring里面<code>Environment</code>和<code>PropertySource</code>的接口</li><li>所以对于已有的Spring应用程序的迁移成本非常低，在配置获取的接口上是完全一致的</li></ul></li></ul><h2 id="Spring-Cloud-Config-入门例子"><a href="#Spring-Cloud-Config-入门例子" class="headerlink" title="Spring Cloud Config 入门例子"></a>Spring Cloud Config 入门例子</h2><p>上述节点主要介绍了Spring cloud的相关理论，大家对Spring Cloud Config有了一个初步的认识，接下来例子让大家感受一下Spring cloud config的魅力。</p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p><img src="/images/2016-10-18/overview.png" alt="Overview"></p><p>上图简要描述了一个普通Spring Cloud Config应用的场景。其中主要有以下几个组件：</p><ul><li><em>Config Client</em><ul><li>Client很好理解，就是使用了Spring Cloud Config的应用</li><li>Spring Cloud Config提供了基于Spring的客户端，应用只要在代码中引入Spring Cloud Config Client的jar包即可工作</li></ul></li><li><em>Config Server</em><ul><li>Config Server是需要独立部署的一个web应用，它负责把git上的配置返回给客户端</li></ul></li><li><em>Remote Git Repository</em><ul><li>远程Git仓库，一般而言，我们会把配置放在一个远程仓库，通过现成的git客户端来管理配置</li></ul></li><li><em>Local Git Repostiory</em><ul><li>Config Server的本地Git仓库</li><li>Config Server接到来自客户端的配置获取请求后，会先把远程仓库的配置clone到本地的临时目录，然后从临时目录读取配置并返回</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Config </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud微服务框架主要子项目和RPC框架的对比</title>
      <link href="/sc/sc-introduce/"/>
      <url>/sc/sc-introduce/</url>
      <content type="html"><![CDATA[<p>　<strong>摘要</strong>:Spring Cloud是一个相对比较新的微服务框架，今年(2016)推出1.0的release版本，目前Github上更新速度很快. 虽然Spring Cloud时间最短, 但是相比Dubbo等RPC框架, Spring Cloud提供的全套的分布式系统解决方案。spring cloud 为开发者提供了在分布式系统（配置管理，服务发现，熔断，路由，微代理，控制总线，一次性token，全局琐，leader选举，分布式session，集群状态）中快速构建的工具，使用Spring Cloud的开发者可以快速的启动服务或构建应用．它们将在任何分布式环境中工作，包括开发人员自己的笔记本电脑，裸物理机的数据中心，和像Cloud Foundry云管理平台。在未来引领这微服务架构的发展，提供业界标准的一套微服务架构解决方案。<br><a id="more"></a></p><h2 id="什么是Spring-Cloud？"><a href="#什么是Spring-Cloud？" class="headerlink" title="什么是Spring Cloud？"></a>什么是Spring Cloud？</h2><p> 　Spring Cloud是一个相对比较新的微服务框架，今年(2016)才推出1.0的release版本. 虽然Spring Cloud时间最短, 但是相比Dubbo等RPC框架, Spring Cloud提供的全套的分布式系统解决方案。spring cloud 为开发者提供了在分布式系统（配置管理，服务发现，熔断，路由，微代理，控制总线，一次性token，全居琐，leader选举，分布式session，集群状态）中快速构建的工具，使用Spring Cloud的开发者可以快速的启动服务或构建应用．它们将在任何分布式环境中工作，包括开发人员自己的笔记本电脑，裸物理机的数据中心，和像Cloud Foundry云管理平台。下面是官方对Spring Cloud定义和解释。<br>　<blockquote><p>  　Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centres, and managed platforms such as Cloud Foundry.　</p></blockquote></p><h2 id="Spring-Cloud主要项目"><a href="#Spring-Cloud主要项目" class="headerlink" title="Spring Cloud主要项目"></a>Spring Cloud主要项目</h2><p>  Spring Cloud 侧重于提供良好的开箱即用的功能，以便支持典型的开发场景和扩展支持。下面主要Spring Cloud项目在微服务框架中的主要子项目，具体的子项目源码分析，以及实现细节，将会在后面的文章中介绍。</p><ul><li>Spring Cloud Config—配置中心<br> Spring Cloud Config就是我们通常意义上的配置中心 - 把应用原本放在本地文件的配置抽取出来放在中心服务器，从而能够提供更好的管理、发布。<blockquote><p>在RPC服务治理框架中，一般都会开发一个配置中心和ZK配合使用，用于管理分布式应用中的配置信息。比如熔断的阀值，负载均衡的策略等。</p></blockquote></li><li>Spring Cloud Netflix–注册中心，服务发现，LB<br> Spring Cloud Netflix通过Eureka Server实现服务注册中心(包括服务注册，服务发现)，通过Ribbon实现软负载均衡(load balance,简称LB)<blockquote><p>在RPC框架中，例如：dubboX，HSF，OSP(唯品会的RPC框架)等RPC框架，都会通过ZK等实现服务注册，服务发现。当服务启动时，会将服务的IP地址，端口，服务命名，版本号等信息注册到ZK中，同时ZK Node会监听变化，接收最新的服务注册信息到client端或Proxy端。<br>至于LB，都会有自己的实现算法，熔断等都有自己的实现方式。</p></blockquote></li><li>Hystrix<br>　　熔断，包含在服务治理中。</li><li>Spring Cloud Sleuth<br> Spring Cloud Sleuth为Spring Cloud提供了分布式追踪方案。全链路监控系统。<blockquote><p>　　APM（Application Performance Monitor）这个领域最近异常火热。国外该领域知名公司包括New Relic，Appdynamics，Splunk。其中New Relic已经成功IPO，估值超过20亿美元。<br>　１．国内外的个大互联网公司也都有类似大名鼎鼎的APM产品，例如淘宝鹰眼Eagle Eyes，点评的CAT，微博的Watchman，twitter的Zipkin。他们的产品虽未像专业APM公司的产品这样功能强大，但结合各自公司的业务特点，这些产品在支撑业务系统的高性能和稳定性方面，发挥了显著的作用。<br>　２．众所周知，中大型互联网公司的后台业务系统由众多分布式组件构成，这些组件由web类型组件，RPC服务化类型组件，缓存组件，消息组件和数据库组件。一个通过浏览器或移动客户端的前端请求到达后台系统后，会经过很多个业务组件和系统组件，并且留下足迹和相关日志信息。但这些分散在每个业务组件和主机下的日志信息不利于问题排查和定位问题的Root Cause。这种监控场景正是应用性能监控系统的用武之地，应用性能监控系统收集，汇总并分析日志信息达到有效监控系统性能和问题的效果．<br>　３．在唯品会体系中，Mercury提供的主要功能包括：<br>　　定位慢调用：包括慢Web服务（包括Restful Web服务），慢OSP服务，慢SQL<br>　　定位错误：包括4XX，5XX，OSP Error<br>　　定位异常：包括Error Exception，Fatal Exception<br>　　展现依赖和拓扑：域拓扑，服务拓扑，trace拓扑<br>　　Trace调用链：将端到端的调用，以及附加在这次调用的上下文信息，异常日志信息，每一个调用点的耗时都呈现给用户<br>　　应用告警：根据运维设定的告警规则，扫描指标数据，如违反告警规则，则将告警信息上报到唯品会中央告警平台</p></blockquote></li></ul><h2 id="dubbo与Spring-Cloud的比较"><a href="#dubbo与Spring-Cloud的比较" class="headerlink" title="dubbo与Spring Cloud的比较"></a>dubbo与Spring Cloud的比较</h2><p>   　1.dubbo出自于阿里，Spring cloud出自于Spring社区,基于Spring boot提供一套完整的微服务解决方案。dubbo或者dubbox是RPC框<br>　架，功能是Spring Cloud功能的一个子集。<br>   　2.dubbo是RPC服务治理框架，和Spring Cloud一样具备服务注册、发现、路由、负载均衡等能力。但是没有配置中心，完整的好用全链路监<br>　控，需要采用开源的解决方案定制或者自研。Spring cloud的配置中心，全链路监控等组件。从目前来看，Spring Cloud国内中小型企业用的比较多，大型企业可能需要对其需要的组件进行定制化处理。<br>   　3.Spring cloud基于注解的服务发现，服务治理等功能具有代码侵入性，dubbo没有代码侵入性，业务开发人员不需要通过注解的方式去关注<br>框架级别的处理。从中间件或者做基础架构的角度来看，其实服务治理等功能对普通的业务程序员应该是透明的，业务程序员不需要关注服务治理框架的使用，专注于业务代码即可。<br>   因此大型企业可能需要对Spring cloud进行定制化处理。更多比较信息，可以参考下面的连接。</p>]]></content>
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jdk的万能配置</title>
      <link href="/java/jdk-install/"/>
      <url>/java/jdk-install/</url>
      <content type="html"><![CDATA[<p>　java是通过java虚拟机来解释运行的,也就是通过java命令; javac编译生成的.class文件就是虚拟机要执行的代码, 称之为字节码(bytecode),虚拟机通过classloader来装载这些字节码,也就是通常意义上的类.这里就有一个问题,classloader从哪里知道java本身的类库及用户自己的类在什么地方呢?或者有着缺省值(当前路径).或者要有一个用户指定的变量来表明, 这个变量就是类路径(classpath),或者在运行的时候传参数给虚拟机.<br>通过这段文字，你就知道，为什么javac编译通过了，但是java命令却出错(类定义没找到)的原因了。<br>就是环境变量classpath(类路径)没有设置正确，使得JAVA虚拟机的classloader无法找到类来执行目标程序<br><a id="more"></a></p><h2 id="快速配置"><a href="#快速配置" class="headerlink" title="快速配置"></a>快速配置</h2><h3 id="1-新建系统变量JAVA-HOME变量-JAVA-HOME指明JDK安装路径。"><a href="#1-新建系统变量JAVA-HOME变量-JAVA-HOME指明JDK安装路径。" class="headerlink" title="1.新建系统变量JAVA_HOME变量(JAVA_HOME指明JDK安装路径。)"></a>1.新建系统变量JAVA_HOME变量(JAVA_HOME指明JDK安装路径。)</h3><p>　E:\development\Java\Java8\jdk1.8.0_73</p><h3 id="2-在系统变量中的path中添加-Path使得系统可以在任何路径下识别java命令。"><a href="#2-在系统变量中的path中添加-Path使得系统可以在任何路径下识别java命令。" class="headerlink" title="2.在系统变量中的path中添加(Path使得系统可以在任何路径下识别java命令。)"></a>2.在系统变量中的path中添加(Path使得系统可以在任何路径下识别java命令。)</h3><p>　;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</p><h3 id="3、新建系统变量CLASSPATH-CLASSPATH为java加载类-class-or-lib-路径，只有类在classpath中，java命令才能识别"><a href="#3、新建系统变量CLASSPATH-CLASSPATH为java加载类-class-or-lib-路径，只有类在classpath中，java命令才能识别" class="headerlink" title="3、新建系统变量CLASSPATH(CLASSPATH为java加载类(class or lib)路径，只有类在classpath中，java命令才能识别.)"></a>3、新建系统变量CLASSPATH(CLASSPATH为java加载类(class or lib)路径，只有类在classpath中，java命令才能识别.)</h3><p>　设定值为：.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar<br>　注意 一定要加“.”，“.”代表当前目录，即可到处建立.java文件，java class都能找到并编译运行用户的.java文件。</p><h3 id="4-进入dos窗口运行“java-–version”-如果显示下面内容则成功。"><a href="#4-进入dos窗口运行“java-–version”-如果显示下面内容则成功。" class="headerlink" title="4.进入dos窗口运行“java –version” 如果显示下面内容则成功。"></a>4.进入dos窗口运行“java –version” 如果显示下面内容则成功。</h3><p><img src="/images/2016-10-18/jdk-config.png" alt="Java -version"></p><hr>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Jdk </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于SpringCloud中国社区以及国内使用情况</title>
      <link href="/sc/springcloud/"/>
      <url>/sc/springcloud/</url>
      <content type="html"><![CDATA[<h2 id="Spring-Cloud中国社区起源"><a href="#Spring-Cloud中国社区起源" class="headerlink" title="Spring Cloud中国社区起源"></a>Spring Cloud中国社区起源</h2><p>  其实当Spring Cloud项目刚在github上出现的时候，我就一直在关注其项目发展，到了2015年8月，由于个人兴趣研究Spring Cloud项目，由于国内相关文档较少，当时就想建立一个中国社区，于是就先把域名注册了，选中域名为springcloud.cn。<br> <img src="/images/domainname.png" alt="springcloud.cn"></p><h2 id="为什么要发起Spring-Cloud中国社区"><a href="#为什么要发起Spring-Cloud中国社区" class="headerlink" title="为什么要发起Spring Cloud中国社区"></a>为什么要发起Spring Cloud中国社区</h2><p> Spring Cloud发展到2016年，国内关注的人越来越多，但是相应学习交流的平台和材料比较分散，不利于学习交流，因此Spring Cloud中国社区应运而生。<br> <img src="/images/sc.jpg" alt="社区标识"><br>　Spring Cloud中国社区是国内首个Spring Cloud构建微服务架构的交流社区。我们致力于为Spring Boot或Spring Cloud技术人员提供分享和交流的平台，推动Spring Cloud在中国的普及和应用。 欢迎CTO、架构师、开发者等，在这里学习与交流使用Spring Cloud的实战经验。 目前QQ群人数:7000+,微信群:2000+.<br> 扫描下面二维码或者微信搜索SpringCloud，关注社区公众号<br>  <img src="/images/gzh.jpg" alt="社区微信公众号"><br> Spring Cloud中国社区QQ群①:415028731<br> Spring cloud中国社区QQ群②:530321604<br> Spring Cloud中国社区官网:<a href="http://springcloud.cn" target="_blank" rel="noopener">http://springcloud.cn</a><br> Spring Cloud中国社区论坛:<a href="http://springcloud.cn" target="_blank" rel="noopener">http://springcloud.cn</a><br> Spring Cloud中国社区文档:<a href="http://docs.springcloud.cn" target="_blank" rel="noopener">http://docs.springcloud.cn</a></p><h2 id="spring-cloud目前国内使用情况"><a href="#spring-cloud目前国内使用情况" class="headerlink" title="spring cloud目前国内使用情况"></a>spring cloud目前国内使用情况</h2><ol><li>中国联通子公司<br><a href="http://flp.baidu.com/feedland/video/?entry=box_searchbox_feed&amp;id=144115189637730162&amp;from=timeline&amp;isappinstalled=0" target="_blank" rel="noopener">http://flp.baidu.com/feedland/video/?entry=box_searchbox_feed&amp;id=144115189637730162&amp;from=timeline&amp;isappinstalled=0</a><a id="more"></a></li><li>上海米么金服</li><li>指点无限（北京）科技有限公司 </li><li>易保软件 目前在定制开发中<br>  <a href="http://www.ebaotech.com/cn/" target="_blank" rel="noopener">http://www.ebaotech.com/cn/</a></li><li>广州简法网络</li><li>深圳睿云智合科技有限公司<br>  持续交付产品基于Spring Cloud研发 <a href="http://www.wise2c.com" target="_blank" rel="noopener">http://www.wise2c.com</a></li><li>猪八戒网</li><li>上海云首科技有限公司</li><li>华为<br>  整合netty进来用rpc 包括nerflix那套东西 需要注意的是sleuth traceid的传递需要自己写。tps在物理机上能突破20w</li><li>东软</li><li>南京云帐房网络科技有限公司</li><li>四众互联(北京)网络科技有限公司</li><li>深圳摩令技术科技有限公司</li><li>广州万表网</li><li>视觉中国</li><li>上海秦苍信息科技有限公司-买单侠</li><li>爱油科技(大连)有限公司<br><a href="http://blog.xujin.org/sc/sc-fx1/" target="_blank" rel="noopener">爱油科技基于SpringCloud的微服务实践</a></li><li>广发银行</li><li>卖货郎(<a href="http://www.51mhl.com/）" target="_blank" rel="noopener">http://www.51mhl.com/）</a></li><li>拍拍贷</li><li>甘肃电信</li><li>新浪商品部</li><li>春秋航空</li><li>冰鉴科技</li><li>万达网络科技集团-共享商业平台-共享供应链中心</li><li>网易乐得技术团队</li><li>饿了么某技术团队</li><li>高阳捷迅信息科技–话费中心业务平台–凭证查询及收单系统<br>数据在统计之中，会一直持续更新，敬请期待！</li></ol><h2 id="捐赠社区发展"><a href="#捐赠社区发展" class="headerlink" title="捐赠社区发展"></a>捐赠社区发展</h2><h3 id="捐赠社区"><a href="#捐赠社区" class="headerlink" title="捐赠社区"></a>捐赠社区</h3><p>   如果你觉得，Spring Cloud中国社区还可以，为了更好的发展，你可以捐赠社区，点击下面的打赏捐赠，捐赠的钱将用于社区发展和线下meeting up。</p>]]></content>
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>并发编程总结之线程间的通信</title>
      <link href="/bf/bf-thread-singal/"/>
      <url>/bf/bf-thread-singal/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:使用wait/notify方法实现线程间的通信。<code>wait和notify</code>必须配合<code>synchronized</code>关键字使用，<code>wait</code>方法<code>释放锁</code>，<code>notify</code>方法<code>不释放锁</code>。</p><h3 id="线程间通信概念"><a href="#线程间通信概念" class="headerlink" title="线程间通信概念"></a>线程间通信概念</h3><p> 线程是操作系统中独立的个体，但这些个体如果不经过特殊的处理就不能成为一个整体，线程间的通信就成为整体的必用方式之一。当线程存在通信指挥，系统间的交互会更加强大，在提高CPU利用率的同时还会使开发人员对线程任务在处理的过程中进行有效的把控与监督。</p><h3 id="wait-notify实现线程通信"><a href="#wait-notify实现线程通信" class="headerlink" title="wait/notify实现线程通信"></a>wait/notify实现线程通信</h3><p>  使用wait/notify方法实现线程间的通信。注意这两个方法都是Object的类方法，换句话说Java为所有的对象提供了这个两个方法。<br> 1.<code>wait和notify</code>必须配合<code>synchronized</code>关键字使用<br> 2.<code>wait</code>方法<code>释放锁</code>，<code>notify</code>方法<code>不释放锁</code>。<br><a id="more"></a></p><h4 id="最原始线程间通信代码"><a href="#最原始线程间通信代码" class="headerlink" title="最原始线程间通信代码"></a>最原始线程间通信代码</h4><p>如下面代码所示，t1,t2两个线程，t1线程一直循环add，t2线程一直循环，当t1线程把list的size变为5的时候，t2线程抛出异常停止。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListAdd1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.add(<span class="string">"test...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ListAdd1 list1 = <span class="keyword">new</span> ListAdd1();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                        list1.add();</span><br><span class="line">                        System.out</span><br><span class="line">                                .println(<span class="string">"当前线程："</span> + Thread.currentThread().getName() + <span class="string">"添加了一个元素.."</span>);</span><br><span class="line">                        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (list1.size() == <span class="number">5</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"当前线程收到通知："</span> + Thread.currentThread().getName()</span><br><span class="line">                                + <span class="string">" list size = 5 线程停止.."</span>);</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="wait和notify实现线程间通信代码"><a href="#wait和notify实现线程间通信代码" class="headerlink" title="wait和notify实现线程间通信代码"></a><code>wait和notify</code>实现线程间通信代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListAdd2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.add(<span class="string">"test......."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ListAdd2 list2 = <span class="keyword">new</span> ListAdd2();</span><br><span class="line">        <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"t1启动.."</span>);</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                            list2.add();</span><br><span class="line">                            System.out.println(</span><br><span class="line">                                    <span class="string">"当前线程："</span> + Thread.currentThread().getName() + <span class="string">"添加了一个元素.."</span>);</span><br><span class="line">                            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                            <span class="keyword">if</span> (list2.size() == <span class="number">5</span>) &#123;</span><br><span class="line">                                System.out.println(<span class="string">"已经发出通知.."</span>);</span><br><span class="line">                                lock.notify();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"t2启动.."</span>);</span><br><span class="line">                    <span class="keyword">if</span> (list2.size() != <span class="number">5</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">//t2线程，拿到了锁，但是size不等于5,所以lock.wait(),释放了锁，然后t1得到t2释放的锁。</span></span><br><span class="line">                            System.out.println(<span class="string">"size() != 5,t2 wait释放锁！.."</span>);</span><br><span class="line">                            lock.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">"当前线程："</span> + Thread.currentThread().getName() + <span class="string">"收到通知线程停止.."</span>);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果分析如下:<br><img src="/images/bf/tx1.png" alt=""></p><blockquote><p>通过上面的运行结果分析，可以看出线程间的通信，因为持有锁的问题，使用wait、notify线程间通信，没法做到实时通信。</p></blockquote><h4 id="使用java-util-concurrent下的CountDownLatch实现实时通信"><a href="#使用java-util-concurrent下的CountDownLatch实现实时通信" class="headerlink" title="使用java.util.concurrent下的CountDownLatch实现实时通信"></a>使用java.util.concurrent下的CountDownLatch实现实时通信</h4><p>示例代码，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListAdd3</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">list.add(<span class="string">"test......."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> list.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> ListAdd3 list2 = <span class="keyword">new</span> ListAdd3();</span><br><span class="line"><span class="comment">// final Object lock = new Object();</span></span><br><span class="line"><span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// synchronized (lock) &#123;</span></span><br><span class="line">System.out.println(<span class="string">"t1启动.."</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">list2.add();</span><br><span class="line">System.out.println(</span><br><span class="line"><span class="string">"当前线程："</span> + Thread.currentThread().getName() + <span class="string">"添加了一个元素.."</span>);</span><br><span class="line">Thread.sleep(<span class="number">500</span>);</span><br><span class="line"><span class="keyword">if</span> (list2.size() == <span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"已经发出通知.."</span>);</span><br><span class="line"><span class="comment">// lock.notify();</span></span><br><span class="line">countDownLatch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// synchronized (lock) &#123;</span></span><br><span class="line">System.out.println(<span class="string">"t2启动.."</span>);</span><br><span class="line"><span class="keyword">if</span> (list2.size() != <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// lock.wait();</span></span><br><span class="line">countDownLatch.await();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(</span><br><span class="line"><span class="string">"当前线程："</span> + Thread.currentThread().getName() + <span class="string">"收到通知线程停止.."</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;, <span class="string">"t2"</span>);</span><br><span class="line">t2.start();</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>countDownLatch.countDown();相当于lock.notify()；countDownLatch.await()相当于lock.wait();</p></blockquote><p>如果final CountDownLatch countDownLatch = new CountDownLatch(2);需要countDownLatch.countDown()两次如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ListAdd3 list2 = <span class="keyword">new</span> ListAdd3();</span><br><span class="line"><span class="comment">// final Object lock = new Object();</span></span><br><span class="line"><span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">2</span>);</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// synchronized (lock) &#123;</span></span><br><span class="line">System.out.println(<span class="string">"t1启动.."</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">list2.add();</span><br><span class="line">System.out.println(</span><br><span class="line"><span class="string">"当前线程："</span> + Thread.currentThread().getName() + <span class="string">"添加了一个元素.."</span>);</span><br><span class="line">Thread.sleep(<span class="number">500</span>);</span><br><span class="line"><span class="keyword">if</span> (list2.size() == <span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"已经发出通知.."</span>);</span><br><span class="line"><span class="comment">// lock.notify();</span></span><br><span class="line">countDownLatch.countDown();</span><br><span class="line">countDownLatch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">"t1"</span>);</span><br></pre></td></tr></table></figure><h4 id="使用wait-notify模拟Queue"><a href="#使用wait-notify模拟Queue" class="headerlink" title="使用wait/notify模拟Queue"></a>使用wait/notify模拟Queue</h4><p>  <strong>BlockingQueue</strong>：顾名思义阻塞队列，首先它是一个队列，并且支持阻塞的机制，阻塞的放入和得到数据。我们要实现LinkedBlockingQueue下面两个简单的方法put和get和take。<br>   <strong>put(aObject)</strong>:把一个对象aobject加到BlockingQueue里，如果BlockQueue没有空间，则调用此方法的线程被阻断，直到BlockingQueue里面有空间再继续。<br>   <strong>take</strong>：取走BlockingQueue里排在首位的对象，若BlockingQueue为空，阻断进入等待状态，直到BlockingQueue有新的数据被加入。<br>示例代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用wait/notify模拟Queue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImitateQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 承载元素的集合</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> LinkedList&lt;Object&gt; list = <span class="keyword">new</span> LinkedList&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数器进行计数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 制定元素的上限和下限</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxSize;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> minSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一个对象用于加锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ImitateQueue</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把一个对象aobject加到BlockingQueue里，如果BlockQueue没有空间，则调用此方法的线程被阻断，直到BlockingQueue里面有空间再继续增加</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line"><span class="keyword">while</span> (count.get() == maxSize) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 当队列中数据塞满，线程等待</span></span><br><span class="line">lock.wait();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">list.add(obj);</span><br><span class="line"><span class="comment">// 计数器自增</span></span><br><span class="line">count.getAndIncrement();</span><br><span class="line">System.out.println(<span class="string">" 元素 "</span> + obj + <span class="string">" 被添加 "</span>);</span><br><span class="line"><span class="comment">// 唤醒之前等待阻塞的take方法线程取数据</span></span><br><span class="line">lock.notify();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取走BlockingQueue里排在首位的对象，若BlockingQueue为空，阻断进入等待状态，直到BlockingQueue有新的数据被加入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Object temp = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line"><span class="keyword">while</span> (count.get() == minSize) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 当队列中的元素，取完，该线程等待</span></span><br><span class="line">lock.wait();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计数器递减</span></span><br><span class="line">count.getAndDecrement();</span><br><span class="line"><span class="comment">// 取出元素</span></span><br><span class="line">temp = list.removeFirst();</span><br><span class="line">System.out.println(<span class="string">" 元素 "</span> + temp + <span class="string">" 被消费 "</span>);</span><br><span class="line"><span class="comment">// 唤醒之前阻塞的put方法把元素放进去</span></span><br><span class="line">lock.notify();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> ImitateQueue m = <span class="keyword">new</span> ImitateQueue(<span class="number">5</span>);</span><br><span class="line">m.put(<span class="string">"a"</span>);</span><br><span class="line">m.put(<span class="string">"b"</span>);</span><br><span class="line">m.put(<span class="string">"c"</span>);</span><br><span class="line">m.put(<span class="string">"d"</span>);</span><br><span class="line">m.put(<span class="string">"e"</span>);</span><br><span class="line">System.out.println(<span class="string">"当前元素个数："</span> + m.size());</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">m.put(<span class="string">"h"</span>);</span><br><span class="line">m.put(<span class="string">"i"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Object t1 = m.take();</span><br><span class="line">System.out.println(<span class="string">"被取走的元素为："</span> + t1);</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">Object t2 = m.take();</span><br><span class="line">System.out.println(<span class="string">"被取走的元素为："</span> + t2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 休眠2秒钟</span></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程序运行结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> 元素 a 被添加 </span><br><span class="line"> 元素 b 被添加 </span><br><span class="line"> 元素 c 被添加 </span><br><span class="line"> 元素 d 被添加 </span><br><span class="line"> 元素 e 被添加 </span><br><span class="line">当前元素个数：5</span><br><span class="line"> 元素 a 被消费 </span><br><span class="line">被取走的元素为：a</span><br><span class="line"> 元素 h 被添加 </span><br><span class="line"> 元素 b 被消费 </span><br><span class="line">被取走的元素为：b</span><br><span class="line"> 元素 i 被添加</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>并发编程总结之volatile</title>
      <link href="/bf/bf-volatile/"/>
      <url>/bf/bf-volatile/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本节主要介绍了 volatile关键字的作用是使变量在多个线程间可见,但是不具有原子性，以及volatile的运行内存介绍。</p><ol><li><p>在java中，每个线程都会有一块<code>工作内存区</code>，其中存放着<code>所有线程共享</code>的<code>主内存中</code>的<code>变量值</code>的拷贝。当线程执行时，它在自己的<code>工作区内存中</code>操作<code>这些变量</code>。为了存取一个共享的变量，一个线程通常会先<code>获取锁定</code>并<code>清除它的内存工作区</code>，把这些<code>共享变量</code>从所有线程的<code>共享内存中</code>正确的装入到<code>它自己所在的工作内存中</code>，当线程解锁时，保证该工作内存中变量的值写回到共享内存中。 </p><a id="more"></a></li><li><p>volatile的作用就是<code>强制线程到主内存</code>(共享内存)里去读取变量，而不去线程工作区内存里去读取，从而实现了多个线程间的变量可见，也就是满足线程安全的可见性。</p></li></ol><hr><h2 id="volatile概念"><a href="#volatile概念" class="headerlink" title="volatile概念"></a>volatile概念</h2><h3 id="volatile概念-具有可见性"><a href="#volatile概念-具有可见性" class="headerlink" title="volatile概念-具有可见性"></a>volatile概念-具有可见性</h3><p> volatile关键字的作用是<code>使变量</code>在<code>多个线程间</code>可见。</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p>如下代码所示，当isRunning没有被volatile关键字修饰的时候，程序一直循环，线程不会结束。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// isRunning没有被volatile关键字修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isRunning = <span class="keyword">true</span>;<span class="comment">//①</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRunning</span><span class="params">(<span class="keyword">boolean</span> isRunning)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isRunning = isRunning;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始进入run方法.."</span>);</span><br><span class="line">        <span class="keyword">while</span> (isRunning == <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 一直循环........</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"while循环结束,线程停止"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        RunThread rt = <span class="keyword">new</span> RunThread();</span><br><span class="line">        rt.start();</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        rt.setRunning(<span class="keyword">false</span>);</span><br><span class="line">        System.out.println(<span class="string">"isRunning的值已经被设置了false"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(rt.isRunning);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当把上述代码的①处，修改为如下时:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> isRunning = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure></p><p>运行结果是isRunning修改为false之后，线程读取到isRunning = false，从而线程结束while循环，线程退出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开始进入run方法..</span><br><span class="line">isRunning的值已经被设置了false</span><br><span class="line">while循环结束,线程停止</span><br><span class="line">false</span><br></pre></td></tr></table></figure></p><h4 id="示例代码线程操作内存简图"><a href="#示例代码线程操作内存简图" class="headerlink" title="示例代码线程操作内存简图"></a>示例代码线程操作内存简图</h4><p><img src="/images/bf/volatile-boolean.png" alt=""></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ol><li>在java中，每个线程都会有一块工作内存区，其中存放着所有线程共享的主内存中的变量值得拷贝。当线程执行时，它在自己的工作区内存中操作这些变量。为了存取一个共享的变量，一个线程通常会先获取锁定并清除它的内存工作区，把这些共享变量从所有线程的共享内存中正确的装入到它自己所在的工作内存中，当线程解锁时，保证该工作内存中变量的值写回到共享内存中。</li><li>一个线程可以执行的操作有<code>使用</code>(use)，<code>赋值</code>(assign),<code>装载</code>(load),<code>存储</code>(store),<code>锁定</code>(lock),解锁(unlock)。而<code>主内存</code>可以执行的操作有<code>读(read),写(write),锁定(lock),解锁（unlock)</code>，每个操作都是原子的。</li><li>volatile的作用就是<code>强制线程</code>到<code>主内存</code>(共享内存)里<code>去读取变量</code>，而不去<code>线程工作区</code>内存里去读取，从而实现了<code>多个线程间的变量可见</code>，也就是满足线程安全的可见性。</li></ol><h3 id="volatile-不具有原子性"><a href="#volatile-不具有原子性" class="headerlink" title="volatile-不具有原子性"></a>volatile-不具有原子性</h3><p>  volatile关键字虽然拥有多个线程之间的<code>可见性</code>，但是不具备<code>同步性，也就是原子性</code>，可以算得上一个<code>轻量级别的synchronized,性能要比synchronized强很多</code>，不会造成阻塞(在很多开源框架，比如Netty的底层代码就大量的使用volatile，由此可见Netty的性能非常不错),但是需要注意的是，volatile用于只针对于多个线程可见的变量操作，并不能替代synchronized的同步功能。</p><h4 id="示例代码1"><a href="#示例代码1" class="headerlink" title="示例代码1"></a>示例代码1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileNoAtomic</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        addCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        VolatileNoAtomic[] arr = <span class="keyword">new</span> VolatileNoAtomic[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            arr[i] = <span class="keyword">new</span> VolatileNoAtomic();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            arr[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果，随机因为volatile没有原子性，所以最终打印结果不是10000</p><h4 id="示例代码2"><a href="#示例代码2" class="headerlink" title="示例代码2"></a>示例代码2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileNoAtomic</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            count.incrementAndGet();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        addCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        VolatileNoAtomic[] arr = <span class="keyword">new</span> VolatileNoAtomic[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            arr[i] = <span class="keyword">new</span> VolatileNoAtomic();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            arr[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行最终打印结果是:10000</p><blockquote><p>小结:volatile关键字只有<code>可见性</code>，没有<code>原子性</code>。要实现原子性建议使用<code>atomic类的系列对象</code>，支持原子性操作。</p></blockquote><p>注意atomic类只保证本身方法的原子性，并不保证多次操作的原子性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.multithread.sync007;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicUse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">   <span class="comment">// 多个addAndGet在一个方法内是非原子性的，需要加synchronized进行修饰，保证4个addAndGet整体原子性</span></span><br><span class="line">    <span class="comment">/** synchronized */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">multiAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        count.addAndGet(<span class="number">1</span>);</span><br><span class="line">        count.addAndGet(<span class="number">2</span>);</span><br><span class="line">        count.addAndGet(<span class="number">3</span>);</span><br><span class="line">        count.addAndGet(<span class="number">4</span>); <span class="comment">// +10,执行到这里相当于加10-&gt;1+2+3+4=10，</span></span><br><span class="line">        <span class="keyword">return</span> count.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> AtomicUse au = <span class="keyword">new</span> AtomicUse();</span><br><span class="line"></span><br><span class="line">        List&lt;Thread&gt; ts = <span class="keyword">new</span> ArrayList&lt;Thread&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            ts.add(<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(au.multiAdd());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Thread t : ts) &#123;</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>并发编程总结之synchronized细节问题</title>
      <link href="/bf/bf-synchronized/"/>
      <url>/bf/bf-synchronized/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong>:本节主要介绍了并发编程下怎么避免数据脏读和什么是synchronized的可重入锁，synchronized的可重入锁的几种使用场景下，是线程安全的。以及一些细节的synchronized使用问题和synchronized常见代码块示例Code可以直接Copy运行。</p><hr><h2 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h2><h3 id="什么是脏读"><a href="#什么是脏读" class="headerlink" title="什么是脏读"></a>什么是脏读</h3><p>   对于对象的同步和异步方法，我们在设计程序，一定要考虑问题的整体性，不然会出现数据不一致的错误，最经典的错误就是脏读(DirtyRead)。</p><h3 id="示例Code"><a href="#示例Code" class="headerlink" title="示例Code"></a>示例Code</h3><p>业务整体需要使用完整的synchronized，保持业务的原子性。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务整体需要使用完整的synchronized，保持业务的原子性。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirtyRead</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username = <span class="string">"xujin"</span>;</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">"123"</span>;</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"setValue最终结果：username = "</span> + username + <span class="string">" , password = "</span> + password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//①这里getValue没有加synchronized修饰</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"getValue方法得到：username = "</span> + <span class="keyword">this</span>.username + <span class="string">" , password = "</span> + <span class="keyword">this</span>.password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> DirtyRead dr = <span class="keyword">new</span> DirtyRead();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                dr.setValue(<span class="string">"张三"</span>, <span class="string">"456"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        dr.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的Code中，getValue没有加synchronized修饰，打印结果如下,出现脏读<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getValue方法得到：username = 张三 , password = 123</span><br><span class="line">setValue最终结果：username = 张三 , password = 456</span><br></pre></td></tr></table></figure></p><p>只需在getValue加synchronized修饰，如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"getValue方法得到：username = "</span> + <span class="keyword">this</span>.username + <span class="string">" , password = "</span> + <span class="keyword">this</span>.password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果如下,没有造成数据脏读<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setValue最终结果：username = 张三 , password = 456</span><br><span class="line">getValue方法得到：username = 张三 , password = 456</span><br></pre></td></tr></table></figure></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p> 在我们对对象中的一个方法加锁的时候，需要考虑业务的或程序的整体性，也就是为程序中的set和get方法同时加锁synchronized同步关键字，保证业务的(service层)的原子性，不然会出现数据错误，脏读。</p><h2 id="synchronized的重入"><a href="#synchronized的重入" class="headerlink" title="synchronized的重入"></a>synchronized的重入</h2><h3 id="什么是synchronized的重入锁"><a href="#什么是synchronized的重入锁" class="headerlink" title="什么是synchronized的重入锁"></a>什么是synchronized的重入锁</h3><ol><li>synchronized,它拥有强制原子性的内置锁机制,是一个重入锁,所以在使用synchronized时,当一个线程请求得到一个对象锁后再次请求此对象锁,可以再次得到该对象锁,就是说在一个synchronized方法/块的内部调用本类的其他synchronized方法/块时，是永远可以拿到锁。</li><li>当线程请求一个由其它线程持有的对象锁时，该线程会阻塞，而当线程请求由自己持有的对象锁时，如果该锁是重入锁,请求就会成功,否则阻塞.</li></ol><blockquote><p>简单的说:关键字synchronized具有<code>锁重入</code>的功能，也就是在使用<code>synchronized时</code>，<code>当一个线程</code>得到一个<code>对象锁</code>的<code>锁后</code>，<code>再次请求此对象时</code>可以<code>再次</code>得到该<code>对象对应的锁</code>。</p></blockquote><h3 id="嵌套调用关系synchronized的重入"><a href="#嵌套调用关系synchronized的重入" class="headerlink" title="嵌套调用关系synchronized的重入"></a>嵌套调用关系synchronized的重入</h3><p>嵌套调用关系synchronized的重入也是线程安全的，下面是method1，method2，method3都被synchronized修饰，调用关系method1–&gt;method2–&gt;method3,也是线程安全的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * synchronized的重入</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncReenTrant</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method1.."</span>);</span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method2.."</span>);</span><br><span class="line">        method3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method3.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> SyncReenTrant sd = <span class="keyword">new</span> SyncReenTrant();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                sd.method1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>运行结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method1..</span><br><span class="line">method2..</span><br><span class="line">method3..</span><br></pre></td></tr></table></figure></p><h3 id="继承关系的synchronized的重入"><a href="#继承关系的synchronized的重入" class="headerlink" title="继承关系的synchronized的重入"></a>继承关系的synchronized的重入</h3><p>简单 Code1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class Son extends Father &#123;</span><br><span class="line"></span><br><span class="line">    public synchronized void doSomething() &#123;</span><br><span class="line">        System.out.println(&quot;child.doSomething()&quot;);</span><br><span class="line">        // 调用自己类中其他的synchronized方法</span><br><span class="line">        doAnotherThing();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private synchronized void doAnotherThing() &#123;</span><br><span class="line">        // 调用父类的synchronized方法</span><br><span class="line">        super.doSomething();</span><br><span class="line">        System.out.println(&quot;child.doAnotherThing()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Son child = new Son();</span><br><span class="line">        child.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Father &#123;</span><br><span class="line">    public synchronized void doSomething() &#123;</span><br><span class="line">        System.out.println(&quot;father.doSomething()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">child.doSomething()</span><br><span class="line">father.doSomething()</span><br><span class="line">child.doAnotherThing()</span><br></pre></td></tr></table></figure></p><ol><li>这里的对象锁只有一个,就是child对象的锁,当执行child.doSomething时，该线程获得child对象的锁，在doSomething方法内执行doAnotherThing时再次请求child对象的锁，因为synchronized是重入锁，所以可以得到该锁，继续在doAnotherThing里执行父类的doSomething方法时第三次请求child对象的锁，同理可得到，如果不是重入锁的话，那这后面这两次请求锁将会被一直阻塞，从而导致死锁。</li><li>所以在Java内部，同一线程在调用自己类中其他synchronized方法/块或调用父类的synchronized方法/块都不会阻碍该线程的执行，就是说同一线程对同一个对象锁是可重入的，而且同一个线程可以获取同一把锁多次，也就是可以多次重入。因为java线程是基于“每线程（per-thread）”，而不是基于“每调用（per-invocation）”的（java中线程获得对象锁的操作是以每线程为粒度的，per-invocation互斥体获得对象锁的操作是以每调用作为粒度的）</li></ol><blockquote><p>我们再来看看重入锁是怎么实现可重入性的，其实现方法是为每个锁关联一个线程持有者和计数器，当计数器为0时表示该锁没有被任何线程持有，那么任何线程都可能获得该锁而调用相应的方法；当某一线程请求成功后，JVM会记下锁的持有线程，并且将计数器置为1；此时其它线程请求该锁，则必须等待；而该持有锁的线程如果再次请求这个锁，就可以再次拿到这个锁，同时计数器会递增；当线程退出同步代码块时，计数器会递减，如果计数器为0，则释放该锁。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncExtends</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">operationSup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                i--;</span><br><span class="line">                System.out.println(<span class="string">"Father print i = "</span> + i);</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子类继承父类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">operationSub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    i--;</span><br><span class="line">                    System.out.println(<span class="string">"Son print i = "</span> + i);</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    <span class="keyword">this</span>.operationSup();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Son sub = <span class="keyword">new</span> Son();</span><br><span class="line">                sub.operationSub();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Son print i = 9</span><br><span class="line">Father print i = 8</span><br><span class="line">Son print i = 7</span><br><span class="line">Father print i = 6</span><br><span class="line">Son print i = 5</span><br><span class="line">Father print i = 4</span><br><span class="line">Son print i = 3</span><br><span class="line">Father print i = 2</span><br><span class="line">Son print i = 1</span><br><span class="line">Father print i = 0</span><br></pre></td></tr></table></figure></p><p>参考文章:<br><a href="http://blog.csdn.net/aigoogle/article/details/29893667" target="_blank" rel="noopener">http://blog.csdn.net/aigoogle/article/details/29893667</a></p><h3 id="synchronized常见代码块"><a href="#synchronized常见代码块" class="headerlink" title="synchronized常见代码块"></a>synchronized常见代码块</h3><ol><li>synchronized可以使用任意的Object进行加锁， 使用synchronized代码块加锁,比较灵活，如下代码所示:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对this当前ObjectLock实例对象加锁</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"do method1.."</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对ObjectLock类加锁</span></span><br><span class="line">        <span class="keyword">synchronized</span> (ObjectLock.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"do method2.."</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 任何对象锁</span></span><br><span class="line">    <span class="keyword">private</span> Object anyObjectlock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (anyObjectlock) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"do method3.."</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ObjectLock objLock = <span class="keyword">new</span> ObjectLock();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                objLock.method1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                objLock.method2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                objLock.method3();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.使用synchronized声明的方法在某些情况下，是有弊端的，比如A线程调用同步的方法执行一个很长时间的任务,那么B线程就必须等待很长的时间才可以执行，这样情况下可以使用synchronize的去优化代码执行时间，也就是我们通常所说的减小锁的粒度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Optimize</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doLongTimeTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"当前线程开始："</span> + Thread.currentThread().getName() + <span class="string">", 正在执行一个较长时间的业务操作，其内容不需要同步"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            <span class="comment">// 使用synchronized代码块减小锁的粒度，提高性能</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"当前线程："</span> + Thread.currentThread().getName() + <span class="string">", 执行同步代码块，对其同步变量进行操作"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"当前线程结束："</span> + Thread.currentThread().getName() + <span class="string">", 执行完毕"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Optimize otz = <span class="keyword">new</span> Optimize();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                otz.doLongTimeTask();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                otz.doLongTimeTask();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当前线程开始：t1, 正在执行一个较长时间的业务操作，其内容不需要同步</span><br><span class="line">当前线程开始：t2, 正在执行一个较长时间的业务操作，其内容不需要同步</span><br><span class="line">当前线程：t2, 执行同步代码块，对其同步变量进行操作</span><br><span class="line">当前线程结束：t2, 执行完毕</span><br><span class="line">当前线程：t1, 执行同步代码块，对其同步变量进行操作</span><br><span class="line">当前线程结束：t1, 执行完毕</span><br></pre></td></tr></table></figure><p>3.注意就是不要使用String的常量加锁，会出现死循环问题。</p><p>   synchronized代码块对字符串的锁，注意String常量池的缓存功能,示例代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="string">"字符串常量"</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"当前线程 : "</span>  + Thread.currentThread().getName() + <span class="string">"开始"</span>);</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">System.out.println(<span class="string">"当前线程 : "</span>  + Thread.currentThread().getName() + <span class="string">"结束"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> StringLock stringLock = <span class="keyword">new</span> StringLock();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">stringLock.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;,<span class="string">"t1"</span>);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">stringLock.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;,<span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>提示</strong>:运行结果是:<strong>t1线程一直死循环</strong>。<strong>t2线程不执行</strong>。修改为如下代码,t1和t2线程交替执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//把synchronized ("字符串常量") 修改为synchronized (new String("字符串常量"))</span></span><br><span class="line">       <span class="keyword">synchronized</span> (<span class="keyword">new</span> String(<span class="string">"字符串常量"</span>)) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                   System.out.println(<span class="string">"当前线程 : "</span> + Thread.currentThread().getName() + <span class="string">"开始"</span>);</span><br><span class="line">                   Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                   System.out.println(<span class="string">"当前线程 : "</span> + Thread.currentThread().getName() + <span class="string">"结束"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>4.锁对象的改变问题:<br>   当使用一个对象进行加锁的时候，要注意对象本身发生变化的时候，那么持有的锁就不同。如果对象本身不发生改变，那么依然是同步的，即使是对象的属性发生了变化。</p><p>   4.1 示例代码1:<code>对象本身发生变化的时候,那么对象持有的锁就发生变化</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lock = <span class="string">"lock"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"当前线程 : "</span> + Thread.currentThread().getName() + <span class="string">"开始"</span>);</span><br><span class="line">                <span class="comment">// 这里把锁的内容改变了，因此t1,t2线程基本同时进来，而不是t1休眠2秒后，t2进来</span></span><br><span class="line">                lock = <span class="string">"change lock"</span>;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                System.out.println(<span class="string">"当前线程 : "</span> + Thread.currentThread().getName() + <span class="string">"结束"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ChangeLock changeLock = <span class="keyword">new</span> ChangeLock();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                changeLock.method();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                changeLock.method();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   4.2 示例代码2:<code>同一对象属性的修改不会影响锁的情况</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModifyLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">changeAttributte</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"当前线程 : "</span> + Thread.currentThread().getName() + <span class="string">" 开始"</span>);</span><br><span class="line">            <span class="keyword">this</span>.setName(name);</span><br><span class="line">            <span class="keyword">this</span>.setAge(age);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"当前线程 : "</span> + Thread.currentThread().getName() + <span class="string">" 修改对象内容为： "</span> + <span class="keyword">this</span>.getName() + <span class="string">", "</span></span><br><span class="line">                    + <span class="keyword">this</span>.getAge());</span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(<span class="string">"当前线程 : "</span> + Thread.currentThread().getName() + <span class="string">" 结束"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ModifyLock modifyLock = <span class="keyword">new</span> ModifyLock();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                modifyLock.changeAttributte(<span class="string">"许进"</span>, <span class="number">25</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                modifyLock.changeAttributte(<span class="string">"李四X"</span>, <span class="number">21</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   运行结果:<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当前线程 : t1 开始</span><br><span class="line">当前线程 : t1 修改对象内容为： 许进, 25</span><br><span class="line">当前线程 : t1 结束</span><br><span class="line">当前线程 : t2 开始</span><br><span class="line">当前线程 : t2 修改对象内容为： 李四X, 21</span><br><span class="line">当前线程 : t2 结束</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>并发编程总结之多线程基础</title>
      <link href="/bf/bf-multithread/"/>
      <url>/bf/bf-multithread/</url>
      <content type="html"><![CDATA[<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><h3 id="线程安全概念"><a href="#线程安全概念" class="headerlink" title="线程安全概念"></a>线程安全概念</h3><ol><li>当多个线程访问访问某一个<code>类(对象或方法)</code>时，这个类或对象或方法<code>始终</code>能表现出<code>正确的行为</code>或我们想要的<code>结果</code>，那么这个类(对象或方法)就是<code>线程安全</code>的。</li><li>synchronized：可以在<code>任意的对象</code>及<code>方法</code>上加锁，而加锁的这段代码称之为<code>互斥区</code>或者<code>临界区</code>。<h3 id="代码示例说明1"><a href="#代码示例说明1" class="headerlink" title="代码示例说明1"></a>代码示例说明1</h3>运行main方法，main方法里有5个线程t1到t5，同一时间启动去访问MyThread类的Run方法。<a id="more"></a><ol><li>不加synchronized关键字修饰run()方法的代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.multithread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count--;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.currentThread().getName() + <span class="string">" count = "</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 分析：当多个线程访问myThread的run方法时，以排队的方式进行处理（这里排对是按照CPU分配的先后顺序而定的）， 一个线程想要执行synchronized修饰的方法里的代码： 1 尝试获得锁 2</span></span><br><span class="line"><span class="comment">         * 如果拿到锁，执行synchronized代码体内容；拿不到锁，这个线程就会不断的尝试获得这把锁，直到拿到为止， 而且是多个线程同时去竞争这把锁。（也就是会有锁竞争的问题）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(myThread, <span class="string">"t1"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(myThread, <span class="string">"t2"</span>);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(myThread, <span class="string">"t3"</span>);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(myThread, <span class="string">"t4"</span>);</span><br><span class="line">        Thread t5 = <span class="keyword">new</span> Thread(myThread, <span class="string">"t5"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.start();</span><br><span class="line">        t5.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>运行结果如下，没有出现我们想要的结果,打印出来的线程名是无序的 count值也没按正常–，运行多次不能保证count打印的值每次一致，因此出现了线程安全问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t1 count = 2</span><br><span class="line">t2 count = 2</span><br><span class="line">t5 count = 0</span><br><span class="line">t3 count = 2</span><br><span class="line">t4 count = 1</span><br></pre></td></tr></table></figure></p><h3 id="代码示例说明2"><a href="#代码示例说明2" class="headerlink" title="代码示例说明2"></a>代码示例说明2</h3><ol><li><p>当我们加上synchronized关键字修饰run()方法后，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count--;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.currentThread().getName() + <span class="string">" count = "</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 分析：当多个线程访问myThread的run方法时，以排队的方式进行处理（这里排对是按照CPU分配的先后顺序而定的）， 一个线程想要执行synchronized修饰的方法里的代码： 1 尝试获得锁 2</span></span><br><span class="line"><span class="comment">         * 如果拿到锁，执行synchronized代码体内容；拿不到锁，这个线程就会不断的尝试获得这把锁，直到拿到为止， 而且是多个线程同时去竞争这把锁。（也就是会有锁竞争的问题）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(myThread, <span class="string">"t1"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(myThread, <span class="string">"t2"</span>);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(myThread, <span class="string">"t3"</span>);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(myThread, <span class="string">"t4"</span>);</span><br><span class="line">        Thread t5 = <span class="keyword">new</span> Thread(myThread, <span class="string">"t5"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.start();</span><br><span class="line">        t5.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加上<code>synchronized</code>运行结果如下，线程名无序，无论你执行多少次程序，count–的值都是显示我们想要的正确结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t1 count = 4</span><br><span class="line">t3 count = 3</span><br><span class="line">t4 count = 2</span><br><span class="line">t5 count = 1</span><br><span class="line">t2 count = 0</span><br></pre></td></tr></table></figure></li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p> 当多个线程访问Mythread的run方法时，以排队的方式进行处理(排队的方式是按照CPU分配的饿先后顺序而定的)，一个线程想要执行synchronized修饰的方法里的代码，首先尝试获得锁，如果拿到锁，执行synchronized中代码体内容;拿不到锁，这个线程就会不断的尝试获得这把锁，直到拿到为止，而且是多个线程同时去竞争这把锁，也就是会有竞争锁的问题。</p><h2 id="多个线程多个锁"><a href="#多个线程多个锁" class="headerlink" title="多个线程多个锁"></a>多个线程多个锁</h2><p>多个线程多个锁:多个线程，每个线程都可以拿到自己指定的锁，分别获得锁之后，执行synchronized方法体的内容。</p><h3 id="代码示例说明1-1"><a href="#代码示例说明1-1" class="headerlink" title="代码示例说明1"></a>代码示例说明1</h3><ol><li>两个线程t1,t2分别依次start，访问两个对象的synchronized修饰的printNum方法，Code如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关键字synchronized取得的锁都是对象锁，而不是把一段代码（方法）当做锁，</span></span><br><span class="line"><span class="comment"> * 所以代码中哪个线程先执行synchronized关键字的方法，哪个线程就持有该方法所属对象的锁（Lock），</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 在静态方法上加synchronized关键字，表示锁定.class类，类一级别的锁（独占.class类）。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printNum</span><span class="params">(String tag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tag.equals(<span class="string">"a"</span>)) &#123;</span><br><span class="line">                num = <span class="number">100</span>;</span><br><span class="line">                System.out.println(<span class="string">"tag a, set num over!"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                num = <span class="number">200</span>;</span><br><span class="line">                System.out.println(<span class="string">"tag b, set num over!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"tag "</span> + tag + <span class="string">", num = "</span> + num);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意观察run方法输出顺序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 两个不同的对象</span></span><br><span class="line">        <span class="keyword">final</span> MultiThread m1 = <span class="keyword">new</span> MultiThread();</span><br><span class="line">        <span class="keyword">final</span> MultiThread m2 = <span class="keyword">new</span> MultiThread();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                m1.printNum(<span class="string">"a"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                m2.printNum(<span class="string">"b"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li>执行结果如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tag a, set num over!</span><br><span class="line">tag b, set num over!</span><br><span class="line">tag b, num = 200</span><br><span class="line">tag a, num = 100</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>关键字synchronized取得的锁都是对象锁，而不是把一段代码（方法）当做锁，<br>所以代码中哪个线程先执行synchronized关键字的方法，哪个线程就持有该方法所属对象的锁（Lock）</p></blockquote><h3 id="代码示例说明2-1"><a href="#代码示例说明2-1" class="headerlink" title="代码示例说明2"></a>代码示例说明2</h3><ol><li>在静态方法上printNum（）加一个synchronized关键字修饰的话，那这个线程调用printNum()获得锁，就是这个类级别的锁。这是时候无论你实例化出多少个对象m1,m2都是没有任何关系的，代码Demo如下所示：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ②修改为static关键字修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ①修改为static修饰该方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printNum</span><span class="params">(String tag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tag.equals(<span class="string">"a"</span>)) &#123;</span><br><span class="line">                num = <span class="number">100</span>;</span><br><span class="line">                System.out.println(<span class="string">"tag a, set num over!"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                num = <span class="number">200</span>;</span><br><span class="line">                System.out.println(<span class="string">"tag b, set num over!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"tag "</span> + tag + <span class="string">", num = "</span> + num);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意观察run方法输出顺序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 俩个不同的对象</span></span><br><span class="line">        <span class="keyword">final</span> MultiThread m1 = <span class="keyword">new</span> MultiThread();</span><br><span class="line">        <span class="keyword">final</span> MultiThread m2 = <span class="keyword">new</span> MultiThread();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                m1.printNum(<span class="string">"a"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                m2.printNum(<span class="string">"b"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li>运行结果如下,可以看出<code>t1执行完了</code>，然后<code>执行t2</code>,他们之间有一个顺序<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tag a, set num over!</span><br><span class="line">tag a, num = 100</span><br><span class="line">tag b, set num over!</span><br><span class="line">tag b, num = 200</span><br></pre></td></tr></table></figure></li></ol><h3 id="多个线程多个锁小结"><a href="#多个线程多个锁小结" class="headerlink" title="多个线程多个锁小结"></a>多个线程多个锁小结</h3><ol><li>关键字<code>synchronized</code>取得的<code>锁</code>都是<code>对象锁</code>，而不是把一段代码或方法当做<code>锁</code>，所以示例中代码中的<code>哪个线程先执行synchronized关键字的方法</code>，<code>哪个线程就持有该方法对象的锁</code>，也就是Lock,两个对象，线程获得的就是两个不同的锁，他们互不影响。</li><li>有一种情况则是相同的锁，即在静态方法上加<code>synchronized</code>关键字，表示锁定<code>.class类</code>，类一级别的锁独占.class类。</li></ol><h2 id="对象锁的同步和异步"><a href="#对象锁的同步和异步" class="headerlink" title="对象锁的同步和异步"></a>对象锁的同步和异步</h2><h3 id="锁同步和异步的概念"><a href="#锁同步和异步的概念" class="headerlink" title="锁同步和异步的概念"></a>锁同步和异步的概念</h3><ol><li>同步-synchronized<br> 同步的概念就是共享，需要记住共享这个概念，如果不是共享的资源，就没有必要同步。</li><li>异步-asynchronized<br> 异步是相互独立的，相互之间不受任何约制，类似于http中的Ajax请求。</li></ol><blockquote><p>同步的目的就是为了线程安全，其实对于线程安全来说，需要满足两个特性：<code>原子性</code>，<code>可见性</code>。</p></blockquote><h3 id="代码示例1"><a href="#代码示例1" class="headerlink" title="代码示例1"></a>代码示例1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** synchronized */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">            <span class="comment">//休眠4秒</span></span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> TestObject mo = <span class="keyword">new</span> TestObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 分析： t1线程先持有TestObject对象的Lock锁，t2线程可以以异步的方式调用对象中的非synchronized修饰的方法</span></span><br><span class="line"><span class="comment">         * t1线程先持有TestObject对象的Lock锁，t2线程如果在这个时候调用对象中的同步（synchronized）方法则需等待，也就是同步</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                mo.method1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                mo.method2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下，因为t1,t2两个线程访问TestObject对象的mo的method1，method2方法是异步的，所以直接打出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t2</span><br><span class="line">t1</span><br></pre></td></tr></table></figure></p><blockquote><p>分析： t1线程若先持有TestObject对象的Lock锁，t2线程可以以异步的方式调用对象中的非synchronized修饰的方法，这就是异步。</p></blockquote><h3 id="代码示例2"><a href="#代码示例2" class="headerlink" title="代码示例2"></a>代码示例2</h3><p>把上面代码中的method2，也加上<code>synchronized</code>去修饰，代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 加上synchronized修饰method2 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> TestObject mo = <span class="keyword">new</span> TestObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 分析： t1线程先持有TestObject对象的Lock锁，t2线程可以以异步的方式调用对象中的非synchronized修饰的方法</span></span><br><span class="line"><span class="comment">         * t1线程先持有TestObject对象的Lock锁，t2线程如果在这个时候调用对象中的同步（synchronized）方法则需等待，也就是同步</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                mo.method1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                mo.method2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打印结果如下,由于CPU随机分配，若t1线程先执行，先打印t1,然后t1线程先休眠4s，后释放了Lock，然后打印t2。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t1</span><br><span class="line">t2</span><br></pre></td></tr></table></figure></p><blockquote><p>t1线程先持有TestObject对象的Lock锁，t2线程如果在这个时候调用对象中的同步（synchronized）方法则需等待，也就是同步</p></blockquote>]]></content>
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Bean Mapping之Orika的项目运用</title>
      <link href="/venus/venus-orika/"/>
      <url>/venus/venus-orika/</url>
      <content type="html"><![CDATA[<p><strong>前言</strong> 在JavaEE开发过程中，我们经常会把持久层的实体对象copy给VO，BO等，用于快速将持久层中的对象释放如下图所示。但很多时候BO，VO和Entity的结构都是类似的。刚开始通过写很多冗长的b.setF1(a.getF1())这样的代码来实现对象的Copy，后来逐渐延伸出Spring BeanUtils， CgLib BeanCopier,  Apache BeanUtils,  Dozer等快速实体映射工具jar。性能对比可以参考这篇文章:<a href="http://www.cnblogs.com/kaka/archive/2013/03/06/2945514.html" target="_blank" rel="noopener">http://www.cnblogs.com/kaka/archive/2013/03/06/2945514.html</a></p><a id="more"></a><h2 id="orika-mapper快速高效映射框架"><a href="#orika-mapper快速高效映射框架" class="headerlink" title="orika-mapper快速高效映射框架"></a>orika-mapper快速高效映射框架</h2><h3 id="为什么需要模型映射？"><a href="#为什么需要模型映射？" class="headerlink" title="为什么需要模型映射？"></a>为什么需要模型映射？</h3><p>  多次模型, 可以保证内部实体不被直接暴露, 也可使得接口层模型更为独立, 解耦实体层模型。Bean Mapping用于快速，高性能的对两个POJO对象做数据双向映射。<br>   <img src="/images/venus/bean-mapping.png" alt=""></p><h3 id="Orkia的设计思路"><a href="#Orkia的设计思路" class="headerlink" title="Orkia的设计思路"></a>Orkia的设计思路</h3><p>github:<a href="https://github.com/orika-mapper/orika" target="_blank" rel="noopener">https://github.com/orika-mapper/orika</a><br>doc:<a href="http://orika-mapper.github.io/orika-docs/" target="_blank" rel="noopener">http://orika-mapper.github.io/orika-docs/</a></p><p>Orika使用javaassist提前生成拷贝代码</p><p>   优势：避免使用反射和多次读取映射规则，性能高内存消耗低</p><p>   Orika 的设计思路就是预先通过javaassist 把Java Bean 之间的映射关系一次性生成目标拷贝方法代码。 这样就可以避免在Bean 映射环节一次次的读取映射规则。 这就是Orika 性能提升的原因。理论上以生成的目标Java 代码来运行映射是拷贝模式所能取到性能最大值的方法。</p><p>通过自定义注解的方式，Orika与Spring框架整合(在这里不描述是如何自定义整合使用)，达到高性能的模型映射，支持无配置映射，支持复杂映射，支持自定义类型转换。</p><h3 id="在实际项目中使用如下"><a href="#在实际项目中使用如下" class="headerlink" title="在实际项目中使用如下:"></a>在实际项目中使用如下:</h3><ol><li>在applicationContext.xml文件中，配置Model的通配符扫描包路径</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"orikaBeanMapper"</span> <span class="attr">class</span>=<span class="string">"com.xxxxx.xxxxx.core.beans.mapping.orika.OrikaBeanMapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.xxxxx.financing.model.**"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>在需要copy的地方依赖注入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BeanMapper beanMapper;</span><br><span class="line"> </span><br><span class="line">beanMapper.map(financingAccountModel, FinancingAccount.class)</span><br></pre></td></tr></table></figure><ol><li>entity上注解配置如下，此处省略get set方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@MapClass</span>(value=<span class="string">"com.xxx.financing.database.model.FinancingAccountModel"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinancingAccount</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">     </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> venus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目经验 </tag>
            
            <tag> Venus Framework </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在STS或eclipse中安装Lombok并使用</title>
      <link href="/ex/lombok/"/>
      <url>/ex/lombok/</url>
      <content type="html"><![CDATA[<p>lombok 提供了简单的注解的形式来帮助我们简化消除一些必须有但显得很臃肿的 java 代码。特别是相对于 POJO，使用相应的注解可以简化整个代码。<br>lombok 的官方网址：<a href="http://projectlombok.org/" target="_blank" rel="noopener">http://projectlombok.org/</a> ,从官网下载 </p><a id="more"></a><h2 id="一-安装lombok"><a href="#一-安装lombok" class="headerlink" title="一.安装lombok"></a>一.安装lombok</h2><p> 1.在STS中安装lombok</p><p>   ①找到lombok.jar，执行命令: D:\devtools&gt;java -jar  lombok.jar或者直接双击lombok.jar</p><p>   ②确认完STS的安装路径后，点击install/update按钮，即可安装完成，如下图所示</p><p> <img src="/images/tools/lombok.jpg" width="750px" height="650px"></p><p> ③安装完成之后，请确认eclipse安装路径下是否多了一个lombok.jar包，并且其</p><p>   配置文件STS.ini(eclipse打开eclipse.ini）中是否 添加了如下内容: </p><pre><code>-javaagent:lombok.jar -Xbootclasspath/a:lombok.jar </code></pre><p>   如果上面的答案均为true，那么恭喜你已经安装成功，否则将缺少的部分添加到相应的位置即可</p><h2 id="二-测试安装lombok是否成功"><a href="#二-测试安装lombok是否成功" class="headerlink" title="二.测试安装lombok是否成功"></a>二.测试安装lombok是否成功</h2><p>创建一个Java类，如下，尝试使用下面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; </span><br><span class="line"> <span class="keyword">private</span> String id; </span><br><span class="line"> <span class="keyword">private</span> String name; </span><br><span class="line"> <span class="keyword">private</span> String userId; </span><br><span class="line"> <span class="keyword">private</span> String password; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lombok </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>云计算Saas的简单描述以及多租户实现和Saas部署图</title>
      <link href="/saas/saas/"/>
      <url>/saas/saas/</url>
      <content type="html"><![CDATA[<h2 id="一-SAAS概述与概念"><a href="#一-SAAS概述与概念" class="headerlink" title="一.SAAS概述与概念"></a>一.SAAS概述与概念</h2><h3 id="1-1-Saas概述"><a href="#1-1-Saas概述" class="headerlink" title="1.1 Saas概述"></a>1.1 Saas概述</h3><ul><li><p>传统软件开发模式是软件即产品，但是云计算Saas是软件即服务，也就是说使用软件就像使用服务一样。SaaS的应用越来越流行了，它作为越来越多的公有云提供基础的应用平台服务，有效减少中小企业的前期投入及运营成本，使得中小企业在成立发展过程中，把更多的精力投入于发展业务，更多的信息化管理不用关注。 </p><a id="more"></a></li><li><p>从以前中小企业使用后，中大型企业慢慢也接受这种模式，特别是微信的流行后，很多中大型企业也把可以对外的或授权对外的信息，通过自身建设的平台或第三方的SaaS平台发布出来，借助微信的社区朋友圈，有效扩展业务及维护客户关系。建设及维护这种第三方的平台，是企业必须要考虑的，像传统的很多开发商，借助自身的开发及客户资源，正在打造自己行业内的SaaS应用平台。而大型企业，则考虑如何通过Saas应用统一规范其下的分公司或部门的业务管理，希望达到业务可分或汇。 在设计及说明SaaS平台的实现方案时，</p></li></ul><h3 id="1-2-SaaS的几个重要的概念"><a href="#1-2-SaaS的几个重要的概念" class="headerlink" title="1.2 SaaS的几个重要的概念"></a>1.2 SaaS的几个重要的概念</h3><p>我们先来说明一下以下的概念：</p><p>  租户：表示SaaS的一个独立法人组织，如企业、单位和团体等。租户在系统中表现为一个注册机构组织。</p><p>  租户用户：每个租户下面有若干用户，用户是实际使用系统的人。</p><p>  租户用户组：每个租户会对其下面的用户进行分组管理</p><h2 id="二-多租户的实现"><a href="#二-多租户的实现" class="headerlink" title="二.多租户的实现"></a>二.多租户的实现</h2><p>多租户最主要的就是数据的隔离与共享，数据隔离级别越高，共享程度越低。在以往实施过的项目中，同样有SaaS的业务扩展需求，细节各有不同，但实现方式总体而言可以归纳为下面两大类：</p><p>   1.独立Schema,即每个租户单独一套数据库</p><pre><code>优点是:数据隔离级别相对高，对于数据的安全性很好。缺点是：数据隔离级别相对高，浪费资源。比如：对于注册使用的用户来说，通过数据库隔离就浪费资源。</code></pre><p>   2.共享Schema、通过租户区分数据，所有租户共享数据</p><pre><code>缺点是：数据隔离级别相对低，数据安全性不是很好，但是这种隔离方式适合基础的公共的数据隔离。</code></pre><h2 id="三-SaaS的部署模式"><a href="#三-SaaS的部署模式" class="headerlink" title="三.SaaS的部署模式"></a>三.SaaS的部署模式</h2><p><img src="/images/saas/saas.png" width="650px" height="450px"></p><ul><li><p>如图所示，Saas统一访问服务器为统一管理入口，主要用于对Saas整个系统的运营管理，比如计费，Saas应用购买等等。</p></li><li><p>Saas中央数据库，记录着多组户用户的信息，租户登陆时，Saas统一访问服务器验证check之后，通过动态数据切换，切换到租户</p></li><li><p>对应的Saas应用上去。 </p><p> 所有租户的访问统一地址</p><p>  租户要使用平台，先需要统一注册，注册信息存放在中央数据库，由平台的管员进行统一审批管理员根据的租户的用户的使用规模及数据量，选择是共享数据库还是独立数据库，同时根据应用的访问量，是否扩展多台应用服务器</p><p>  目前在流行的开发语言中，要实现这些业务租用及业务扩展，目前均无标准化的开发模式，仅有一些大型的软件厂商上作了一些云应用的开发，但他们都不会公开这些开发模式的源代码。因此对于一些想实现类似业务的企业或软件厂商，只能自身进行研发。 根据目前JAVA流行的轻量级框架进行封装及扩展，打造适合中国国情的SAAS应用开发平台。而国内目前更多的是私有云的建设，公有云应用也越来越流行，也慢慢被很多中大型企业接受。因此通常会选择两种方案混合来实现SaaS应用，即共享数据库与独立数据库。而客户在实施时，可根据业务的需要，进行配置使用。 如：集团需要上一套CRM，即可选择共享数据库，因为集团内的CRM数据需要共享及统一管理。而某政府部门需要上一套行政审批系统，其各个子级部门数据需要单独分割并不可访问，并且有自身的个性化要求，这时建议采用独立数据库模式</p></li></ul>]]></content>
      
      <categories>
          
          <category> 云计算Saas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 项目经验 </tag>
            
            <tag> 云计算SaaS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CloudStack中云主机的UTC时间转为本地时间</title>
      <link href="/ex/cs-utc/"/>
      <url>/ex/cs-utc/</url>
      <content type="html"><![CDATA[<h2 id="CloudStack-UTC时间处理"><a href="#CloudStack-UTC时间处理" class="headerlink" title="CloudStack UTC时间处理"></a>CloudStack UTC时间处理</h2><p> CloudStack项目中使用的时间是UTC时间，具体什么是UTC时间大家可以百度，但是我们需要的时间是正常的时间，所以在国泰君安开发测试云中，同步资源管理中虚拟机的同步管理，需要对虚拟机的时间格式化进行转换。工具类如下，关键是时间格式的问题，时间格式为yyyy-MM-dd’T’HH:mm:ss+SSSS。</p> <a id="more"></a><h3 id="工具类①"><a href="#工具类①" class="headerlink" title="工具类①"></a>工具类①</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">utc2LocalDate</span><span class="params">(String utcTime)</span> </span>&#123;</span><br><span class="line">      String utcTimePatten = <span class="string">"yyyy-MM-dd'T'HH:mm:ss+SSSS"</span>;</span><br><span class="line">      SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(utcTimePatten);</span><br><span class="line">      Date dt = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          dt = sdf.parse(utcTime);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">return</span> dt;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="工具类②"><a href="#工具类②" class="headerlink" title="工具类②"></a>工具类②</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUtc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String ts = <span class="string">"2015-04-22T15:58:54+0800"</span>;</span><br><span class="line">            System.out.println(<span class="string">"ts = "</span> + ts);</span><br><span class="line">            ts = ts.replace(<span class="string">"Z"</span>, <span class="string">" UTC"</span>);</span><br><span class="line">            System.out.println(<span class="string">"ts = "</span> + ts);</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(</span><br><span class="line">                    <span class="string">"yyyy-MM-dd'T'HH:mm:ss+SSSS"</span>);</span><br><span class="line"> </span><br><span class="line">            Date dt = sdf.parse(ts);</span><br><span class="line"> </span><br><span class="line">            TimeZone tz = sdf.getTimeZone();</span><br><span class="line">            Calendar c = sdf.getCalendar();</span><br><span class="line">            System.out.println(<span class="string">"Display name: "</span> + tz.getDisplayName());</span><br><span class="line">            System.out.println(getString(c));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ParseException pe) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Error offset: "</span> + pe.getErrorOffset());</span><br><span class="line">            pe.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">(Calendar c)</span> </span>&#123;</span><br><span class="line">        StringBuffer result = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        result.append(c.get(Calendar.YEAR));</span><br><span class="line">        result.append(<span class="string">"-"</span>);</span><br><span class="line">        result.append((c.get(Calendar.MONTH) + <span class="number">1</span>));</span><br><span class="line">        result.append(<span class="string">"-"</span>);</span><br><span class="line">        result.append(c.get(Calendar.DAY_OF_MONTH));</span><br><span class="line">        result.append(<span class="string">" "</span>);</span><br><span class="line">        result.append(c.get(Calendar.HOUR_OF_DAY));</span><br><span class="line">        result.append(<span class="string">":"</span>);</span><br><span class="line">        result.append(c.get(Calendar.MINUTE));</span><br><span class="line">        result.append(<span class="string">":"</span>);</span><br><span class="line">        result.append(c.get(Calendar.SECOND));</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUtcTime</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String ts = <span class="string">"2015-04-22T15:58:54+0800"</span>;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        System.out.println(DateUtil.utc2LocalDate(ts));</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 项目经验 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
