<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>玹霖志</title>
    <link>/</link>
    <description>Recent content on 玹霖志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 16 Sep 2019 20:00:00 +0800</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Boot Admin和Nacos集成</title>
      <link>/blog/sba-nacos/</link>
      <pubDate>Mon, 16 Sep 2019 20:00:00 +0800</pubDate>
      
      <guid>/blog/sba-nacos/</guid>
      <description>摘要:本文主要讲解如何将Spring Boot Admin与Spring Cloud Alibaba中的spring-cloud-starter-alibaba-</description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway中的GatewayFilter和GlobalFilter</title>
      <link>/blog/scg-03/</link>
      <pubDate>Mon, 16 Sep 2019 20:00:00 +0800</pubDate>
      
      <guid>/blog/scg-03/</guid>
      <description>摘要:本文主要介绍了什么是GatewayFilter和GlobalFilter，以及区别和联系。然后介绍如何在Spring Cloud Gateway中</description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway基于服务发现的默认路由规则</title>
      <link>/blog/scg-05/</link>
      <pubDate>Mon, 16 Sep 2019 20:00:00 +0800</pubDate>
      
      <guid>/blog/scg-05/</guid>
      <description>摘要:本篇文章主要介绍了Spring Cloud Gateway的基于服务发现的默认路由规则，从中可以看出Gateway的路由规则:http://Gat</description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway的Before路由断言工厂</title>
      <link>/blog/scg-06/</link>
      <pubDate>Mon, 16 Sep 2019 20:00:00 +0800</pubDate>
      
      <guid>/blog/scg-06/</guid>
      <description>摘要:在上本篇文章Spring Cloud Gateway的After路由断言工厂介绍了Spring Cloud Gateway核心概念和After路由断言，本文简</description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway的动态路由的简单实现方式</title>
      <link>/blog/scg-dmy-route/</link>
      <pubDate>Mon, 16 Sep 2019 20:00:00 +0800</pubDate>
      
      <guid>/blog/scg-dmy-route/</guid>
      <description>1.前言 网关中有两个重要的概念，那就是路由配置和路由规则，路由配置是指配置某请求路径路由到指定的目的地址。而路由规则是指匹配到路由配置之后，</description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway的权重路由</title>
      <link>/blog/scg-02/</link>
      <pubDate>Mon, 16 Sep 2019 20:00:00 +0800</pubDate>
      
      <guid>/blog/scg-02/</guid>
      <description>1.权重路由 1.1 权重路由使用场景 在开发或者测试的时候，或者线上发布，线上服务多版本控制的时候，需要对服务提供权重路由，最常见的使用就是，一个服</description>
    </item>
    
    <item>
      <title>Spring Cloud第二代</title>
      <link>/blog/sc-2/</link>
      <pubDate>Mon, 16 Sep 2019 20:00:00 +0800</pubDate>
      
      <guid>/blog/sc-2/</guid>
      <description>摘要: 随着Eureka不再维护，Hystrix不再开发新功能，进入维护状态。以及最近中国开源出现一些大事，预测一下2019年未来Spring</description>
    </item>
    
    <item>
      <title>使用Nacos实现Spring Cloud Gateway的动态路由</title>
      <link>/blog/scg-nacos-01/</link>
      <pubDate>Mon, 16 Sep 2019 20:00:00 +0800</pubDate>
      
      <guid>/blog/scg-nacos-01/</guid>
      <description>1.前言 网关中有两个重要的概念，那就是路由配置和路由规则，路由配置是指配置某请求路径路由到指定的目的地址。而路由规则是指匹配到路由配置之后，</description>
    </item>
    
    <item>
      <title>Moss-让Spring Cloud应用“不再流浪”</title>
      <link>/blog/moss-01/</link>
      <pubDate>Tue, 05 Mar 2019 20:00:00 +0800</pubDate>
      
      <guid>/blog/moss-01/</guid>
      <description>摘要: 本文介绍了什么是Moss以及Moss的功能包括服务画像，服务实例画像，服务上下线事件记录，服务上下线websocket消息通知，针对生</description>
    </item>
    
    <item>
      <title>SOFAChannel#1——从蚂蚁金服微服务实践谈起</title>
      <link>/activities/sofa-channel-1/</link>
      <pubDate>Thu, 17 Jan 2019 10:20:00 +0000</pubDate>
      
      <guid>/activities/sofa-channel-1/</guid>
      <description>活动主题：SOFAChannel#1——从蚂蚁金服微服务实践谈起 活动时间：1 月 17 日周四晚 7 点 活动形式：线上直播 直播视频回顾 直播回顾文章 介绍 &amp;</description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway只有Pre和POST两种类型的Filter</title>
      <link>/blog/scg-04/</link>
      <pubDate>Mon, 21 May 2018 20:00:00 +0800</pubDate>
      
      <guid>/blog/scg-04/</guid>
      <description>摘要:Spring Cloud Gateway只有两种类型的Filter，本文介绍如何在Spring Cloud Gateway中创建一个Pre或Post类型的Fi</description>
    </item>
    
    <item>
      <title> Spring Cloud Gateway的After路由断言工厂</title>
      <link>/blog/scg-07/</link>
      <pubDate>Sun, 25 Mar 2018 20:00:00 +0800</pubDate>
      
      <guid>/blog/scg-07/</guid>
      <description>摘要:本篇文章主要介绍了Spring Cloud Gateway核心概念和After路由断言，因为比较简单所以就抛砖引玉，旨在帮助大家快速入门Sprin</description>
    </item>
    
    <item>
      <title>Spring Cloud Gateway揭秘之处理请求流程</title>
      <link>/blog/scg-08/</link>
      <pubDate>Sat, 17 Mar 2018 20:00:00 +0800</pubDate>
      
      <guid>/blog/scg-08/</guid>
      <description>1.Spring Gateway概述 Spring Cloud Gateway是Spring官方基于Spring 5.0，Spring Boot 2.0和Project Reactor等技术开发</description>
    </item>
    
    <item>
      <title>Ark Biz</title>
      <link>/projects/moss/sofa-ark-ark-biz/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-ark-biz/</guid>
      <description>简介 本小节将介绍 Ark Biz 目录结构，以及如何使用官方插件 sofa-ark-maven-plugin 打包并发布 Ark Biz。 Ark Biz 包和 Ark 包 都是使用 Maven 插件 sofa-ark-maven-plugin 打包生成；工程应用在配置该插件时，默认情</description>
    </item>
    
    <item>
      <title>Ark Biz</title>
      <link>/projects/sofa-boot/sofa-ark-ark-biz/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-ark-biz/</guid>
      <description>简介 本小节将介绍 Ark Biz 目录结构，以及如何使用官方插件 sofa-ark-maven-plugin 打包并发布 Ark Biz。 Ark Biz 包和 Ark 包 都是使用 Maven 插件 sofa-ark-maven-plugin 打包生成；工程应用在配置该插件时，默认情</description>
    </item>
    
    <item>
      <title>Ark Biz 生命周期</title>
      <link>/projects/moss/sofa-ark-biz-lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-biz-lifecycle/</guid>
      <description>SOFAArk 合并部署时，除了宿主应用，其他 Biz 允许运行时动态部署和卸载。Biz 的状态如下： unresolved: 未注册，此时 Biz 包未被运行时解析 resolved: Biz 包解析完成，且已注册，此时</description>
    </item>
    
    <item>
      <title>Ark Biz 生命周期</title>
      <link>/projects/sofa-boot/sofa-ark-biz-lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-biz-lifecycle/</guid>
      <description>SOFAArk 合并部署时，除了宿主应用，其他 Biz 允许运行时动态部署和卸载。Biz 的状态如下： unresolved: 未注册，此时 Biz 包未被运行时解析 resolved: Biz 包解析完成，且已注册，此时</description>
    </item>
    
    <item>
      <title>Ark Plugin</title>
      <link>/projects/moss/sofa-ark-ark-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-ark-plugin/</guid>
      <description>本小节将介绍 Ark Plugin 的标准规范和目录结构，以及如何使用官方插件 sofa-ark-plugin-maven-plugin 打包发布 Ark Plugin。 插件规范 标准的 Ark Plugin 需要满足以下规范： 插件必须配置插件名，</description>
    </item>
    
    <item>
      <title>Ark Plugin</title>
      <link>/projects/sofa-boot/sofa-ark-ark-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-ark-plugin/</guid>
      <description>本小节将介绍 Ark Plugin 的标准规范和目录结构，以及如何使用官方插件 sofa-ark-plugin-maven-plugin 打包发布 Ark Plugin。 插件规范 标准的 Ark Plugin 需要满足以下规范： 插件必须配置插件名，</description>
    </item>
    
    <item>
      <title>Ark 事件机制</title>
      <link>/projects/moss/sofa-ark-ark-event/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-ark-event/</guid>
      <description>SOFAArk 提供了简单的事件总线，Plugin 和 Biz 可以使用事件总线服务 EventAdminService 注册事件监听器并发布和监听事件： public interface EventAdminService { /** * Initiate synchronous delivery of an event. This method does not return to * the caller until delivery</description>
    </item>
    
    <item>
      <title>Ark 事件机制</title>
      <link>/projects/sofa-boot/sofa-ark-ark-event/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-ark-event/</guid>
      <description>SOFAArk 提供了简单的事件总线，Plugin 和 Biz 可以使用事件总线服务 EventAdminService 注册事件监听器并发布和监听事件： public interface EventAdminService { /** * Initiate synchronous delivery of an event. This method does not return to * the caller until delivery</description>
    </item>
    
    <item>
      <title>Ark 包</title>
      <link>/projects/moss/sofa-ark-ark-jar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-ark-jar/</guid>
      <description>本小节将介绍标准 Ark 包 的目录结构，以及如何使用官方插件 sofa-ark-maven-plugin 打包并发布 Ark 包。 Maven 插件 官方提供 Maven 插件 sofa-ark-maven-plugin 可以将普通 Java 工程或者 Spring Boot 工程打包成标准格式 Ark 包 ；</description>
    </item>
    
    <item>
      <title>Ark 包</title>
      <link>/projects/sofa-boot/sofa-ark-ark-jar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-ark-jar/</guid>
      <description>本小节将介绍标准 Ark 包 的目录结构，以及如何使用官方插件 sofa-ark-maven-plugin 打包并发布 Ark 包。 Maven 插件 官方提供 Maven 插件 sofa-ark-maven-plugin 可以将普通 Java 工程或者 Spring Boot 工程打包成标准格式 Ark 包 ；</description>
    </item>
    
    <item>
      <title>Ark 容器启动流程</title>
      <link>/projects/moss/sofa-ark-startup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-startup/</guid>
      <description>Ark 应用的整体启动流程如下图所述： 当用 java -jar 启动 Ark 包 或者 在 IDE 中通过 SofaArkBootstrap.launch 启动 Ark 应用时，相应 Launcher 入口会负责启动应用，其中会反射调用 ArkContainer 的入口，初始化 ArkService ，然</description>
    </item>
    
    <item>
      <title>Ark 容器启动流程</title>
      <link>/projects/sofa-boot/sofa-ark-startup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-startup/</guid>
      <description>Ark 应用的整体启动流程如下图所述： 当用 java -jar 启动 Ark 包 或者 在 IDE 中通过 SofaArkBootstrap.launch 启动 Ark 应用时，相应 Launcher 入口会负责启动应用，其中会反射调用 ArkContainer 的入口，初始化 ArkService ，然</description>
    </item>
    
    <item>
      <title>Ark 容器插件机制</title>
      <link>/projects/moss/sofa-ark-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-plugin/</guid>
      <description>Ark 插件启动 Ark 中提供了插件启动的接口 com.alipay.sofa.ark.spi.service.PluginActivator ，其定义如下： public interface PluginActivator { /** * Start Plugin * @param context plugin context * @throws ArkException */ void start(PluginContext context) throws ArkException; /** * Stop Plugin * @param context * @throws ArkException */ void stop(PluginContext context) throws ArkException; } 插件只需要实</description>
    </item>
    
    <item>
      <title>Ark 容器插件机制</title>
      <link>/projects/sofa-boot/sofa-ark-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-plugin/</guid>
      <description>Ark 插件启动 Ark 中提供了插件启动的接口 com.alipay.sofa.ark.spi.service.PluginActivator ，其定义如下： public interface PluginActivator { /** * Start Plugin * @param context plugin context * @throws ArkException */ void start(PluginContext context) throws ArkException; /** * Stop Plugin * @param context * @throws ArkException */ void stop(PluginContext context) throws ArkException; } 插件只需要实</description>
    </item>
    
    <item>
      <title>Ark 容器类加载机制</title>
      <link>/projects/moss/sofa-ark-classloader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-classloader/</guid>
      <description>Ark 容器类加载机制 Ark 容器中会管理插件和业务，整体的类加载机制可见如下图描述： Ark 插件类加载机制 每个 Ark 插件都拥有一个独立的类加载器，其类加载的顺序</description>
    </item>
    
    <item>
      <title>Ark 容器类加载机制</title>
      <link>/projects/sofa-boot/sofa-ark-classloader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-classloader/</guid>
      <description>Ark 容器类加载机制 Ark 容器中会管理插件和业务，整体的类加载机制可见如下图描述： Ark 插件类加载机制 每个 Ark 插件都拥有一个独立的类加载器，其类加载的顺序</description>
    </item>
    
    <item>
      <title>Ark 扩展机制</title>
      <link>/projects/moss/sofa-ark-ark-extension/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-ark-extension/</guid>
      <description>Ark 容器和 Ark Plugin 在运行时由不同的类加载器加载，不能使用常规的 ServiceLoader 提供 SPI 扩展，SOFAArk 自定义扩展点 SPI 机制， Ark Plugin 实现 SPI 机制，考虑到 Biz 卸载问题，A</description>
    </item>
    
    <item>
      <title>Ark 扩展机制</title>
      <link>/projects/sofa-boot/sofa-ark-ark-extension/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-ark-extension/</guid>
      <description>Ark 容器和 Ark Plugin 在运行时由不同的类加载器加载，不能使用常规的 ServiceLoader 提供 SPI 扩展，SOFAArk 自定义扩展点 SPI 机制， Ark Plugin 实现 SPI 机制，考虑到 Biz 卸载问题，A</description>
    </item>
    
    <item>
      <title>Ark 日志</title>
      <link>/projects/moss/sofa-ark-ark-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-ark-log/</guid>
      <description>SOFAArk 容器使用了 logback 日志实现，并集成了 sofa-common-tools，日志相关配置可以参考 配置文档, 这里介绍 SOFAArk 三个日志文件： sofa-ark/common-default.log &amp;gt; sofa-ark 默认日志，打</description>
    </item>
    
    <item>
      <title>Ark 日志</title>
      <link>/projects/sofa-boot/sofa-ark-ark-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-ark-log/</guid>
      <description>SOFAArk 容器使用了 logback 日志实现，并集成了 sofa-common-tools，日志相关配置可以参考 配置文档, 这里介绍 SOFAArk 三个日志文件： sofa-ark/common-default.log &amp;gt; sofa-ark 默认日志，打</description>
    </item>
    
    <item>
      <title>Ark 服务机制</title>
      <link>/projects/moss/sofa-ark-ark-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-ark-service/</guid>
      <description>SOFAArk 定义了两种服务类型，用于解决应用和插件，应用和应用之间的通信问题，下面分别介绍这两种服务类型： 插件服务 SOFAArk 允许在 Plugin 通过 PluginContext 发布和引用服务，也可</description>
    </item>
    
    <item>
      <title>Ark 服务机制</title>
      <link>/projects/sofa-boot/sofa-ark-ark-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-ark-service/</guid>
      <description>SOFAArk 定义了两种服务类型，用于解决应用和插件，应用和应用之间的通信问题，下面分别介绍这两种服务类型： 插件服务 SOFAArk 允许在 Plugin 通过 PluginContext 发布和引用服务，也可</description>
    </item>
    
    <item>
      <title>Ark 服务通信</title>
      <link>/projects/moss/sofa-ark-ark-jvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-ark-jvm/</guid>
      <description>在 Ark 服务机制 中，我们详细介绍了如何引用和发布插件服务，主要是解决 Plugin 和 Biz 的通信问题；为了解决 Biz 之间的通信问题，SOFAArk 引入了 SOFABoot 提供的 SofaService/SofaReference 编</description>
    </item>
    
    <item>
      <title>Ark 服务通信</title>
      <link>/projects/sofa-boot/sofa-ark-ark-jvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-ark-jvm/</guid>
      <description>在 Ark 服务机制 中，我们详细介绍了如何引用和发布插件服务，主要是解决 Plugin 和 Biz 的通信问题；为了解决 Biz 之间的通信问题，SOFAArk 引入了 SOFABoot 提供的 SofaService/SofaReference 编</description>
    </item>
    
    <item>
      <title>Halo Boot 介绍</title>
      <link>/projects/moss/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/overview/</guid>
      <description>SOFABoot 是蚂蚁金服开源的基于 Spring Boot 的研发框架，它在 Spring Boot 的基础上，提供了诸如 Readiness Check，类隔离，日志空间隔离等能力。在增强了 Spring Boot 的同时，SOFABo</description>
    </item>
    
    <item>
      <title>Halo Boot 介绍</title>
      <link>/projects/sofa-boot/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/overview/</guid>
      <description>SOFABoot 是蚂蚁金服开源的基于 Spring Boot 的研发框架，它在 Spring Boot 的基础上，提供了诸如 Readiness Check，类隔离，日志空间隔离等能力。在增强了 Spring Boot 的同时，SOFABo</description>
    </item>
    
    <item>
      <title>JVM 服务发布与引用</title>
      <link>/projects/moss/module-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/module-service/</guid>
      <description>SOFABoot 提供三种方式给开发人员发布和引用 JVM 服务 XML 方式 Annotation 方式 编程 API 方式 XML 方式 服务发布 首先需要定义一个 Bean： &amp;lt;bean id=&amp;quot;sampleService&amp;quot; class=&amp;quot;com.alipay.sofa.runtime.test.service.SampleServiceImpl&amp;quot;&amp;gt; 然后通过 SOFA 提供的 Spring 扩展标签来将上</description>
    </item>
    
    <item>
      <title>JVM 服务发布与引用</title>
      <link>/projects/sofa-boot/module-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/module-service/</guid>
      <description>SOFABoot 提供三种方式给开发人员发布和引用 JVM 服务 XML 方式 Annotation 方式 编程 API 方式 XML 方式 服务发布 首先需要定义一个 Bean： &amp;lt;bean id=&amp;quot;sampleService&amp;quot; class=&amp;quot;com.alipay.sofa.runtime.test.service.SampleServiceImpl&amp;quot;&amp;gt; 然后通过 SOFA 提供的 Spring 扩展标签来将上</description>
    </item>
    
    <item>
      <title>SOFAArk 介绍</title>
      <link>/projects/moss/sofa-ark-readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-readme/</guid>
      <description>SOFAArk 是一款基于 Java 实现的轻量级类隔离容器，主要提供类隔离和应用(模块)合并部署能力，由蚂蚁金服公司开源贡献； 在大型软件开发过程中，通常会推荐底层</description>
    </item>
    
    <item>
      <title>SOFAArk 介绍</title>
      <link>/projects/sofa-boot/sofa-ark-readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-readme/</guid>
      <description>SOFAArk 是一款基于 Java 实现的轻量级类隔离容器，主要提供类隔离和应用(模块)合并部署能力，由蚂蚁金服公司开源贡献； 在大型软件开发过程中，通常会推荐底层</description>
    </item>
    
    <item>
      <title>SOFAArk 配置</title>
      <link>/projects/moss/sofa-ark-ark-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-ark-config/</guid>
      <description>SOFAArk 的配置目录不是必须存在，如果需要，统一放在工程根目录 ${baseDir}/conf/ark 下，执行 sofa-ark-maven-plugin 打包，将会自动将该目录下的配置打包至 Ark 包，例如 Ark 包目录为： . ├── META-INF │ └─</description>
    </item>
    
    <item>
      <title>SOFAArk 配置</title>
      <link>/projects/sofa-boot/sofa-ark-ark-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-ark-config/</guid>
      <description>SOFAArk 的配置目录不是必须存在，如果需要，统一放在工程根目录 ${baseDir}/conf/ark 下，执行 sofa-ark-maven-plugin 打包，将会自动将该目录下的配置打包至 Ark 包，例如 Ark 包目录为： . ├── META-INF │ └─</description>
    </item>
    
    <item>
      <title>SOFABolt 功能介绍</title>
      <link>/projects/sofa-bolt/sofa-bolt-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-bolt/sofa-bolt-functions/</guid>
      <description>功能架构 SOFABolt 的基础功能： 基础通信功能 ( remoting-core ) 基于 Netty 高效的网络 IO 与线程模型运用 连接管理 (无锁建连，定时断链，自动重连) 基础通信模型 ( oneway，</description>
    </item>
    
    <item>
      <title>SOFABolt 参与贡献</title>
      <link>/projects/sofa-bolt/sofa-bolt-contribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-bolt/sofa-bolt-contribution/</guid>
      <description>参与贡献 开放代码允许在签署协议之后,提交贡献代码. 版权协议 对 SOFABolt 代码的修改和变更，需要遵守版权协议 准备工作 贡献代码前需要先了解git工具的使用</description>
    </item>
    
    <item>
      <title>SOFABolt 发展路线</title>
      <link>/projects/sofa-bolt/sofa-bolt-roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-bolt/sofa-bolt-roadmap/</guid>
      <description>发展路线 Version 1.5.1 修复项目中代码风格的问题：https://github.com/alipay/sofa-bolt/issues/85 修复项目中已</description>
    </item>
    
    <item>
      <title>SOFABolt 概述</title>
      <link>/projects/sofa-bolt/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-bolt/overview/</guid>
      <description>介绍 SOFABolt 是蚂蚁金融服务集团开发的一套基于 Netty 实现的网络通信框架。 为了让 Java 程序员能将更多的精力放在基于网络通信的业务逻辑实现上，而不是过多的纠结于</description>
    </item>
    
    <item>
      <title>SOFABolt 用户手册</title>
      <link>/projects/sofa-bolt/sofa-bolt-handbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-bolt/sofa-bolt-handbook/</guid>
      <description>用户指南 maven coordinator &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;bolt&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; check release note for version 1. 基础功能 1.1 实现用户请求处理器 (UserProcessor) 我们提供了两种用户请求处理器，SyncUserProcessor 与 Async</description>
    </item>
    
    <item>
      <title>SOFABolt 相关链接</title>
      <link>/projects/sofa-bolt/related-links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-bolt/related-links/</guid>
      <description>相关链接 ISSUES 用户手册 中文介绍文章: 蚂蚁通信框架实践</description>
    </item>
    
    <item>
      <title>SOFABoot 2.5.x 升级注意事项</title>
      <link>/projects/moss/upgrade_2_5_x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/upgrade_2_5_x/</guid>
      <description>SOFABoot 2.3.x/2.4.x 升级到 2.5.x SOFABoot 2.3.x/2.4.x 基于 Spring Boot 1.4.2.RELEASE 版本开发，SOFABoot 2.5.x 则是基于 Spring Boot 1.5.x 版本开发。 从 SOFABoot 2.3.x/2.4.x 升级到 SOFABoot 2.5.x 需要重点考虑 Spring Boot 1.5.x 相较 Spring Boot 1.4.x 的升级注意点。 重命</description>
    </item>
    
    <item>
      <title>SOFABoot 2.5.x 升级注意事项</title>
      <link>/projects/sofa-boot/upgrade_2_5_x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/upgrade_2_5_x/</guid>
      <description>SOFABoot 2.3.x/2.4.x 升级到 2.5.x SOFABoot 2.3.x/2.4.x 基于 Spring Boot 1.4.2.RELEASE 版本开发，SOFABoot 2.5.x 则是基于 Spring Boot 1.5.x 版本开发。 从 SOFABoot 2.3.x/2.4.x 升级到 SOFABoot 2.5.x 需要重点考虑 Spring Boot 1.5.x 相较 Spring Boot 1.4.x 的升级注意点。 重命</description>
    </item>
    
    <item>
      <title>SOFABoot 3.0 升级注意事项</title>
      <link>/projects/moss/upgrade_3_x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/upgrade_3_x/</guid>
      <description>前言 SOFABoot 是蚂蚁金服开源的基于 Spring Boot 的研发框架，它在 Spring Boot 的基础上，提供了诸如 Readiness Check，类隔离，日志空间隔离等能力。在增强了 Spring Boot 的同时，SOFA</description>
    </item>
    
    <item>
      <title>SOFABoot 3.0 升级注意事项</title>
      <link>/projects/sofa-boot/upgrade_3_x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/upgrade_3_x/</guid>
      <description>前言 SOFABoot 是蚂蚁金服开源的基于 Spring Boot 的研发框架，它在 Spring Boot 的基础上，提供了诸如 Readiness Check，类隔离，日志空间隔离等能力。在增强了 Spring Boot 的同时，SOFA</description>
    </item>
    
    <item>
      <title>SOFABoot Profile</title>
      <link>/projects/moss/sofaboot-profile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofaboot-profile/</guid>
      <description>Spring 框架从 3.1.X 版本开始提供了 profile 功能: Bean Definition Profiles，SOFABoot 支持模块级 profile 能力，即在各个模块启动的时候决定模块是否能够启动。 使用 Module-Profile 激</description>
    </item>
    
    <item>
      <title>SOFABoot Profile</title>
      <link>/projects/sofa-boot/sofaboot-profile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofaboot-profile/</guid>
      <description>Spring 框架从 3.1.X 版本开始提供了 profile 功能: Bean Definition Profiles，SOFABoot 支持模块级 profile 能力，即在各个模块启动的时候决定模块是否能够启动。 使用 Module-Profile 激</description>
    </item>
    
    <item>
      <title>SOFABoot 使用类隔离</title>
      <link>/projects/moss/classloader-isolation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/classloader-isolation/</guid>
      <description>SOFABoot 提供了类隔离框架 SOFAArk, 弥补了 Spring Boot 在类隔离能力上的缺失，用以解决在实际开发中常见的类冲突、包冲突问题，详细请参考 SOFAArk。 在 SOFABoot 工程中使用类</description>
    </item>
    
    <item>
      <title>SOFABoot 使用类隔离</title>
      <link>/projects/sofa-boot/classloader-isolation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/classloader-isolation/</guid>
      <description>SOFABoot 提供了类隔离框架 SOFAArk, 弥补了 Spring Boot 在类隔离能力上的缺失，用以解决在实际开发中常见的类冲突、包冲突问题，详细请参考 SOFAArk。 在 SOFABoot 工程中使用类</description>
    </item>
    
    <item>
      <title>SOFABoot 动态模块实践</title>
      <link>/guides/kc-sofastack-dynamic-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/kc-sofastack-dynamic-demo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SOFABoot 拓展点</title>
      <link>/projects/moss/extension/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/extension/</guid>
      <description>SOFABoot 支持模块化隔离，在实际的使用场景中，一个模块中的 bean 有时候需要开放一些入口，供另外一个模块扩展。SOFABoot 借鉴和使用了 Nuxeo Runtime 项目 以及 nuxeo 项</description>
    </item>
    
    <item>
      <title>SOFABoot 拓展点</title>
      <link>/projects/sofa-boot/extension/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/extension/</guid>
      <description>SOFABoot 支持模块化隔离，在实际的使用场景中，一个模块中的 bean 有时候需要开放一些入口，供另外一个模块扩展。SOFABoot 借鉴和使用了 Nuxeo Runtime 项目 以及 nuxeo 项</description>
    </item>
    
    <item>
      <title>Telnet 指令</title>
      <link>/projects/moss/sofa-ark-ark-telnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-ark-telnet/</guid>
      <description>SOFAArk 容器提供了一个简单的 telnet 服务端小工具，用于运行时查看容器状态，目前支持查看 Plugin 和 Biz 相关信息。 使用方式 使用 telnet 连接服务端，端口号为 1234， 例如：</description>
    </item>
    
    <item>
      <title>Telnet 指令</title>
      <link>/projects/sofa-boot/sofa-ark-ark-telnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-ark-telnet/</guid>
      <description>SOFAArk 容器提供了一个简单的 telnet 服务端小工具，用于运行时查看容器状态，目前支持查看 Plugin 和 Biz 相关信息。 使用方式 使用 telnet 连接服务端，端口号为 1234， 例如：</description>
    </item>
    
    <item>
      <title>Zookeeper 配置</title>
      <link>/projects/moss/sofa-ark-zk-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-zk-config/</guid>
      <description>在介绍 Biz 生命周期 时，我们提到了有三种方式控制 Biz 的生命周期，并且介绍了使用客户端 API 实现 Biz 的安装、卸载、激活。在这一章节我们介绍如何使用 SOFAArk 提供的</description>
    </item>
    
    <item>
      <title>Zookeeper 配置</title>
      <link>/projects/sofa-boot/sofa-ark-zk-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-zk-config/</guid>
      <description>在介绍 Biz 生命周期 时，我们提到了有三种方式控制 Biz 的生命周期，并且介绍了使用客户端 API 实现 Biz 的安装、卸载、激活。在这一章节我们介绍如何使用 SOFAArk 提供的</description>
    </item>
    
    <item>
      <title>使用 CloudMesh 轻松实践 Service Mesh</title>
      <link>/guides/kc-cloud-mesh-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/kc-cloud-mesh-demo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>使用 SOFAStack 快速构建微服务</title>
      <link>/guides/sofastack-quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/sofastack-quick-start/</guid>
      <description>摘要:Spring Cloud Gateway只有两种类型的Filter，本文介绍如何在Spring Cloud Gateway中创建一个Pre或Post类型的Fi</description>
    </item>
    
    <item>
      <title>使用 Seata 保障支付一致性</title>
      <link>/guides/kc-seata-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/kc-seata-demo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>依赖管理</title>
      <link>/projects/moss/dependency-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/dependency-management/</guid>
      <description>SOFABoot 是在 Spring Boot 的基础上提供的功能扩展。基于 Spring Boot 的机制，SOFABoot 管理了 SOFA 中间件的依赖，并且提供了 Spring Boot 的 Starter，方便用户在 Spring Boot 中使用</description>
    </item>
    
    <item>
      <title>依赖管理</title>
      <link>/projects/sofa-boot/dependency-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/dependency-management/</guid>
      <description>SOFABoot 是在 Spring Boot 的基础上提供的功能扩展。基于 Spring Boot 的机制，SOFABoot 管理了 SOFA 中间件的依赖，并且提供了 Spring Boot 的 Starter，方便用户在 Spring Boot 中使用</description>
    </item>
    
    <item>
      <title>健康检查</title>
      <link>/projects/moss/health-check/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/health-check/</guid>
      <description>SOFABoot 为 Spring Boot 的健康检查能力增加了 Readiness Check 的能力。如果你需要使用 SOFA 中间件，那么建议使用 SOFABoot 的健康检查能力的扩展，来更优雅的上线应用实例 引入健康检查扩展 要</description>
    </item>
    
    <item>
      <title>健康检查</title>
      <link>/projects/sofa-boot/health-check/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/health-check/</guid>
      <description>SOFABoot 为 Spring Boot 的健康检查能力增加了 Readiness Check 的能力。如果你需要使用 SOFA 中间件，那么建议使用 SOFABoot 的健康检查能力的扩展，来更优雅的上线应用实例 引入健康检查扩展 要</description>
    </item>
    
    <item>
      <title>参与贡献</title>
      <link>/projects/moss/sofa-ark-contribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-contribution/</guid>
      <description>可以先去 发展路线 内了解下开发任务及未来规划。 准备工作 贡献代码前需要先了解 git 工具的使用和 GitHub 网站的使用。 git 工具用法可以查看 git官方书籍，需要阅</description>
    </item>
    
    <item>
      <title>参与贡献</title>
      <link>/projects/sofa-boot/sofa-ark-contribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-contribution/</guid>
      <description>可以先去 发展路线 内了解下开发任务及未来规划。 准备工作 贡献代码前需要先了解 git 工具的使用和 GitHub 网站的使用。 git 工具用法可以查看 git官方书籍，需要阅</description>
    </item>
    
    <item>
      <title>发展路线</title>
      <link>/projects/moss/sofa-ark-roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-roadmap/</guid>
      <description>任务列表 下面表格记录了还没有实现的功能特性，欢迎大家认领任务，参与贡献。 类型 任务 困难度 认领人及时间 计划完成时间 进度 相关 Issue 代码 支持多个 Web 应用合</description>
    </item>
    
    <item>
      <title>发展路线</title>
      <link>/projects/sofa-boot/sofa-ark-roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-roadmap/</guid>
      <description>任务列表 下面表格记录了还没有实现的功能特性，欢迎大家认领任务，参与贡献。 类型 任务 困难度 认领人及时间 计划完成时间 进度 相关 Issue 代码 支持多个 Web 应用合</description>
    </item>
    
    <item>
      <title>发布说明</title>
      <link>/projects/moss/sofa-ark-release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-release/</guid>
      <description>更多参见：https://github.com/sofastack/sofa-ark/releases</description>
    </item>
    
    <item>
      <title>发布说明</title>
      <link>/projects/sofa-boot/sofa-ark-release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-release/</guid>
      <description>更多参见：https://github.com/sofastack/sofa-ark/releases</description>
    </item>
    
    <item>
      <title>启动加速</title>
      <link>/projects/moss/speed-up-startup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/speed-up-startup/</guid>
      <description>SOFABoot 提供了模块并行加载以及 Spring Bean 异步初始化能力，用于加快应用启动速度。模块并行加载参考相应文档，下面介绍如何使用 SOFABoot 异步初始化 Spring Bean 能力来提高应用启</description>
    </item>
    
    <item>
      <title>启动加速</title>
      <link>/projects/sofa-boot/speed-up-startup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/speed-up-startup/</guid>
      <description>SOFABoot 提供了模块并行加载以及 Spring Bean 异步初始化能力，用于加快应用启动速度。模块并行加载参考相应文档，下面介绍如何使用 SOFABoot 异步初始化 Spring Bean 能力来提高应用启</description>
    </item>
    
    <item>
      <title>基于 Serverless 轻松构建云上应用</title>
      <link>/guides/kc-serverless-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/kc-serverless-demo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>基础术语</title>
      <link>/projects/moss/sofa-ark-terminology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-terminology/</guid>
      <description>Ark 包 SOFAArk 定义特殊格式的可执行 Jar 包，使用官方提供的 Maven 插件 sofa-ark-maven-plugin 可以将工程应用打包成一个标准格式的 Ark 包；使用命令 java -jar 即可在 SOFAArk 容器之上启动应用；Ark 包</description>
    </item>
    
    <item>
      <title>基础术语</title>
      <link>/projects/sofa-boot/sofa-ark-terminology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-terminology/</guid>
      <description>Ark 包 SOFAArk 定义特殊格式的可执行 Jar 包，使用官方提供的 Maven 插件 sofa-ark-maven-plugin 可以将工程应用打包成一个标准格式的 Ark 包；使用命令 java -jar 即可在 SOFAArk 容器之上启动应用；Ark 包</description>
    </item>
    
    <item>
      <title>如何打包 Ark Plugin</title>
      <link>/projects/moss/sofa-ark-ark-plugin-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-ark-plugin-demo/</guid>
      <description>工程地址 简介 该样例工程演示了如何借助 maven 插件将一个普通的 Java 工程打包成标准格式规范的 Ark Plugin 背景 现实开发中，常常会遇到依赖包冲突的情况；假设我们开发</description>
    </item>
    
    <item>
      <title>如何打包 Ark Plugin</title>
      <link>/projects/sofa-boot/sofa-ark-ark-plugin-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-ark-plugin-demo/</guid>
      <description>工程地址 简介 该样例工程演示了如何借助 maven 插件将一个普通的 Java 工程打包成标准格式规范的 Ark Plugin 背景 现实开发中，常常会遇到依赖包冲突的情况；假设我们开发</description>
    </item>
    
    <item>
      <title>如何打包 Ark 包</title>
      <link>/projects/moss/sofa-ark-ark-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofa-ark-ark-demo/</guid>
      <description>工程地址 简介 该样例工程演示了如何借助 Maven 插件将一个 Spring Boot Web 工程打包成标准格式规范的可执行 Ark 包； 准备 因该样例工程依赖 sample-ark-plugin , 因此需要提前在本地安装该 Ark</description>
    </item>
    
    <item>
      <title>如何打包 Ark 包</title>
      <link>/projects/sofa-boot/sofa-ark-ark-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofa-ark-ark-demo/</guid>
      <description>工程地址 简介 该样例工程演示了如何借助 Maven 插件将一个 Spring Boot Web 工程打包成标准格式规范的可执行 Ark 包； 准备 因该样例工程依赖 sample-ark-plugin , 因此需要提前在本地安装该 Ark</description>
    </item>
    
    <item>
      <title>常见问题</title>
      <link>/projects/moss/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/faq/</guid>
      <description>Q: Readiness Check 有啥应用场景？ Liveness Check 和 Readiness Check 概念来自于 Kuberentes，分别代表运行时检查和启动时检查。Spring Boot 提供了 Liveness Check，但是没有提供</description>
    </item>
    
    <item>
      <title>常见问题</title>
      <link>/projects/sofa-boot/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/faq/</guid>
      <description>Q: Readiness Check 有啥应用场景？ Liveness Check 和 Readiness Check 概念来自于 Kuberentes，分别代表运行时检查和启动时检查。Spring Boot 提供了 Liveness Check，但是没有提供</description>
    </item>
    
    <item>
      <title>快速开始</title>
      <link>/projects/moss/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/quick-start/</guid>
      <description>在本文档中，将创建一个 Spring Boot 的工程，引入 SOFABoot 基础依赖，并且引入 SOFABoot 的健康检查扩展能力，演示如何快速上手 SOFABoot。 环境准备 要使用 SOFABo</description>
    </item>
    
    <item>
      <title>快速开始</title>
      <link>/projects/sofa-boot/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/quick-start/</guid>
      <description>在本文档中，将创建一个 Spring Boot 的工程，引入 SOFABoot 基础依赖，并且引入 SOFABoot 的健康检查扩展能力，演示如何快速上手 SOFABoot。 环境准备 要使用 SOFABo</description>
    </item>
    
    <item>
      <title>模块化开发概述</title>
      <link>/projects/moss/modular-development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/modular-development/</guid>
      <description>SOFABoot 从 2.4.0 版本开始支持基于 Spring 上下文隔离的模块化开发能力。为了更好的理解 SOFABoot 模块化开发的概念，我们来区分几个常见的模块化形式： 基于代码组织上的模块化</description>
    </item>
    
    <item>
      <title>模块化开发概述</title>
      <link>/projects/sofa-boot/modular-development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/modular-development/</guid>
      <description>SOFABoot 从 2.4.0 版本开始支持基于 Spring 上下文隔离的模块化开发能力。为了更好的理解 SOFABoot 模块化开发的概念，我们来区分几个常见的模块化形式： 基于代码组织上的模块化</description>
    </item>
    
    <item>
      <title>模块并行化启动</title>
      <link>/projects/moss/parallel-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/parallel-start/</guid>
      <description>SOFABoot 会根据 Require-Module 计算模块依赖树，例如以下依赖树表示模块B 和模块C 依赖模块A，模块E 依赖模块D，模块F 依赖模块E： 该依赖树会保证模块A 必定在模块B 和</description>
    </item>
    
    <item>
      <title>模块并行化启动</title>
      <link>/projects/sofa-boot/parallel-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/parallel-start/</guid>
      <description>SOFABoot 会根据 Require-Module 计算模块依赖树，例如以下依赖树表示模块B 和模块C 依赖模块A，模块E 依赖模块D，模块F 依赖模块E： 该依赖树会保证模块A 必定在模块B 和</description>
    </item>
    
    <item>
      <title>模块配置</title>
      <link>/projects/moss/sofaboot-module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/sofaboot-module/</guid>
      <description>SOFABoot 模块是一个普通的 Jar 包加上一些 SOFABoot 特有的配置，这些 SOFABoot 特有的配置，让一个 Jar 包能够被 SOFABoot 识别，使之具备模块化的能力。 一个完整的 SOFABoot 模块和一个普通的 Jar 包</description>
    </item>
    
    <item>
      <title>模块配置</title>
      <link>/projects/sofa-boot/sofaboot-module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/sofaboot-module/</guid>
      <description>SOFABoot 模块是一个普通的 Jar 包加上一些 SOFABoot 特有的配置，这些 SOFABoot 特有的配置，让一个 Jar 包能够被 SOFABoot 识别，使之具备模块化的能力。 一个完整的 SOFABoot 模块和一个普通的 Jar 包</description>
    </item>
    
    <item>
      <title>版本查看</title>
      <link>/projects/moss/view-versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/view-versions/</guid>
      <description>通过 SOFABoot，我们可以直接在浏览器中就可以查看 SOFA 中间件的版本等详细信息。 引入 SOFABoot Infra 依赖 要在 SOFABoot 中直接通过浏览器查看 SOFA 中间件的版本信息，只</description>
    </item>
    
    <item>
      <title>版本查看</title>
      <link>/projects/sofa-boot/view-versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/view-versions/</guid>
      <description>通过 SOFABoot，我们可以直接在浏览器中就可以查看 SOFA 中间件的版本等详细信息。 引入 SOFABoot Infra 依赖 要在 SOFABoot 中直接通过浏览器查看 SOFA 中间件的版本信息，只</description>
    </item>
    
    <item>
      <title>版权声明</title>
      <link>/projects/moss/notice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/moss/notice/</guid>
      <description>SOFABoot 使用了一些三方开源组件，他们分别是： 一些主要依赖： Spring under Apache 2.0 license Spring Boot under Apache 2.0 license SLF4j under the MIT License sofa-common-tools under Apache 2.0 license 一些扩展依赖： nuxeo under Apache License, Version 2.0 &amp;hellip; 其它整理中。</description>
    </item>
    
    <item>
      <title>版权声明</title>
      <link>/projects/sofa-boot/notice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/sofa-boot/notice/</guid>
      <description>SOFABoot 使用了一些三方开源组件，他们分别是： 一些主要依赖： Spring under Apache 2.0 license Spring Boot under Apache 2.0 license SLF4j under the MIT License sofa-common-tools under Apache 2.0 license 一些扩展依赖： nuxeo under Apache License, Version 2.0 &amp;hellip; 其它整理中。</description>
    </item>
    
  </channel>
</rss>