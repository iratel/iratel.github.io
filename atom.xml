<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>许进沉思录-专注于互联网与中间件基础架构技术研究</title>
  
  <subtitle>Halo💫</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xujin.org/"/>
  <updated>2019-01-13T05:49:46.955Z</updated>
  <id>http://xujin.org/</id>
  
  <author>
    <name>Halo💫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud第二代</title>
    <link href="http://xujin.org/sc/sc2/"/>
    <id>http://xujin.org/sc/sc2/</id>
    <published>2018-11-27T06:00:00.000Z</published>
    <updated>2019-01-13T05:49:46.955Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>: 随着Eureka不再维护，Hystrix不再开发新功能，进入维护状态。以及最近中国开源出现一些大事，预测一下2019年未来Spring Cloud生态圈中的第二代组件的组合，仅<code>代表个人看法</code>。</p><p> <img src="/banner/sc2.png" alt=""></p><h2 id="1-Spring-Cloud第一代"><a href="#1-Spring-Cloud第一代" class="headerlink" title="1. Spring Cloud第一代"></a>1. Spring Cloud第一代</h2><p>  Spring Cloud自从推出之后，给大家的感觉就是Spring Cloud做<code>它最擅长的事，也就是高度抽象和封装，强强联手整合最优东西为我所用</code>，比如Netflix开源的Eureka，Hystrix，Ribbon等。而且提供<code>多种技术选型，态度中立而选最优</code>。8天前也就是2018年11月19号左右，Netflix的开源项目Hystrix宣布状态，不再开发新功能，处于维护状态。引发朋友圈的一些思考。</p><a id="more"></a><p><img src="/images/sc/hystrix.jpg" alt=""></p><blockquote><p>虽然Eureka，Hystrix等不再继续开发或维护，但是目前来说不影响使用，不管怎么说感谢开源，向Netflix公司的开源致敬。</p></blockquote><p>  随着Spring Cloud生态圈的发展与成长，Spring Cloud陆续推出了自己的一些组件，挑选主要组件说明如下表所示:</p><table><thead><tr><th>组件</th><th>来源</th><th>说明</th></tr></thead><tbody><tr><td>Spring-cloud-openfeign</td><td>基于Feign的升级</td><td>服务之间调用的必备组件</td></tr><tr><td>spring-cloud-zuul</td><td>来源于Netflix Zuul</td><td>目前还在继续维护，但是已经有自己的Spring Cloud Gateway,不久将来逐渐淘汰</td></tr><tr><td>spring-cloud-eureka</td><td>集成于Netflix Eureka</td><td>目前还在跟随Spring Cloud版本升级维护，最终也会被替代</td></tr><tr><td>spring-cloud-config</td><td>自研</td><td>功能不足，国内使用其它配置中心替代，比如携程的Apollo</td></tr><tr><td>全链路监控(sleuth+zikpin或pinpont)</td><td>sleuth自研，其它第三方</td><td>国内目前使用最多的是skywaling等上生产</td></tr><tr><td>spring-cloud-ribbon</td><td>来源于Netflix集成</td><td>ribbon目前还在跟随Spring Cloud版本维护中，目前孵化未来替代品spring-cloud-lb</td></tr><tr><td>Spring-cloud-hystrix</td><td>来源于Netflix集成</td><td>目前还在跟随Spring Cloud版本维护中目前已经孵化spring-cloud-r4j</td></tr></tbody></table><h2 id="2-Spring-Cloud-第二代"><a href="#2-Spring-Cloud-第二代" class="headerlink" title="2. Spring Cloud 第二代"></a>2. Spring Cloud 第二代</h2><p> Spring Cloud第一代和第二代的组件组合汇总，如下表所示。</p><table><thead><tr><th></th><th>Spring Cloud第一代</th><th>Spring Cloud第二代</th></tr></thead><tbody><tr><td>网关</td><td>Spring Cloud Zuul</td><td>Spring Cloud Gateway</td></tr><tr><td>注册中心</td><td>eureka(不再更新)，Consul,ZK</td><td>阿里Nacos，拍拍贷radar等可选</td></tr><tr><td>配置中心</td><td>spring cloud config</td><td>阿里Nacos，携程Apollo，随行付Config Keeper</td></tr><tr><td>客户端软负载均衡</td><td>Ribbon</td><td>spring-cloud-loadbalancer</td></tr><tr><td>熔断器</td><td>Hystrix</td><td>spring-cloud-r4j(Resilience4J)，阿里Sentinel</td></tr></tbody></table><blockquote><p>由于Zuul性能一般，zuul 2.x(一直跳票，虽最终开源）但是Spring Cloud官方已经推出Spring Cloud gateway,Spring Cloud中国社区很久之前已经证实，Spring Cloud将不会集成zuul 2.x，也就是说在不就未来Zuul将从Spring Cloud生态圈中退出。</p></blockquote><hr><blockquote><p>ribbon由于不支持webFlux的负载均衡，Spring Cloud官方很早就在孵化器项目中孵化spring-cloud-loadbalancer，目前已经将代码合并到spring-cloud-common中，预计在Spring Cloud G版可以使用，预计2018年12月底realese。</p></blockquote><hr><blockquote><p>至于Hystrix，Netflix在2018年11月19号左右，Netflix的开源项目Hystrix宣布状态，不再开发新功能，处于维护状态，其实在之前Spring Cloud官方就在孵化spring-cloud-r4j.</p></blockquote><h2 id="3-开源项目的链接"><a href="#3-开源项目的链接" class="headerlink" title="3.开源项目的链接"></a>3.开源项目的链接</h2><p>本文所提到的开源项目链接汇总如下所示：</p><p><a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel</a></p><p><a href="https://github.com/spring-cloud-incubator/spring-cloud-r4j" target="_blank" rel="noopener">https://github.com/spring-cloud-incubator/spring-cloud-r4j</a></p><p><a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener">阿里Nacos-https://github.com/alibaba/nacos</a></p><p><a href="https://github.com/sxfad/config-keeper" target="_blank" rel="noopener">随行付Config-keeper-https://github.com/sxfad/config-keeper</a></p><p><a href="https://github.com/spring-cloud-incubator/spring-cloud-loadbalancer" target="_blank" rel="noopener">spring-cloud-loadbalancer</a></p><p><a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo</a></p><p><a href="https://github.com/apache/incubator-skywalking" target="_blank" rel="noopener">https://github.com/apache/incubator-skywalking</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;: 随着Eureka不再维护，Hystrix不再开发新功能，进入维护状态。以及最近中国开源出现一些大事，预测一下2019年未来Spring Cloud生态圈中的第二代组件的组合，仅&lt;code&gt;代表个人看法&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/banner/sc2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-Spring-Cloud第一代&quot;&gt;&lt;a href=&quot;#1-Spring-Cloud第一代&quot; class=&quot;headerlink&quot; title=&quot;1. Spring Cloud第一代&quot;&gt;&lt;/a&gt;1. Spring Cloud第一代&lt;/h2&gt;&lt;p&gt;  Spring Cloud自从推出之后，给大家的感觉就是Spring Cloud做&lt;code&gt;它最擅长的事，也就是高度抽象和封装，强强联手整合最优东西为我所用&lt;/code&gt;，比如Netflix开源的Eureka，Hystrix，Ribbon等。而且提供&lt;code&gt;多种技术选型，态度中立而选最优&lt;/code&gt;。8天前也就是2018年11月19号左右，Netflix的开源项目Hystrix宣布状态，不再开发新功能，处于维护状态。引发朋友圈的一些思考。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://xujin.org/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="http://xujin.org/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>使用Nacos实现Spring Cloud Gateway的动态路由</title>
    <link href="http://xujin.org/sc/gw/gw10/"/>
    <id>http://xujin.org/sc/gw/gw10/</id>
    <published>2018-11-17T06:00:00.000Z</published>
    <updated>2019-01-12T03:33:48.579Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>:本文主要介绍通过Nacos下发路由配置实现Spring Cloud Gateway的动态路由。</p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>   网关中有两个重要的概念，那就是路由配置和路由规则，路由配置是指配置某请求路径路由到指定的目的地址。而路由规则是指匹配到路由配置之后，再根据路由规则进行转发处理。<br>   Spring Cloud Gateway作为所有请求流量的入口，在实际生产环境中为了保证高可靠和高可用，尽量避免重启,需要实现Spring Cloud Gateway动态路由配置。前面章节介绍了Spring Cloud Gateway提供的两种方法去配置路由规则，但都是在Spring Cloud Gateway启动时候，就将路由配置和规则加载到内存里，无法做到不重启网关就可以动态的对应路由的配置和规则进行增加，修改和删除。本文是基于<a href="http://xujin.org/sc/gw/gw09/">Spring Cloud Gateway的动态路由实现</a><br>基础之上编写，通过Nacos配置服务下发路由配置实现动态路由。</p><a id="more"></a><h2 id="2-Spring-Cloud-Gateway简单的动态路由实现"><a href="#2-Spring-Cloud-Gateway简单的动态路由实现" class="headerlink" title="2. Spring Cloud Gateway简单的动态路由实现"></a>2. Spring Cloud Gateway简单的动态路由实现</h2><p>Spring Cloud Gateway的官方文档并没有讲如何动态配置，查看 Spring Cloud Gateway的源码，发现<code>在org.springframework.cloud.gateway.actuate.GatewayControllerEndpoint</code>类中提供了动态配置的Rest接口，但是<code>需要开启Gateway的端点</code>，而且提供的功能不是很强大。通过参考和GatewayControllerEndpoint相关的代码，可以自己编码实际动态路由配置。<br>下面通过案例的方式去讲解怎么通Nacos实现Spring Cloud Gateway的动态路由。案例工程如spring-cloud-gateway-nacos所示。</p><blockquote><p>代码地址:<a href="https://github.com/SpringCloud/spring-cloud-gateway-nacos" target="_blank" rel="noopener">https://github.com/SpringCloud/spring-cloud-gateway-nacos</a></p></blockquote><h2 id="3-简单动态路由的实现"><a href="#3-简单动态路由的实现" class="headerlink" title="3. 简单动态路由的实现"></a>3. 简单动态路由的实现</h2><h3 id="3-1-新建Maven工程sc-gateway-server"><a href="#3-1-新建Maven工程sc-gateway-server" class="headerlink" title="3.1 新建Maven工程sc-gateway-server"></a>3.1 新建Maven工程sc-gateway-server</h3><p>  配置主要的核心依赖如代码清单所示：<br>  代码清单: spring-cloud-gateway-nacos/sc-gateway-server/pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.nacos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="3-2-根据Spring-Cloud-Gateway的路由模型定义数据传输模型"><a href="#3-2-根据Spring-Cloud-Gateway的路由模型定义数据传输模型" class="headerlink" title="3.2 根据Spring Cloud Gateway的路由模型定义数据传输模型"></a>3.2 根据Spring Cloud Gateway的路由模型定义数据传输模型</h3><p> 分别创建GatewayRouteDefinition.java, GatewayPredicateDefinition.java, GatewayFilterDefinition.java这三个类。<br>(1) 创建路由定义模型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayRouteDefinition</span> </span>&#123;</span><br><span class="line">    <span class="comment">//路由的Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">//路由断言集合配置</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;GatewayPredicateDefinition&gt; predicates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//路由过滤器集合配置</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;GatewayFilterDefinition&gt; filters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//路由规则转发的目标uri</span></span><br><span class="line">    <span class="keyword">private</span> String uri;</span><br><span class="line">    <span class="comment">//路由执行的顺序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> order = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//此处省略get和set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)创建过滤器定义模型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayFilterDefinition</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Filter Name</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//对应的路由规则</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; args = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//此处省略Get和Set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)创建路由断言定义模型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayPredicateDefinition</span> </span>&#123;</span><br><span class="line">    <span class="comment">//断言对应的Name</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//配置的断言规则</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; args = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//此处省略Get和Set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-编写动态路由实现类"><a href="#3-3-编写动态路由实现类" class="headerlink" title="3.3 编写动态路由实现类"></a>3.3 编写动态路由实现类</h3><p>编写DynamicRouteServiceImpl并实现ApplicationEventPublisherAware接口，代码如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicRouteServiceImpl</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RouteDefinitionWriter routeDefinitionWriter;</span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line">    <span class="comment">//增加路由</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(RouteDefinition definition)</span> </span>&#123;</span><br><span class="line">        routeDefinitionWriter.save(Mono.just(definition)).subscribe();</span><br><span class="line">        <span class="keyword">this</span>.publisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新路由</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(RouteDefinition definition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.routeDefinitionWriter.delete(Mono.just(definition.getId()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"update fail,not find route  routeId: "</span>+definition.getId();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            routeDefinitionWriter.save(Mono.just(definition)).subscribe();</span><br><span class="line">            <span class="keyword">this</span>.publisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"update route  fail"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除路由</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ResponseEntity&lt;Object&gt;&gt; delete(String id) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.routeDefinitionWriter.delete(Mono.just(id))</span><br><span class="line">                .then(Mono.defer(() -&gt; Mono.just(ResponseEntity.ok().build())))</span><br><span class="line">                .onErrorResume(t -&gt; t <span class="keyword">instanceof</span> NotFoundException, t -&gt; Mono.just(ResponseEntity.notFound().build()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-编写Nacos监听接收下发的路由配置"><a href="#3-4-编写Nacos监听接收下发的路由配置" class="headerlink" title="3.4 编写Nacos监听接收下发的路由配置"></a>3.4 编写Nacos监听接收下发的路由配置</h3><h3 id="3-4-1-使用Nacos监听下发的配置"><a href="#3-4-1-使用Nacos监听下发的配置" class="headerlink" title="3.4.1 使用Nacos监听下发的配置"></a>3.4.1 使用Nacos监听下发的配置</h3><p>监听Nacos Config Server下发配置的代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicRouteServiceImplByNacos</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DynamicRouteServiceImpl dynamicRouteService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicRouteServiceImplByNacos</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        dynamicRouteByNacosListener(<span class="string">"sc-gateway"</span>,<span class="string">"xujin_test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听Nacos Server下发的动态路由配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> group</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dynamicRouteByNacosListener</span> <span class="params">(String dataId, String group)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ConfigService configService=NacosFactory.createConfigService(<span class="string">"127.0.0.1:8848"</span>);</span><br><span class="line">            String content = configService.getConfig(dataId, group, <span class="number">5000</span>);</span><br><span class="line">            System.out.println(content);</span><br><span class="line">            configService.addListener(dataId, group, <span class="keyword">new</span> Listener()  &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveConfigInfo</span><span class="params">(String configInfo)</span> </span>&#123;</span><br><span class="line">                    RouteDefinition definition= JSON.parseObject(configInfo,RouteDefinition.class);</span><br><span class="line">                    dynamicRouteService.update(definition);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Executor <span class="title">getExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NacosException e) &#123;</span><br><span class="line">            <span class="comment">//todo 提醒:异常自行处理此处省略</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-2-两种方式创建ConfigService"><a href="#3-4-2-两种方式创建ConfigService" class="headerlink" title="3.4.2 两种方式创建ConfigService"></a>3.4.2 两种方式创建ConfigService</h4><p>使用两种方式创建com.alibaba.nacos.api.config.ConfigService</p><ul><li>1.构建Properties创建</li></ul><p>使用createConfigService(Properties properties)，代码如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.put(<span class="string">"nacos.server-addr"</span>, <span class="string">""</span>);</span><br><span class="line">            properties.put(PropertyKeyConst.SERVER_ADDR, <span class="string">"127.0.0.1:8848"</span>);</span><br><span class="line">            ConfigService configService=NacosFactory.createConfigService(properties);</span><br></pre></td></tr></table></figure></p><blockquote><p>注意:PropertyKeyConst是com.alibaba.nacos.api.PropertyKeyConst</p></blockquote><ul><li>2.只传递Nacos Config Server的地址</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConfigService configService=NacosFactory.createConfigService(<span class="string">"127.0.0.1:8848"</span>);</span><br></pre></td></tr></table></figure><h2 id="4-使用Nacos下发配置"><a href="#4-使用Nacos下发配置" class="headerlink" title="4. 使用Nacos下发配置"></a>4. 使用Nacos下发配置</h2><h3 id="4-1-Nacos概述"><a href="#4-1-Nacos概述" class="headerlink" title="4.1 Nacos概述"></a>4.1 Nacos概述</h3><p>   Naocs由阿里开源，Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。<br>   Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。github地址:<a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener">https://github.com/alibaba/nacos</a></p><blockquote><p>更多Nacos的介绍，请访问官方网站:<a href="https://nacos.io/" target="_blank" rel="noopener">https://nacos.io/</a></p></blockquote><h3 id="4-2-在IDE中启动-Nacos"><a href="#4-2-在IDE中启动-Nacos" class="headerlink" title="4.2 在IDE中启动 Nacos"></a>4.2 在IDE中启动 Nacos</h3><p>访问<a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener">https://github.com/alibaba/nacos</a> ,使用Git克隆Nacos代码，直接导入到IDEA中，如下所示设置启动参数，直接启动。</p><p><img src="/images/mw/nacos/nacos0.jpg" alt=""></p><blockquote><p>从IDE中启动Nacos是我比较推荐的方式，因为可以随时Debug Nacos任何代码，其它启动方式请参考官网。</p></blockquote><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h2><h3 id="5-1-Nacos中下发Spring-Cloud-Gateway的路由配置"><a href="#5-1-Nacos中下发Spring-Cloud-Gateway的路由配置" class="headerlink" title="5.1  Nacos中下发Spring Cloud Gateway的路由配置"></a>5.1  Nacos中下发Spring Cloud Gateway的路由配置</h3><ul><li>1.打开浏览器访问URL:<a href="http://localhost:8848/nacos/index.html" target="_blank" rel="noopener">http://localhost:8848/nacos/index.html</a> ,Nacos的管控平台如下所示:</li></ul><p><img src="/images/mw/nacos/nacos1.jpg" alt=""></p><ul><li>2.在Nacos的配置列表点击<code>+</code>按钮，下发Spring Cloud Gateway的路由配置，如下所示:</li></ul><p><img src="/images/mw/nacos/nacos2.jpg" alt=""></p><hr><p>用于测试的示例数据，如下所示:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"filters"</span>: [],</span><br><span class="line"><span class="attr">"id"</span>: <span class="string">"jd_route"</span>,</span><br><span class="line"><span class="attr">"order"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"predicates"</span>: [&#123;</span><br><span class="line"><span class="attr">"args"</span>: &#123;</span><br><span class="line"><span class="attr">"pattern"</span>: <span class="string">"/jd"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Path"</span></span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">"uri"</span>: <span class="string">"http://www.jd.com"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/mw/nacos/nacos3.jpg" alt=""><br><img src="/images/mw/nacos/nacos4.jpg" alt=""></p><h3 id="5-2-启动sc-gateway-server"><a href="#5-2-启动sc-gateway-server" class="headerlink" title="5.2 启动sc-gateway-server"></a>5.2 启动sc-gateway-server</h3><ul><li>1.Debug启动sc-gateway-server,调试截图如下所示:</li></ul><p><img src="/images/mw/nacos/nacos5.jpg" alt=""></p><ul><li>2.通过Spring Cloud gateway的端点，查看路由信息</li></ul><p><img src="/images/mw/nacos/nacos6.jpg" alt=""></p><ul><li>3.通过访问<a href="http://localhost:8080/jd" target="_blank" rel="noopener">http://localhost:8080/jd</a> ,可以转发到京东商城主页</li></ul><h3 id="5-3-更新路由配置"><a href="#5-3-更新路由配置" class="headerlink" title="5.3 更新路由配置"></a>5.3 更新路由配置</h3><ul><li>1.通过Nacos下发配置，修改Spring Cloud Gateway的动态路由规则</li></ul><p><img src="/images/mw/nacos/nacos7.jpg" alt=""></p><ul><li>2.查看访问Spring Cloud gateway的端点配置，可以看到动态路由修改如下:</li></ul><p><img src="/images/mw/nacos/nacos8.jpg" alt=""></p><ul><li>3.通过访问<a href="http://localhost:8080/jd" target="_blank" rel="noopener">http://localhost:8080/jd</a> ,可以转发到百度相关页面</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:本文主要介绍通过Nacos下发路由配置实现Spring Cloud Gateway的动态路由。&lt;/p&gt;
&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;p&gt;   网关中有两个重要的概念，那就是路由配置和路由规则，路由配置是指配置某请求路径路由到指定的目的地址。而路由规则是指匹配到路由配置之后，再根据路由规则进行转发处理。&lt;br&gt;   Spring Cloud Gateway作为所有请求流量的入口，在实际生产环境中为了保证高可靠和高可用，尽量避免重启,需要实现Spring Cloud Gateway动态路由配置。前面章节介绍了Spring Cloud Gateway提供的两种方法去配置路由规则，但都是在Spring Cloud Gateway启动时候，就将路由配置和规则加载到内存里，无法做到不重启网关就可以动态的对应路由的配置和规则进行增加，修改和删除。本文是基于&lt;a href=&quot;http://xujin.org/sc/gw/gw09/&quot;&gt;Spring Cloud Gateway的动态路由实现&lt;/a&gt;&lt;br&gt;基础之上编写，通过Nacos配置服务下发路由配置实现动态路由。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/categories/Spring-Cloud-Gateway/"/>
    
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/tags/Spring-Cloud-Gateway/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Gateway的动态路由实现</title>
    <link href="http://xujin.org/sc/gw/gw09/"/>
    <id>http://xujin.org/sc/gw/gw09/</id>
    <published>2018-11-03T06:00:00.000Z</published>
    <updated>2019-01-12T03:33:39.419Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>:本文主要介绍了Spring Cloud Gateway的动态路由的简单实现方式。</p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>   网关中有两个重要的概念，那就是路由配置和路由规则，路由配置是指配置某请求路径路由到指定的目的地址。而路由规则是指匹配到路由配置之后，再根据路由规则进行转发处理。<br>   Spring Cloud Gateway作为所有请求流量的入口，在实际生产环境中为了保证高可靠和高可用，尽量避免重启,需要实现Spring Cloud Gateway动态路由配置。前面章节介绍了Spring Cloud Gateway提供的两种方法去配置路由规则，但都是在Spring Cloud Gateway启动时候，就将路由配置和规则加载到内存里，无法做到不重启网关就可以动态的对应路由的配置和规则进行增加，修改和删除。<code>本篇文章简单介绍如何实现Spring Cloud Gateway的动态路由。</code><br><a id="more"></a></p><h2 id="2-Spring-Cloud-Gateway简单的动态路由实现"><a href="#2-Spring-Cloud-Gateway简单的动态路由实现" class="headerlink" title="2. Spring Cloud Gateway简单的动态路由实现"></a>2. Spring Cloud Gateway简单的动态路由实现</h2><p>Spring Cloud Gateway的官方文档并没有讲如何动态配置，查看 Spring Cloud Gateway的源码，发现<code>在org.springframework.cloud.gateway.actuate.GatewayControllerEndpoint</code>类中提供了动态配置的Rest接口，但是<code>需要开启Gateway的端点</code>，而且提供的功能不是很强大。通过参考和GatewayControllerEndpoint相关的代码，可以自己编码实际动态路由配置。<br>下面通过案例的方式去讲解怎么实现Gateway的动态路由配置。案例工程如ch18-7-gateway所示。</p><blockquote><p>代码地址:<a href="https://github.com/SpringCloud/spring-cloud-code/blob/master/ch18-7/ch18-7-gateway" target="_blank" rel="noopener">https://github.com/SpringCloud/spring-cloud-code/blob/master/ch18-7/ch18-7-gateway</a></p></blockquote><h2 id="3-简单动态路由的实现"><a href="#3-简单动态路由的实现" class="headerlink" title="3. 简单动态路由的实现"></a>3. 简单动态路由的实现</h2><h3 id="3-1-新建Maven工程ch18-7-gateway"><a href="#3-1-新建Maven工程ch18-7-gateway" class="headerlink" title="3.1 新建Maven工程ch18-7-gateway"></a>3.1 新建Maven工程ch18-7-gateway</h3><p>  配置主要的核心依赖如代码清单18-33所示：<br>  代码清单: ch18-7/ch18-7-gateway/pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="3-2-根据Spring-Cloud-Gateway的路由模型定义数据传输模型"><a href="#3-2-根据Spring-Cloud-Gateway的路由模型定义数据传输模型" class="headerlink" title="3.2 根据Spring Cloud Gateway的路由模型定义数据传输模型"></a>3.2 根据Spring Cloud Gateway的路由模型定义数据传输模型</h3><p> 分别创建GatewayRouteDefinition.java, GatewayPredicateDefinition.java, GatewayFilterDefinition.java这三个类。<br>(1) <code>创建路由定义模型</code>如下代码清单18-34所示：<br>代码清单 18-34: ch18-7/ch18-7-gateway/src/main/java/cn/springcloud/book/gateway/model/GatewayRouteDefinition.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayRouteDefinition</span> </span>&#123;</span><br><span class="line">    <span class="comment">//路由的Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">//路由断言集合配置</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;GatewayPredicateDefinition&gt; predicates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//路由过滤器集合配置</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;GatewayFilterDefinition&gt; filters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//路由规则转发的目标uri</span></span><br><span class="line">    <span class="keyword">private</span> String uri;</span><br><span class="line">    <span class="comment">//路由执行的顺序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> order = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//此处省略get和set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)<code>创建过滤器定义模型</code>,代码如代码清单18-35所示：<br>代码清单18-35: ch18-7/ch18-7-gateway/src/main/java/cn/springcloud/book/gateway/model/GatewayFilterDefinition.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayFilterDefinition</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Filter Name</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//对应的路由规则</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; args = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//此处省略Get和Set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)<code>路由断言定义模型</code>，代码如代码清单18-36所示:<br>代码清单18-36: ch18-7/ch18-7-gateway/src/main/java/cn/springcloud/book/gateway/model/GatewayPredicateDefinition.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayPredicateDefinition</span> </span>&#123;</span><br><span class="line">    <span class="comment">//断言对应的Name</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//配置的断言规则</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; args = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//此处省略Get和Set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-编写动态路由实现类"><a href="#3-3-编写动态路由实现类" class="headerlink" title="3.3 编写动态路由实现类"></a>3.3 编写动态路由实现类</h3><p>编写DynamicRouteServiceImpl并实现ApplicationEventPublisherAware接口，代码如代码清单18-37所示: ch18-37/ch18-7-gateway/src/main/java/cn/springcloud/book/gateway/route/DynamicRouteServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicRouteServiceImpl</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RouteDefinitionWriter routeDefinitionWriter;</span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line">    <span class="comment">//增加路由</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(RouteDefinition definition)</span> </span>&#123;</span><br><span class="line">        routeDefinitionWriter.save(Mono.just(definition)).subscribe();</span><br><span class="line">        <span class="keyword">this</span>.publisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新路由</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(RouteDefinition definition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.routeDefinitionWriter.delete(Mono.just(definition.getId()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"update fail,not find route  routeId: "</span>+definition.getId();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            routeDefinitionWriter.save(Mono.just(definition)).subscribe();</span><br><span class="line">            <span class="keyword">this</span>.publisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"update route  fail"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除路由</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ResponseEntity&lt;Object&gt;&gt; delete(String id) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.routeDefinitionWriter.delete(Mono.just(id))</span><br><span class="line">                .then(Mono.defer(() -&gt; Mono.just(ResponseEntity.ok().build())))</span><br><span class="line">                .onErrorResume(t -&gt; t <span class="keyword">instanceof</span> NotFoundException, t -&gt; Mono.just(ResponseEntity.notFound().build()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-编写Rest接口"><a href="#3-4-编写Rest接口" class="headerlink" title="3.4 编写Rest接口"></a>3.4 编写Rest接口</h3><p>编写RouteController类的提供Rest接口，用于动态路由配置。代码如代码清单18-38所示:<br>代码清单 18-38: ch18-7/ch18-7-gateway/src/main/java/cn/springcloud/book/gateway/controller/RouteController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/route"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DynamicRouteServiceImpl dynamicRouteService;</span><br><span class="line">    <span class="comment">//增加路由</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(@RequestBody GatewayRouteDefinition gwdefinition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RouteDefinition definition = assembleRouteDefinition(gwdefinition);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.dynamicRouteService.add(definition);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"succss"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除路由</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/routes/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ResponseEntity&lt;Object&gt;&gt; delete(<span class="meta">@PathVariable</span> String id) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.dynamicRouteService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新路由</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(@RequestBody GatewayRouteDefinition gwdefinition)</span> </span>&#123;</span><br><span class="line">        RouteDefinition definition = assembleRouteDefinition(gwdefinition);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.dynamicRouteService.update(definition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-配置application-yml文件"><a href="#3-5-配置application-yml文件" class="headerlink" title="3.5 配置application.yml文件"></a>3.5 配置application.yml文件</h3><p>在application.yml文件配置应用的配置信息，并开启Spring Cloud Gateway对外提供的端点Rest接口。代码如代码清单18-39所示:<br>代码清单 18-39: ch18-7/ch18-7-gateway/src/main/resources/application.yml<br>配置输出日志如下所示:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置输出日志</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">org.springframework.cloud.gateway:</span> <span class="string">TRACE</span></span><br><span class="line">    <span class="string">org.springframework.http.server.reactive:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="string">org.springframework.web.reactive:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="string">reactor.ipc.netty:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="comment">#开启端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">'*'</span></span><br><span class="line"><span class="attr">  security:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><h3 id="3-6-启动ch18-7-gateway应用测试"><a href="#3-6-启动ch18-7-gateway应用测试" class="headerlink" title="3.6 启动ch18-7-gateway应用测试"></a>3.6 启动ch18-7-gateway应用测试</h3><p>(1) 启动ch18-7-gateway应用之后，由于开启了端点，首先打开浏览器访问端点URL:<br><a href="http://localhost:8080/actuator/gateway/routes" target="_blank" rel="noopener">http://localhost:8080/actuator/gateway/routes</a>  ,查看路由信息返回为空，如下图所示:</p><p><img src="/images/sc-g-route/1.png" alt="空的路由信息"></p><p>(2)打开PostMan，访问<a href="http://localhost:8080/route/add" target="_blank" rel="noopener">http://localhost:8080/route/add</a>, 发起Post请求，如下图所示,返回success说明向Gateway增加路由配置成功。<br><img src="/images/sc-g-route/2.png" alt="动态添加路由成功"></p><p> 然后再打开PostMan访问端点URL:<a href="http://localhost:8080/actuator/gateway/routes" target="_blank" rel="noopener">http://localhost:8080/actuator/gateway/routes</a> ,<br> 查看路由信息返回如下图所示，可以看到已经添加的路由配置。<br><img src="/images/sc-g-route/3.png" alt="路由端点返回结果"></p><p>(3) 打开浏览器访问<a href="http://localhost:8080/jd" target="_blank" rel="noopener">http://localhost:8080/jd</a>, 可以正常转发<a href="https://www.jd.com/对应的京东商城首页。" target="_blank" rel="noopener">https://www.jd.com/对应的京东商城首页。</a><br>(4) 通过访问<a href="http://localhost:8080/route/update" target="_blank" rel="noopener">http://localhost:8080/route/update</a>, 对id为jd_route的路由更新配置，如下图所示：<br><img src="/images/sc-g-route/4.png" alt="更新路由配置"></p><p> 然后再访问路由端点URL,发现路由配置已经被更新，如下图所示:<br><img src="/images/sc-g-route/5.png" alt="查看路由端点"></p><p>然后通过浏览器访问<a href="http://localhost:8080/taobao" target="_blank" rel="noopener">http://localhost:8080/taobao</a> ,可以成功转发到淘宝网。<br>(5) 通过访问http: //localhost:8080/route/delete/jd_route,其中的id为路由对应的id，删除路由结果如下图所示:<br><img src="/images/sc-g-route/6.png" alt="删除路由成功"></p><h2 id="4-Spring-Cloud-Gateway推荐文章"><a href="#4-Spring-Cloud-Gateway推荐文章" class="headerlink" title="4.Spring Cloud Gateway推荐文章"></a>4.Spring Cloud Gateway推荐文章</h2><p><a href="http://xujin.org/sc/gw/gw08/">Spring Cloud Gateway中的权重路由</a><br><a href="http://xujin.org/sc/gw/gw07/">Spring Cloud Gateway中的GatewayFilter和GlobalFilter</a><br><a href="http://xujin.org/sc/gw/gw06/">Spring Cloud Gateway只有Pre和POST两种类型的Filter</a><br><a href="http://xujin.org/sc/gw/gw05/">Spring Cloud Gateway基于服务发现的默认路由规则</a><br><a href="http://xujin.org/sc/gw/gw04/">Spring Cloud Gateway的Before路由断言工厂</a><br><a href="http://xujin.org/sc/gw/gw03/">Spring Cloud Gateway的After路由断言工厂</a><br><a href="http://xujin.org/sc/gw/gw02/">Spring Cloud Gateway揭秘之处理请求流程</a><br><a href="http://xujin.org/sc/gw/gw-01/">Spring Cloud Gateway入门案例</a></p><h2 id="5-《重新定义Spring-Cloud实战》中的Spring-Cloud-Gateway"><a href="#5-《重新定义Spring-Cloud实战》中的Spring-Cloud-Gateway" class="headerlink" title="5.《重新定义Spring Cloud实战》中的Spring Cloud Gateway"></a>5.《重新定义Spring Cloud实战》中的Spring Cloud Gateway</h2><p>第17章Spring Cloud Gateway上篇399<br>17.1 Spring Cloud Gateway概述399<br>17.1.1 什么是Spring Cloud Gateway399<br>17.1.2 Spring Cloud Gateway的核心概念399<br>17.2 Spring Cloud Gateway的工作原理400<br>17.3 Spring Cloud Gateway入门案例401<br>17.4 Spring Cloud Gateway的路由断言404<br>17.4.1 After路由断言工厂404<br>17.4.2 Before路由断言工厂406<br>17.4.3 Between路由断言工厂406<br>17.4.4 Cookie路由断言工厂407<br>17.4.5 Header路由断言工厂408<br>17.4.6 Host路由断言工厂410<br>17.4.7 Method路由断言工厂411<br>17.4.8 Query路由断言工厂411<br>17.4.9 RemoteAddr路由断言工厂412<br>17.5 Spring Cloud Gateway的内置Filter413<br>17.5.1 AddRequestHeader过滤器工厂413<br>17.5.2 AddRequestParameter过滤器413<br>17.5.3 RewritePath过滤器414<br>17.5.4 AddResponseHeader过滤器415<br>17.5.5 StripPrefix过滤器416<br>17.5.6 Retry过滤器417<br>17.5.7 Hystrix过滤器418<br>17.6 本章小结420<br>第18章 Spring Cloud Gateway下篇421<br>18.1 Gateway基于服务发现的路由规则421<br>18.1.1 Gateway的服务发现路由概述421<br>18.1.2 服务发现的路由规则案例422<br>18.2 Gateway Filter和Global Filter425<br>18.2.1 Gateway Filter和Global Filter概述425<br>18.2.2 自定义Gateway Filter案例425<br>18.2.3 自定义Global Filter案例427<br>18.3 Spring Cloud Gateway实战428<br>18.3.1 Spring Cloud Gateway权重路由428<br>18.3.2 Spring Cloud Gateway中Https的使用技巧431<br>18.3.3 Spring Cloud Gateway集成Swagger436<br>18.3.4 Spring Cloud Gateway限流442<br>18.3.5 Spring Cloud Gateway的动态路由450<br>18.4 Spring Cloud Gateway源码篇458<br>18.4.1 Spring Cloud Gateway的处理流程458<br>18.4.2 Gateway中ServerWebExchange构建分析459<br>18.4.3 DispatcherHandler源码分析460<br>18.4.4 RoutePredicateHandlerMapping源码分析461<br>18.4.5 FilteringWebHandler源码分析462<br>18.4.6 执行Filter源码分析463<br>18.5 本章小结465</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">├── ch17-1</span><br><span class="line">│   ├── ch17-1-1-gateway</span><br><span class="line">│   ├── ch17-1-2-gateway</span><br><span class="line">│   ├── ch17-1.iml</span><br><span class="line">│   └── pom.xml</span><br><span class="line">├── ch17-2</span><br><span class="line">│   ├── ch17-2-1-gateway</span><br><span class="line">│   ├── ch17-2-2-gateway</span><br><span class="line">│   ├── ch17-2-3-gateway</span><br><span class="line">│   ├── ch17-2-4-gateway</span><br><span class="line">│   ├── ch17-2-5-gateway</span><br><span class="line">│   ├── ch17-2-6-gateway</span><br><span class="line">│   ├── ch17-2-7-gateway</span><br><span class="line">│   ├── ch17-2-8-gateway</span><br><span class="line">│   ├── ch17-2-9-gateway</span><br><span class="line">│   ├── ch17-2-service</span><br><span class="line">│   ├── ch17-2.iml</span><br><span class="line">│   └── pom.xml</span><br><span class="line">├── ch17-3</span><br><span class="line">│   ├── ch17-3-1-gateway</span><br><span class="line">│   ├── ch17-3-2-gateway</span><br><span class="line">│   ├── ch17-3-3-gateway</span><br><span class="line">│   ├── ch17-3-4-gateway</span><br><span class="line">│   ├── ch17-3-5-gateway</span><br><span class="line">│   ├── ch17-3-6-gateway</span><br><span class="line">│   ├── ch17-3-7-gateway</span><br><span class="line">│   ├── ch17-3-service</span><br><span class="line">│   ├── ch17-3.iml</span><br><span class="line">│   └── pom.xml</span><br><span class="line">├── ch18-1</span><br><span class="line">│   ├── ch18-1-consumer</span><br><span class="line">│   ├── ch18-1-eureka</span><br><span class="line">│   ├── ch18-1-gateway</span><br><span class="line">│   ├── ch18-1-provider</span><br><span class="line">│   ├── ch18-1.iml</span><br><span class="line">│   └── pom.xml</span><br><span class="line">├── ch18-2</span><br><span class="line">│   ├── ch18-2-gateway</span><br><span class="line">│   ├── ch18-2-provider</span><br><span class="line">│   ├── ch18-2.iml</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── reademe.txt</span><br><span class="line">├── ch18-3</span><br><span class="line">│   ├── ch18-3-gateway</span><br><span class="line">│   ├── ch18-3-provider</span><br><span class="line">│   ├── ch18-3.iml</span><br><span class="line">│   └── pom.xml</span><br><span class="line">├── ch18-4</span><br><span class="line">│   ├── ch18-4-eureka</span><br><span class="line">│   ├── ch18-4-gateway-https</span><br><span class="line">│   ├── ch18-4-service-a</span><br><span class="line">│   ├── ch18-4-service-b</span><br><span class="line">│   ├── ch18-4.iml</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── reademe.md</span><br><span class="line">├── ch18-5</span><br><span class="line">│   ├── ch18-5-eureka</span><br><span class="line">│   ├── ch18-5-gateway</span><br><span class="line">│   ├── ch18-5-service</span><br><span class="line">│   ├── ch18-5.iml</span><br><span class="line">│   └── pom.xml</span><br><span class="line">├── ch18-6</span><br><span class="line">│   ├── ch18-6-1-gateway</span><br><span class="line">│   ├── ch18-6-2-gateway</span><br><span class="line">│   ├── ch18-6-3-gateway</span><br><span class="line">│   ├── ch18-6-provider</span><br><span class="line">│   ├── ch18-6.iml</span><br><span class="line">│   └── pom.xml</span><br><span class="line">├── ch18-7</span><br><span class="line">│   ├── ch18-7-gateway</span><br><span class="line">│   ├── ch18-7.iml</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── readme.md</span><br></pre></td></tr></table></figure><blockquote><p>Spring Cloud Gateway所有示例代码地址:<a href="https://github.com/SpringCloud/spring-cloud-code" target="_blank" rel="noopener">https://github.com/SpringCloud/spring-cloud-code</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:本文主要介绍了Spring Cloud Gateway的动态路由的简单实现方式。&lt;/p&gt;
&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;p&gt;   网关中有两个重要的概念，那就是路由配置和路由规则，路由配置是指配置某请求路径路由到指定的目的地址。而路由规则是指匹配到路由配置之后，再根据路由规则进行转发处理。&lt;br&gt;   Spring Cloud Gateway作为所有请求流量的入口，在实际生产环境中为了保证高可靠和高可用，尽量避免重启,需要实现Spring Cloud Gateway动态路由配置。前面章节介绍了Spring Cloud Gateway提供的两种方法去配置路由规则，但都是在Spring Cloud Gateway启动时候，就将路由配置和规则加载到内存里，无法做到不重启网关就可以动态的对应路由的配置和规则进行增加，修改和删除。&lt;code&gt;本篇文章简单介绍如何实现Spring Cloud Gateway的动态路由。&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/categories/Spring-Cloud-Gateway/"/>
    
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/tags/Spring-Cloud-Gateway/"/>
    
  </entry>
  
  <entry>
    <title>《重新定义Spring Cloud实战》</title>
    <link href="http://xujin.org/re/01/"/>
    <id>http://xujin.org/re/01/</id>
    <published>2018-09-24T06:00:00.000Z</published>
    <updated>2019-01-13T05:53:02.653Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> 今天是2018年9月24号中秋节，祝福大家中秋节快乐，本文主要介绍《重新定义Spring Cloud实战》。</p><a id="more"></a><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>   随着互联网的快速普及，云计算近年来得到蓬勃发展，企业的IT环境和架构体系也逐渐发生变革，其中最典型的就是<code>过去的单体应用架构发展为当今流行的微服务架构</code>。微服务是一种架构风格，其优势是为软件应用开发带来很大的便利，让敏捷开发和复杂的企业应用快速持续交付成为可能。随着微服务架构的流行，很多企业纷纷使用微服务架构来搭建新的系统或者对历史系统进行重构，但是微服务架构的实施和落地会面临很大的挑战。<code>虽然微服务架构的解决方案很多，但是对于如何真正落地微服务架构，目前还没有公认的技术标准和规范</code>。幸运的是，业界已经有一些很有影响力的开源微服务解决方案，<code>比如2015年年初，Spring团队推出的Spring Cloud，其目标是成为Java领域微服务架构落地的标准。Spring Cloud经过高速迭代和发展，至今已经成为Java领域落地微服务架构的推荐解决方案，为企业IT架构变革保驾护航</code>。</p><p>   Spring Cloud是一个<code>优质的开源项目</code>，<code>它的稳健发展离不开众多开发人员的实践与反馈，开发人员通过一个社区化的平台去交流学习从而使Spring Cloud逐渐完善</code>。Spring Cloud发展到2016年，得到国内越来越多的人的关注，但是相应的学习交流平台和材料比较分散，这阻碍了Spring Cloud在我国的普及和发展。因此Spring Cloud中国社区应运而生。Spring Cloud中国社区 (<a href="http://springcloud.cn" target="_blank" rel="noopener">http://springcloud.cn</a>) 是国内基于Spring Cloud微服务体系创建的非盈利技术社区，是专为Spring Boot或Spring Cloud技术人员提供分享和交流服务的平台，目的是推动Spring Cloud在中国的普及和应用。</p><h2 id="2-背景概述"><a href="#2-背景概述" class="headerlink" title="2.背景概述"></a>2.背景概述</h2><p>   Spring Cloud中国社区(<a href="http://springcloud.cn" target="_blank" rel="noopener">http://springcloud.cn</a>) 是国内基于Spring Cloud微服务体系创建的非盈利技术社区。自2016年10月份创建以来，在北京，上海，深圳，成都等地举办了多次技术沙龙，提供技术交流平台,帮助数万开发者快速学习Spring Cloud并用于生产。为更好的推动Spring Cloud在中国的发展，让更多的开发者受益。社区针对Spring Cloud在国内的使用情况，结合国内企业使用Spring Cloud落地微服务架构遇到的问题给出实战解决方案，特推出此书。《重新定义Spring Cloud实战》封面如下图所示:</p><p><img src="/images/re/fm.png" width="350px" height="450px"></p><p>   本书基于<code>Spring Cloud的Finchley.RELEASE版编写</code>，由7位作者著，<code>共25章，共670页</code>，我们7位作者并不是Spring Cloud微服务落地的架构专家，我们只是Spring Cloud微服务架构的实践者，把我们自己的实践经验分享给大家，帮助大家解决学习和工作上遇到的问题。<code>三人行，必有我师焉，由于我们学识有限，难免会有不足之处，还请读者多多包涵，一起交流学习，共同进步</code>。</p><p><img src="/images/re/gmqd.png" width="350px" height="450px"></p><h2 id="3-本书介绍"><a href="#3-本书介绍" class="headerlink" title="3.本书介绍"></a>3.本书介绍</h2><h3 id="3-1-填坑记录"><a href="#3-1-填坑记录" class="headerlink" title="3.1 填坑记录"></a>3.1 填坑记录</h3><p><img src="/images/re/tkjl.png"></p><h3 id="3-2-BATJ部分书评"><a href="#3-2-BATJ部分书评" class="headerlink" title="3.2 BATJ部分书评"></a>3.2 BATJ部分书评</h3><p>过去十几年里，广义的“微服务”架构以其小团队快速创建和迭代服务带来的架构弹性、扩展性、敏捷性，天然匹配了互联网业务快速发展和变化的特点，在各大互联网公司取得了巨大的成功。时至云原生应用时代，已不再是是否采用微服务架构的问题，而是何时采用以及如何在生产上实战的问题。本书将如何基于Spring Cloud生态体系进行微服务实战的方方面面的细节都涵盖了，，从这个意义上来讲，确实做到了“重新定义”。</p><p><code>—— 坤宇 Nacos开源项目创始人/阿里巴巴高级技术专家</code></p><p>微服务以敏捷为目标，以降低复杂的系统结构为基础，带给我们更好的系统可用性和稳定性。Spring Cloud作为一套完善的微服务治理的典型框架，涵盖了微服务治理的方方面面。本书详细介绍了Spring Cloud的每一个核心模块，以理论与实际相结合的方式，透彻地讲述了Spring Cloud的精髓，是每一位奋战在服务化领域一线的工程师、架构师的*选技术书籍。</p><p><code>——李艳鹏 蚂蚁金服高级技术专家/《分布式服务架构》《可伸缩服务架构》作者</code></p><p>本书可以说是后端架构师的进阶宝典，全面地讲解了如何打造一套强大、健壮的微服务体系，深入分析了涉及到的各个组件。*难得的是，书中结合了作者多年积累的架构经验，分析了各种组件适用的场景，平实地说明了实际使用中的各种考量和细节优化，简直是奋斗在一线的工程师的心血结晶。任何想掌握大型后端架构的工程师，无论使用什么技术框架，都能从本书获益匪浅。</p><p><code>——李双涛 饿了么中间件资深架构师</code></p><p>Spring Cloud已然成为Java领域应用微服务化的*选框架，但国内一直缺少全面论述Spring Cloud商用实践相关的书籍。本书围绕Spring Cloud框架中的服务注册发现、服务路由、服务网关、分布式配置、服务治理、容器化及微服务设计等关键领域进行了深入浅出的讲解，并给予了大量的真实应用案例，新手和老手都可以从中受益良多。作者作为Spring Cloud中国的资深专家，对于Spring Cloud及微服务有着深刻的架构和实战经验，值得信赖。</p><p><code>——单家骏 腾讯中间件高级工程师</code></p><p>在微服务体系中，Spring Cloud是目前最热门的构建微服务体系的解决方案，它提供了构建微服务架构的一些基础设施。本书内容上覆盖了Spring Cloud的一些主要组件，不仅在如何使用上做了详细的介绍，也从原理上深入浅出地剖析了其中的技术要点，同时部分组件也跟周边的一些开源项目进行了对比，且提供了一些原理分析和相关的示例，是一本不可多得的Spring Cloud实战书籍。新手和有微服务实践经验的读者都能从书中得到一些不一样的收获。<br>     <code>——张艺辰 腾讯高级研发工程师</code></p><p>本书不仅对Spring Cloud各核心组件进行了细致入微的介绍，同时也跳出了框架本身，为微服务的实施和分布式架构所面临的基本问题交出了Spring Cloud式答卷，是开发者快速掌握Spring Cloud技术栈的神兵利器。不仅如此，本书还凝聚着Spring Cloud中国社区的智慧结晶，让我们看到了国人在开源领域的研发力量， 可喜可贺。<br>     <code>——王鸿飞 百度高级研发工程师</code></p><p>在微服务如火如荼的今天，各种微服务框架层出不穷，而Spring Cloud无疑是那颗最闪亮的星。从Spring Framework到Spring Boot，再到如今的Spring Cloud，Spring全家桶给众多程序员带来了真正的春天。由于分布式和服务化是极具挑战的任务，因此Spring Cloud也不可避免的愈加复杂。Spring CLoud中国社区为Spring Cloud的普及做出了巨大的贡献，并迅速的降低了语言问题所带来的学习门槛。这本书由Spring CLoud中国社区倾力打造，书籍涵盖了Spring Cloud的服务发现、网关、熔断器、配置、全链路监控等最核心组件，并很接地气地详述了Dubbo向Spring Cloud迁移以及Spring Cloud与分布式事务相关内容，值得一看。<br><code>——张亮 京东金融数据研发负责人/分布式数据库中间件Sharding-Sphere负责人</code></p><p>Spring Cloud提供了完整的微服务技术体系，可以帮助开发者快速地实现架构升级。《重新定义Spring Cloud实战》一书完整地介绍了Spring Cloud中各个组件的使用方法并深度剖析了其中的原理，文章深入浅出帮助开发者快速掌握和理解Spring Cloud。<br><code>——李艺恒 腾讯研发工程师</code></p><h3 id="3-3-读者反馈"><a href="#3-3-读者反馈" class="headerlink" title="3.3 读者反馈"></a>3.3 读者反馈</h3><p><a href="https://github.com/SpringCloud/spring-cloud-code/issues/1" target="_blank" rel="noopener">https://github.com/SpringCloud/spring-cloud-code/issues/1</a></p><h3 id="3-4-源码相关"><a href="#3-4-源码相关" class="headerlink" title="3.4 源码相关"></a>3.4 源码相关</h3><p>书籍目录：<a href="https://github.com/SpringCloud/spring-cloud-catalog" target="_blank" rel="noopener">https://github.com/SpringCloud/spring-cloud-catalog</a></p><p>源码地址:<a href="https://github.com/SpringCloud/spring-cloud-code" target="_blank" rel="noopener">https://github.com/SpringCloud/spring-cloud-code</a></p><h3 id="3-5-内容简介"><a href="#3-5-内容简介" class="headerlink" title="3.5 内容简介"></a>3.5 内容简介</h3><p>这是一本实践与理论并重、广度与深度兼顾的Spring Cloud生产实践开发指南，由Spring Cloud中国社区倾力打造，作者来自阿里、蚂蚁金服、京东金融等企业，本书针对Spring Cloud在国内的使用情况，结合国内企业使用Spring Cloud落地微服务架构遇到的问题，提出可落地的解决方案。</p><p>本书内容有3大特色：</p><ul><li><p><code>足够广</code>：详细讲解了Spring Cloud的核心常用组件以及Spring Cloud的增强生态，针对生产实践中常见问题给出可落地的最佳实践方案，无论您是初学者还是开发人员，还是架构师，都能从此书获益。</p></li><li><p><code>有深度</code>：本书对涉及的Spring Cloud组件按照从入门、进阶、实战、扩展增强的顺序循序渐进进行剖析和讲解,帮助作者知其然并知其所以然，授之以渔。</p></li><li><p><code>重实践</code>：注重生产实践，通过案例驱动，给出优秀的生产实践方案和优秀的生产配置，帮助读者快速落地企业微服务架构。</p></li></ul><p>全书共25章，分为三个部分：</p><ul><li><p>第一部分 核心组件篇（第1~10章）<br>主要讲解Spring Cloud的核心组件。首先从应用架构的发展历程讲起，介绍了微服务出现的背景，并对微服务架构的落地提出了相应的解决方案；然后分别详细介绍了Spring Cloud微服务体系中的核心常用组件，如Eureka、Feign、Ribbon、Hystrix、Zuul等；最后通过一个综合案例将前面介绍的组件连接起来，帮助大家融会贯通。</p></li><li><p>第二部分 进阶实战篇（第11~18章）<br>在核心组件的基础上，对Config、Consul、认证和鉴权、全链路监控以及对Spring Cloud生态圈中第二代网关Spring Cloud Gateway进行了详细阐述，循序渐进、案例驱动，帮助读者加深对组件的理解和运用，更好地掌握相关内容运用于生产实践。</p></li><li><p>第三部分 解决方案篇（第19~25章）<br> 主要从解决方案着手，内容包括Spring Cloud与gRPC的整合方式、版本控制与灰度发布、Spring Cloud容器化、Dubbo向Spring Cloud的迁移、分布式事务、领域驱动等生产级实用解决方案，为企业IT架构微服务化和变革保驾护航。</p></li></ul><h3 id="3-6-推荐理由"><a href="#3-6-推荐理由" class="headerlink" title="3.6 推荐理由"></a>3.6 推荐理由</h3><ul><li><p>本书由Spring Cloud社区官方撰写，核心成员来自原阿里、蚂蚁金服、京东金融等互联网企业，经验丰富。</p></li><li><p>本书内容有3大特色：宽度足够广、深度足够深，而且立足于生产实践，直接从生产实践出发，包含大量生产实践的配置</p></li><li><p>本书得到了来自阿里、腾讯、百度、京东等大型互联网企业的近10位专家的鼎力推荐。</p></li></ul><h3 id="3-7-作者介绍"><a href="#3-7-作者介绍" class="headerlink" title="3.7 作者介绍"></a>3.7 作者介绍</h3><ol><li><p>许进:Spring Cloud中国社区创始人，阿里原资深工程师，花名玹霖，专注于基础架构与中间件研发，曾就职于唯品会平台架构部和饿了么。个人网站：<a href="http://xujin.org。" target="_blank" rel="noopener">http://xujin.org。</a></p></li><li><p>钟尊发:Spring Cloud中国社区联合创始人，现就职于京东金融，对微服务有深入研究。</p></li><li><p>叶志远:Spring Cloud中国社区联合创始人，现就职于蚂蚁金服，花名梓尧。CSDN博客专家，开源社区活跃者，国内Spring Cloud早期实践者</p></li><li><p>方志朋:Spring Cloud中国社区联合创始人，硕士学历，《深入理解Spring Cloud与微服务构建》作者，CSDN博客专家（阅读量600万+），在社区具有较高活跃度与影响力。</p></li><li><p>蔡波斯:拥有多年Java开发经验，曾就职于美团、腾讯。国内Spring Cloud领域的早期实践者，现在金融行业从事FinTech相关研发</p></li><li><p>郭芳碧:多年微服务实践经验，现任职于某互联网金融公司中间件部门。</p></li><li><p>朱德明:拥有10年Java开发经验，多年技术架构和解决方案经验，现任灵雀云微服务架构师，在微服务领域有着丰富的落地经验，曾任某创业公司技术负责人。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; 今天是2018年9月24号中秋节，祝福大家中秋节快乐，本文主要介绍《重新定义Spring Cloud实战》。&lt;/p&gt;
    
    </summary>
    
      <category term="重新定义" scheme="http://xujin.org/categories/%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89/"/>
    
    
      <category term="项目经验" scheme="http://xujin.org/tags/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="重新定义" scheme="http://xujin.org/tags/%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>个人博客-有争议文章版权问题复盘声明</title>
    <link href="http://xujin.org/ex/bqsm/"/>
    <id>http://xujin.org/ex/bqsm/</id>
    <published>2018-09-03T06:00:00.000Z</published>
    <updated>2019-01-13T05:17:07.943Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>:大家好，我是许进沉思录的博主许进，感谢大家对我的博客进行阅读，之所以网站<code>取名为沉思录</code>主要想用<code>博客的方式记录我人生每个阶段的技术思考和技术学习快照，和感悟</code>。由于最近有网友对我博客上的内容的<code>版权问题产生争议</code>，因此本文主要对我个人博客内容的版权问题争议<code>进行复盘声明</code>。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章为什么会出现呢？</p><ul><li>第一,因为最近发生了让我匪夷所思的事情，至于什么事情我不想做过多解释。我只想<code>做好我自己，尊师重道，有则改之，无责加勉</code>。</li><li>第二,最近有幸和另外6位作者写完一本名为《重新定义Spring Cloud实战》技术书，起初规划了32章，最后实在写不动了，保留了精华的25章，由于工作特别忙，7位作者经过无数个夜晚熬夜，最终初稿汇总之后 1400页，我第一感觉我的天呀，纸张这么贵。而且我们在写的过程中，站在读者的角度+降低成本的角度，做了很多思考。最后我们7人进行缩减，能用一句话说明白的就不要用两句话，经过对整本书进行调整，在保持内容不变的情况下最后初稿为1187页。好像跑题了，言归正传，最近电子鲜读版本已公开。好多技术朋友看完之后，有人问我:我可以在我博客上写一下关于这本书的读书笔记吗？我说可以呀，然后他问了我版权署名的问题。我回答是:我不太介意这个问题，我们做好自己就可以。但是为了避免引起不必要的麻烦，我建议他可以写为《某某某书的读书笔记》</li></ul><blockquote><p>针对上述两个问题，和最近发生的事情，真的有必要进行复盘进行声明。</p></blockquote><h2 id="1-博客概述"><a href="#1-博客概述" class="headerlink" title="1.博客概述"></a>1.博客概述</h2><p>   我开始接触写博客的时候是从新浪博客开始，后来经过多次折腾进行迁移。在写这篇文章之前，我想介绍一下什么是<code>博客</code>。百度百科对博客的描述如下图片所示:<br><img src="/images/csl/bkgs.png" width="650px" height="450px"></p><blockquote><p>简单的来说博客就是对<code>学习</code>，<code>生活</code>，<code>感悟</code>，<code>思考</code>的一种记录方式。仅代表个人观点。</p></blockquote><h2 id="2-博客版权声明"><a href="#2-博客版权声明" class="headerlink" title="2. 博客版权声明"></a>2. 博客版权声明</h2><p>  近几年随着知识产权和版权意识的增强，很多人开始对自己在网上发表的博客信息或网络日志，或者想法和感悟增加版权信息。</p><h3 id="2-1-Hexo博客版权增加"><a href="#2-1-Hexo博客版权增加" class="headerlink" title="2.1 Hexo博客版权增加"></a>2.1 Hexo博客版权增加</h3><p>用过Hexo或者Hugo的可以知道，有时为了反复添加重复内容，会统一添加版权信息。代码如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;! -- 添加版权信息 --&gt;</span><br><span class="line">&lt;div class=&quot;article-footer-copyright&quot;&gt;</span><br><span class="line">&lt;i class=&quot;fa fa-lightbulb-o&quot;&gt;&lt;/i&gt;</span><br><span class="line">本文由&lt;b&gt;&lt;a href=&quot;&lt;%= config.root %&gt;index.html&quot; target=&quot;_blank&quot; title=&quot;&lt;%= config.author %&gt;&quot;&gt;&lt;%= config.author %&gt;&lt;/a&gt;&lt;/b&gt;创作和发表,采用&lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CC BY 3.0 CN协议&lt;/a&gt; 进行许可。转载请注明作者及出处,本文作者为&lt;b&gt;&lt;a href=&quot;&lt;%= config.root %&gt;index.html&quot; target=&quot;_blank&quot; title=&quot;&lt;%= config.author %&gt;&quot;&gt;&lt;%= config.author %&gt;&lt;/a&gt;&lt;/b&gt;,本文标题为&lt;b&gt;&lt;a href=&quot;&lt;%- config.root %&gt;&lt;%- post.path %&gt;&quot; target=&quot;_blank&quot; title=&quot;&lt;%= post.title %&gt;&quot;&gt;&lt;%= post.title %&gt;&lt;/a&gt;&lt;/b&gt;</span><br><span class="line">本文链接为&lt;b&gt;&lt;a href=&quot;&lt;%- config.root %&gt;&lt;%- post.path %&gt;&quot; target=&quot;_blank&quot; title=&quot;&lt;%= post.title %&gt;&quot;&gt;&lt;%- config.url %&gt;/&lt;%- post.path %&gt;&lt;/a&gt;&lt;/b&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;! -- 添加版权信息 --&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>优点</code>:统一添加版权信息<br><code>缺点</code>:如果遗漏容易产生误解</p><p>统一添加的方式，虽然方便，即便你指明了作者是谁，但是也容易引起误会，可能会给自己造成困扰。比如下面争议的几篇文章。</p></blockquote><h2 id="3-博客版权-争议问题复盘说明"><a href="#3-博客版权-争议问题复盘说明" class="headerlink" title="3.博客版权-争议问题复盘说明"></a>3.博客版权-争议问题复盘说明</h2><h3 id="3-1-博客主题版权声明"><a href="#3-1-博客主题版权声明" class="headerlink" title="3.1 博客主题版权声明"></a>3.1 博客主题版权声明</h3><p>  我博客基于Hexo构建，主题基于<a href="https://github.com/ppoffice/hexo-theme-icarus优化美化进行定制DIY。感谢原作者贡献了分享了该主题。" target="_blank" rel="noopener">https://github.com/ppoffice/hexo-theme-icarus优化美化进行定制DIY。感谢原作者贡献了分享了该主题。</a></p><h3 id="3-2-Spring-Cloud-Zuul异常处理文章-版权说明"><a href="#3-2-Spring-Cloud-Zuul异常处理文章-版权说明" class="headerlink" title="3.2 Spring Cloud Zuul异常处理文章-版权说明"></a>3.2 Spring Cloud Zuul异常处理文章-版权说明</h3><p>如下图所示Spring Cloud Zuul异常处理文章来自于Spring Cloud中国社区博客投稿，文稿署名张劲，为了让更多的人学习了解。放了一份到我博客已注明作者。</p><p><img src="/images/csl/zywz1.jpg" width="650px" height="850px"></p><p>跟<code>作者沟通了解之后</code>，<code>作者没有参加过上海技术沙龙也没看过对应的PPT</code>，<br><img src="/images/csl/zjsm2.png" width="650px" height="850px"></p><h3 id="3-3-数据库连性池性能测试-文章版权声明"><a href="#3-3-数据库连性池性能测试-文章版权声明" class="headerlink" title="3.3 数据库连性池性能测试-文章版权声明"></a>3.3 数据库连性池性能测试-文章版权声明</h3><p> 本篇文章链接在我博客上地址是:<a href="http://xujin.org/mw/dcp-test/">http://xujin.org/mw/dcp-test/</a>， 是我在唯品会中间件团队时学习中间件的记录，收集整理成MD文稿而来。</p><ul><li><p>通过百度搜索结果如下，最下面的两个截图类似的文章。<br><img src="/images/csl/zjzh1.png" width="650px" height="850px"></p></li><li><p>跟原作者沟通声明版权为唯品会中间件团队<br>沟通结果如下:<br><img src="/images/csl/htjl.jpg" width="650px" height="850px"></p></li></ul><p>处理结果如下:<br><img src="/images/csl/zhsh.jpg" width="650px" height="850px"></p><h2 id="4-总结处理方式"><a href="#4-总结处理方式" class="headerlink" title="4.总结处理方式"></a>4.总结处理方式</h2><p>博客后期优化方式:<br>1.<code>修改统一加版权方式为手动添加，减少不必要的误会</code>。<br>2.<code>增加反馈机制</code>，第一时间<code>反馈处理</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:大家好，我是许进沉思录的博主许进，感谢大家对我的博客进行阅读，之所以网站&lt;code&gt;取名为沉思录&lt;/code&gt;主要想用&lt;code&gt;博客的方式记录我人生每个阶段的技术思考和技术学习快照，和感悟&lt;/code&gt;。由于最近有网友对我博客上的内容的&lt;code&gt;版权问题产生争议&lt;/code&gt;，因此本文主要对我个人博客内容的版权问题争议&lt;code&gt;进行复盘声明&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="沉思录" scheme="http://xujin.org/categories/%E6%B2%89%E6%80%9D%E5%BD%95/"/>
    
    
      <category term="沉思录" scheme="http://xujin.org/tags/%E6%B2%89%E6%80%9D%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Gateway中的权重路由</title>
    <link href="http://xujin.org/sc/gw/gw08/"/>
    <id>http://xujin.org/sc/gw/gw08/</id>
    <published>2018-06-09T06:00:00.000Z</published>
    <updated>2019-01-12T03:31:12.149Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>:本文主要通过运用Spring Cloud Gateway的WeightRoutePredicateFactory对URL进行权重路由。</p><a id="more"></a><h2 id="1-权重路由"><a href="#1-权重路由" class="headerlink" title="1.权重路由"></a>1.权重路由</h2><h3 id="1-1-权重路由使用场景"><a href="#1-1-权重路由使用场景" class="headerlink" title="1.1 权重路由使用场景"></a>1.1 权重路由使用场景</h3><p>在开发或者测试的时候，或者线上发布，线上服务多版本控制的时候，需要对服务提供权重路由，最常见的使用就是，一个服务有两个版本，旧版本V1，新版本v2。在线上灰度的时候，需要通过网关动态实时推送，路由权重信息。比如95%的流量走服务v1版本，5%的流量走服务v2版本。</p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/ce44017f07ce3a1b1d30e87995227ef4.jpg?Expires=1843884992&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=DBIQ%2BF%2BgIkpjik7x0CmmfaSrglU%3D" alt=""></p><blockquote><p>issue: The Spring Cloud Gateway issue of Allow Rolling Deployments <a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/67" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-gateway/issues/67</a></p></blockquote><h3 id="1-2-Spring-Cloud-Gateway权重路由原理"><a href="#1-2-Spring-Cloud-Gateway权重路由原理" class="headerlink" title="1.2 Spring Cloud Gateway权重路由原理"></a>1.2 Spring Cloud Gateway权重路由原理</h3><p>Spring Cloud Gateway中提供了<code>org.springframework.cloud.gateway.handler.predicate.WeightRoutePredicateFactory</code>去实现根据分组设置权重进行路由，因此使用起来相对比较简单，有兴趣的可以debug阅读源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeightRoutePredicateFactory</span> <span class="keyword">extends</span> <span class="title">AbstractRoutePredicateFactory</span>&lt;<span class="title">WeightConfig</span>&gt; <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(WeightRoutePredicateFactory.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_KEY = WeightConfig.CONFIG_PREFIX + <span class="string">".group"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String WEIGHT_KEY = WeightConfig.CONFIG_PREFIX + <span class="string">".weight"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeightRoutePredicateFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(WeightConfig.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher publisher)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.publisher = publisher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">shortcutFieldOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Arrays.asList(GROUP_KEY, WEIGHT_KEY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">shortcutFieldPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> WeightConfig.CONFIG_PREFIX;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeApply</span><span class="params">(WeightConfig config)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (publisher != <span class="keyword">null</span>) &#123;</span><br><span class="line">publisher.publishEvent(<span class="keyword">new</span> WeightDefinedEvent(<span class="keyword">this</span>, config));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title">apply</span><span class="params">(WeightConfig config)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> exchange -&gt; &#123;</span><br><span class="line">Map&lt;String, String&gt; weights = exchange.getAttributeOrDefault(WEIGHT_ATTR,</span><br><span class="line">Collections.emptyMap());</span><br><span class="line"></span><br><span class="line">String routeId = exchange.getAttribute(GATEWAY_PREDICATE_ROUTE_ATTR);</span><br><span class="line"></span><br><span class="line"><span class="comment">// all calculations and comparison against random num happened in</span></span><br><span class="line"><span class="comment">// WeightCalculatorWebFilter</span></span><br><span class="line">String group = config.getGroup();</span><br><span class="line"><span class="keyword">if</span> (weights.containsKey(group)) &#123;</span><br><span class="line"></span><br><span class="line">String chosenRoute = weights.get(group);</span><br><span class="line"><span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">log.trace(<span class="string">"in group weight: "</span>+ group + <span class="string">", current route: "</span> + routeId +<span class="string">", chosen route: "</span> + chosenRoute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> routeId.equals(chosenRoute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Spring-Cloud-Gateway中的权重路由案例"><a href="#2-Spring-Cloud-Gateway中的权重路由案例" class="headerlink" title="2.Spring Cloud Gateway中的权重路由案例"></a>2.Spring Cloud Gateway中的权重路由案例</h2><h3 id="2-1-案例代码地址"><a href="#2-1-案例代码地址" class="headerlink" title="2.1 案例代码地址"></a>2.1 案例代码地址</h3><p><a href="https://github.com/SoftwareKing/sc-gateway/tree/master/ch4" target="_blank" rel="noopener">https://github.com/SoftwareKing/sc-gateway/tree/master/ch4</a></p><h3 id="2-2-Spring-Cloud-Gateway-Server说明"><a href="#2-2-Spring-Cloud-Gateway-Server说明" class="headerlink" title="2.2 Spring Cloud Gateway Server说明"></a>2.2 Spring Cloud Gateway Server说明</h3><p>Spring Cloud Gateway will dispatch 95% of the requests to version 1 and 5% of the traffic to version 2 of a specified service, as shown by the following figure.</p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/f8e439776d6bbff94993fafdfc02b98c.png?Expires=1843885017&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=a8ZhI5O5y7Gs7TP4eusGOT7qdoE%3D" alt=""></p><p>我们通过在Spring Cloud Gateway中会配置不同的权重信息到不同URL上，Spring Cloud Gateway会根据我们配置的路由权重信息，将请求分发到不同的源服务组，权重信息如ch4/ch4-gateway中的application.yml所示，主要配置信息如下。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">ch4-gateway</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      routes:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - id:</span> <span class="string">service1_v1</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://localhost:8081/v1</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">Path=/test</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">Weight=service1,</span> <span class="number">95</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - id:</span> <span class="string">service1_v2</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://localhost:8081/v2</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">Path=/test</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">Weight=service1,</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p>Weight=service1, 95，Weight=service1, 5就是路由的权重信息。</p></blockquote><h3 id="2-3-源服务"><a href="#2-3-源服务" class="headerlink" title="2.3 源服务"></a>2.3 源服务</h3><p>源服务在本案例中源服务如ch4-service-provider所示，主要提提供Gateway Server权重路由对应的后端源服务。因为比较简单因此不做详细说明，主要代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.sc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/v1"</span>, produces = <span class="string">"text/plain;charset=UTF-8"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">v1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Mono.just(<span class="string">"v1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/v2"</span>, produces = <span class="string">"text/plain;charset=UTF-8"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">v2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Mono.just(<span class="string">"v2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4 测试"></a>2.4 测试</h3><p>分别启动ch4-gateway，ch4-service-provider进行访问:<a href="http://localhost:8080/test" target="_blank" rel="noopener">http://localhost:8080/test</a> 测试,发现会根据所设权重进行路由。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:本文主要通过运用Spring Cloud Gateway的WeightRoutePredicateFactory对URL进行权重路由。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/categories/Spring-Cloud-Gateway/"/>
    
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/tags/Spring-Cloud-Gateway/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Gateway中的GatewayFilter和GlobalFilter</title>
    <link href="http://xujin.org/sc/gw/gw07/"/>
    <id>http://xujin.org/sc/gw/gw07/</id>
    <published>2018-05-26T06:00:00.000Z</published>
    <updated>2019-01-12T03:30:42.775Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>:本文主要介绍了什么是GatewayFilter和GlobalFilter，以及区别和联系。然后介绍如何在Spring Cloud Gateway中自定义使用GatewayFilter和GlobalFilter。</p><a id="more"></a><h2 id="1-Spring-Cloud-gateway的Filter"><a href="#1-Spring-Cloud-gateway的Filter" class="headerlink" title="1. Spring Cloud gateway的Filter"></a>1. Spring Cloud gateway的Filter</h2><p>Spring Cloud gateway中的Filter从接口实现上分为两种一种是GatewayFilter，另外一种是GlobalFilter。</p><h2 id="1-1-GatewayFilter与GlobalFilter的区别"><a href="#1-1-GatewayFilter与GlobalFilter的区别" class="headerlink" title="1.1 GatewayFilter与GlobalFilter的区别"></a>1.1 GatewayFilter与GlobalFilter的区别</h2><p>区别用英语可以总结如下:<br>At a high level global filters are applied to all routes, while a gateway filter will be applied to an individual route(s)</p><blockquote><p>在一个高的角度来看，Global filters会被应用到所有的路由上，而Gateway filter将应用到<code>单个路由</code>上或者<code>一个分组的路由</code>上。在下面的案例中将会进行说明。</p></blockquote><h2 id="1-2-本文代码地址"><a href="#1-2-本文代码地址" class="headerlink" title="1.2 本文代码地址"></a>1.2 本文代码地址</h2><blockquote><p><a href="https://github.com/SoftwareKing/sc-gateway/tree/master/ch2" target="_blank" rel="noopener">https://github.com/SoftwareKing/sc-gateway/tree/master/ch2</a></p></blockquote><h2 id="2-GatewayFilter和GlobalFilter"><a href="#2-GatewayFilter和GlobalFilter" class="headerlink" title="2. GatewayFilter和GlobalFilter"></a>2. GatewayFilter和GlobalFilter</h2><h3 id="2-1-GatewayFilter"><a href="#2-1-GatewayFilter" class="headerlink" title="2.1 GatewayFilter"></a>2.1 GatewayFilter</h3><h4 id="2-1-1-什么是GatewayFilter"><a href="#2-1-1-什么是GatewayFilter" class="headerlink" title="2.1.1 什么是GatewayFilter"></a>2.1.1 什么是GatewayFilter</h4><p>Contract for interception-style, chained processing of Web requests that may be used to implement cross-cutting, application-agnostic requirements such<br> as security, timeouts, and others. Specific to a Gateway Copied from WebFilter</p><blockquote><p>GatewayFilter是从WebFilter中Copy过来的，相当于一个Filter过滤器，可以对访问的URL过滤横切处理，应用场景比如超时，安全等。</p></blockquote><p>从Spring Cloud Gateway的源码中如下所示，可以看出GatewayFilter的使用场景:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Contract for interception-style, chained processing of Web requests that may</span></span><br><span class="line"><span class="comment"> * be used to implement cross-cutting, application-agnostic requirements such</span></span><br><span class="line"><span class="comment"> * as security, timeouts, and others. Specific to a Gateway</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Copied from WebFilter</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rossen Stoyanchev</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 5.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GatewayFilter</span> <span class="keyword">extends</span> <span class="title">ShortcutConfigurable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String NAME_KEY = <span class="string">"name"</span>;</span><br><span class="line">String VALUE_KEY = <span class="string">"value"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process the Web request and (optionally) delegate to the next</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> WebFilter&#125; through the given &#123;<span class="doctag">@link</span> GatewayFilterChain&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exchange the current server exchange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> chain provides a way to delegate to the next filter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125; to indicate when request processing is complete</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>GatewayFilter和GlobalFilter两个接口中定义的方法一样都是Mono<void> filter(ServerWebExchange exchange, GatewayFilterChain chain)，唯一的区别就是GatewayFilter继承了ShortcutConfigurable，GlobalFilter没有任何继承。</void></p></blockquote><h5 id="2-1-2-自定义GatewayFilter-Custom-GatewayFilter"><a href="#2-1-2-自定义GatewayFilter-Custom-GatewayFilter" class="headerlink" title="2.1.2 自定义GatewayFilter(Custom GatewayFilter)"></a>2.1.2 自定义GatewayFilter(Custom GatewayFilter)</h5><p>如org.xujin.sc.filter.CustomFilter代码所示，通过自定义GatewayFilter对路由转发的处理时长统计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.sc.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计某个或者某种路由的的处理时长</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomFilter</span> <span class="keyword">implements</span> <span class="title">GatewayFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(GatewayFilter.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String COUNT_Start_TIME = <span class="string">"countStartTime"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        exchange.getAttributes().put(COUNT_Start_TIME, System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange).then(</span><br><span class="line">                Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">                    Long startTime = exchange.getAttribute(COUNT_Start_TIME);</span><br><span class="line">                    Long endTime=(System.currentTimeMillis() - startTime);</span><br><span class="line">                    <span class="keyword">if</span> (startTime != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        log.info(exchange.getRequest().getURI().getRawPath() + <span class="string">": "</span> + endTime + <span class="string">"ms"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Ordered.LOWEST_PRECEDENCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-3-Gateway-Filter与RouteLocator绑定使用"><a href="#2-1-3-Gateway-Filter与RouteLocator绑定使用" class="headerlink" title="2.1.3 Gateway Filter与RouteLocator绑定使用"></a>2.1.3 Gateway Filter与RouteLocator绑定使用</h4><p>在org.xujin.sc.GatewayServerApplication中customerRouteLocator如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customerRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes()</span><br><span class="line">                .route(r -&gt; r.path(<span class="string">"/test/prefix/**"</span>)</span><br><span class="line">                        .filters(f -&gt; f.stripPrefix(<span class="number">2</span>)</span><br><span class="line">                                .filter(<span class="keyword">new</span> CustomFilter())</span><br><span class="line">                                .addResponseHeader(<span class="string">"X-Response-test"</span>, <span class="string">"test"</span>))</span><br><span class="line">                        .uri(<span class="string">"lb://SC-CONSUMER"</span>)</span><br><span class="line">                        .order(<span class="number">0</span>)</span><br><span class="line">                        .id(<span class="string">"test_consumer_service"</span>)</span><br><span class="line">                )</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GatewayServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>r.path(“/test/prefix/**”)表示自定义了访问前缀，在真正的Gateway进行路由转发的时候，会用过f.stripPrefix(2)把前缀去掉。</p><blockquote><p>使用场景:可以把对外暴露的URL通过加前缀分组打标。</p></blockquote></li><li><p>filter(new CustomFilter()</p><blockquote><p>filter(new CustomFilter()，表示把自定义的Filter加到Filter链里面执行，注意一点是自定义GlobalFilter不需要加进去。</p></blockquote></li><li><p>uri(“lb://SC-CONSUMER”)</p><blockquote><p>uri(“lb://SC-CONSUMER”)表示Spring Cloud Gateway对spring.application.name等于sc-consumer源服务应用中的URL进行协议适配转发。</p></blockquote></li></ol><h4 id="2-1-4-测试如下"><a href="#2-1-4-测试如下" class="headerlink" title="2.1.4 测试如下:"></a>2.1.4 测试如下:</h4><p>1.访问<a href="http://localhost:9000/SC-CONSUMER/hello/xujin" target="_blank" rel="noopener">http://localhost:9000/SC-CONSUMER/hello/xujin</a> 能正常访问。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DEBUG 31658 --- [ctor-http-nio-2] o.s.c.g.h.RoutePredicateHandlerMapping   : Route matched: CompositeDiscoveryClient_SC-CONSUMER</span><br><span class="line">2018-05-27 09:58:07.905 DEBUG 31658 --- [ctor-http-nio-2] o.s.c.g.h.RoutePredicateHandlerMapping   : Mapping [Exchange: GET http://localhost:9000/SC-CONSUMER/hello/xujin] to Route&#123;id='CompositeDiscoveryClient_SC-CONSUMER', uri=lb://SC-CONSUMER, order=0, predicate=org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory$$Lambda$337/1295338046@f2ff0c8, gatewayFilters=[OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.RewritePathGatewayFilterFactory$$Lambda$717/1168359877@1f74a2b, order=1&#125;]&#125;</span><br><span class="line">2018-05-27 09:58:07.905 DEBUG 31658 --- [ctor-http-nio-2] o.s.c.g.handler.FilteringWebHandler      : Sorted gatewayFilterFactories: [OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@f5bf288&#125;, order=-1&#125;, OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.RewritePathGatewayFilterFactory$$Lambda$717/1168359877@1f74a2b, order=1&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@26c77f54&#125;, order=10000&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.LoadBalancerClientFilter@4c38cd16&#125;, order=10100&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@2c1d57bc&#125;, order=2147483637&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@6e9a0bea&#125;, order=2147483646&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@7ddcb0dc&#125;, order=2147483647&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@3e856100&#125;, order=2147483647&#125;]</span><br></pre></td></tr></table></figure><blockquote><p>从上面的控制台打印日志可以看出，没有打印出该URL对应的耗时。</p></blockquote><p>2.加上URL前缀/test/prefix/访问，测试URL为<br><a href="http://localhost:9000/test/prefix/hello/testCustomFilter/xujin" target="_blank" rel="noopener">http://localhost:9000/test/prefix/hello/testCustomFilter/xujin</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-05-27 10:01:56.057 DEBUG 31658 --- [ctor-http-nio-2] o.s.c.g.h.RoutePredicateHandlerMapping   : Mapping [Exchange: GET http://localhost:9000/test/prefix/hello/testCustomFilter/xujin] to Route&#123;id='test_consumer_service', uri=lb://SC-CONSUMER, order=0, predicate=org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory$$Lambda$337/1295338046@6dbaa72e, gatewayFilters=[OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.StripPrefixGatewayFilterFactory$$Lambda$340/1149217113@41fb2078, order=0&#125;, org.xujin.sc.filter.CustomFilter@281885a3, OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.AddResponseHeaderGatewayFilterFactory$$Lambda$342/1099925775@4705cae6, order=0&#125;]&#125;</span><br><span class="line">2018-05-27 10:01:56.057 DEBUG 31658 --- [ctor-http-nio-2] o.s.c.g.handler.FilteringWebHandler      : Sorted gatewayFilterFactories: [OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@f5bf288&#125;, order=-1&#125;, OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.StripPrefixGatewayFilterFactory$$Lambda$340/1149217113@41fb2078, order=0&#125;, OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.AddResponseHeaderGatewayFilterFactory$$Lambda$342/1099925775@4705cae6, order=0&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@26c77f54&#125;, order=10000&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.LoadBalancerClientFilter@4c38cd16&#125;, order=10100&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@2c1d57bc&#125;, order=2147483637&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@6e9a0bea&#125;, order=2147483646&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@7ddcb0dc&#125;, order=2147483647&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@3e856100&#125;, order=2147483647&#125;, org.xujin.sc.filter.CustomFilter@281885a3]</span><br><span class="line">2018-05-27 10:02:00.347  INFO 31658 --- [ctor-http-nio-8] o.s.cloud.gateway.filter.GatewayFilter   : /hello/testCustomFilter/xujin: 859ms</span><br></pre></td></tr></table></figure><blockquote><p>如上日志可以看到/hello/testCustomFilter/xujin: 859ms，Gateway转发的时候去掉了前缀。</p></blockquote><h3 id="2-2-GlobalFilter"><a href="#2-2-GlobalFilter" class="headerlink" title="2.2 GlobalFilter"></a>2.2 GlobalFilter</h3><h4 id="2-2-1-什么是GlobalFilter"><a href="#2-2-1-什么是GlobalFilter" class="headerlink" title="2.2.1 什么是GlobalFilter"></a>2.2.1 什么是GlobalFilter</h4><blockquote><p>The GlobalFilter interface has the same signature as GatewayFilter. These are special filters that are conditionally applied to all routes. (This interface and usage are subject to change in future milestones).</p></blockquote><p>Spring Cloud gateway定义了GlobalFilter的接口让我们去自定义实现自己的的GlobalFilter。GlobalFilter是一个全局的Filter，作用于所有的路由。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GlobalFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process the Web request and (optionally) delegate to the next</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> WebFilter&#125; through the given &#123;<span class="doctag">@link</span> GatewayFilterChain&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exchange the current server exchange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> chain provides a way to delegate to the next filter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125; to indicate when request processing is complete</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-自定义全局过滤器-Custom-GlobalFilter"><a href="#2-2-2-自定义全局过滤器-Custom-GlobalFilter" class="headerlink" title="2.2.2 自定义全局过滤器(Custom GlobalFilter)"></a>2.2.2 自定义全局过滤器(Custom GlobalFilter)</h4><p>在这里简单定义AuthSignatureFilter实现<code>GlobalFilter</code>，使用场景就是Gateway对请求的URL校验权限，判断请求的URL是否是合法请求。通过从ServerWebExchange获取请求上下文中authToken对应的值，进行判null处理，其它的check逻辑可以自定定制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xujin.sc.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用鉴权</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthSignatureFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        String token = exchange.getRequest().getQueryParams().getFirst(<span class="string">"authToken"</span>);</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span> || token.isEmpty()) &#123;</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>GlobalFilter写完了，那问题来了？如何让其在Gateway中运行生效，有两种方式一种直接加<code>@Component</code>注解，另外一种可以在 Spring Config 中配置这个 Bean如下所示:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthSignatureFilter <span class="title">authSignatureFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AuthSignatureFilter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>1.访问<a href="http://localhost:9000/test/prefix/hello/testCustomFilter/xujin" target="_blank" rel="noopener">http://localhost:9000/test/prefix/hello/testCustomFilter/xujin</a> 如下所示由于authToken为空401返回.</p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/91ce199f4af8f4bd9576aace65940253.jpeg?Expires=1842749245&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=Is0KT0QAVXkPS20EdSPvDqmlxmc%3D" alt=""></p><p>2.访问<a href="http://localhost:9000/test/prefix/hello/testCustomFilter/xujin?authToken=asdasdsddasadsadsadsdadsewew32rg" target="_blank" rel="noopener">http://localhost:9000/test/prefix/hello/testCustomFilter/xujin?authToken=asdasdsddasadsadsadsdadsewew32rg</a></p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/86509f882391c3a20d2f32778dd1c2e9.jpeg?Expires=1842749511&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=lAd7U0lj4WZ0HMWF9SpbfKJ4aR8%3D" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:本文主要介绍了什么是GatewayFilter和GlobalFilter，以及区别和联系。然后介绍如何在Spring Cloud Gateway中自定义使用GatewayFilter和GlobalFilter。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/categories/Spring-Cloud-Gateway/"/>
    
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/tags/Spring-Cloud-Gateway/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Gateway基于服务发现的默认路由规则</title>
    <link href="http://xujin.org/sc/gw/gw05/"/>
    <id>http://xujin.org/sc/gw/gw05/</id>
    <published>2018-05-21T06:00:00.000Z</published>
    <updated>2019-01-12T03:35:27.669Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>:本篇文章主要介绍了Spring Cloud Gateway的基于服务发现的默认路由规则，从中可以看出Gateway的路由规则:<a href="http://Gateway_HOST:Gateway_PORT/大写的serviceId/*" target="_blank" rel="noopener">http://Gateway_HOST:Gateway_PORT/大写的serviceId/*</a> 和 zuul的默认路由规则<a href="http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/*差不多。" target="_blank" rel="noopener">http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/*差不多。</a></p><a id="more"></a><h2 id="1-Spring-Gateway概述"><a href="#1-Spring-Gateway概述" class="headerlink" title="1.Spring Gateway概述"></a>1.Spring Gateway概述</h2><h3 id="1-1-什么是Spring-Cloud-Gateway"><a href="#1-1-什么是Spring-Cloud-Gateway" class="headerlink" title="1.1 什么是Spring Cloud Gateway"></a>1.1 什么是Spring Cloud Gateway</h3><p>   <code>Spring Cloud Gateway</code>是Spring官方基于Spring 5.0，Spring Boot 2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供一种简单而有效的统一的API路由管理方式。Spring Cloud Gateway作为Spring Cloud生态系中的网关，目标是替代Netflix ZUUL，其不仅提供统一的路由方式，并且基于Filter链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。</p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/3f25fcd95769a54eb391931449d5298f.jpg?Expires=1841935182&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=F%2BSKuTDpXoj5xCXwIIJ4u8D1C2A%3D" alt=""></p><h3 id="1-2-Spring-Cloud-Gateway的功能"><a href="#1-2-Spring-Cloud-Gateway的功能" class="headerlink" title="1.2 Spring Cloud Gateway的功能"></a>1.2 Spring Cloud Gateway的功能</h3><p>Spring Cloud Gateway 的特征：</p><ul><li>基于 Spring Framework 5，Project Reactor 和 Spring Boot 2.0<br>动态路由</li><li>Predicates 和 Filters 作用于特定路由</li><li>集成 Hystrix 断路器</li><li>集成 Spring Cloud DiscoveryClient</li><li>易于编写的 Predicates 和 Filters</li><li>限流</li><li>路径重写</li></ul><h2 id="2-Spring-Cloud-Gateway的工程流程"><a href="#2-Spring-Cloud-Gateway的工程流程" class="headerlink" title="2. Spring Cloud Gateway的工程流程"></a>2. Spring Cloud Gateway的工程流程</h2><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/22e4eccf2cbe09332678c04b8de98ebe.jpg?Expires=1841935407&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=NHcssduqPTQry7HCmudjphw0qC4%3D" alt=""></p><p>   客户端向 Spring Cloud Gateway 发出请求。然后在 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。<br>过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。</p><h3 id="2-1-Pre和POST两种类型的过滤器"><a href="#2-1-Pre和POST两种类型的过滤器" class="headerlink" title="2.1 Pre和POST两种类型的过滤器"></a>2.1 Pre和POST两种类型的过滤器</h3><h2 id="3-基于服务发现的默认路由规则"><a href="#3-基于服务发现的默认路由规则" class="headerlink" title="3.基于服务发现的默认路由规则"></a>3.基于服务发现的默认路由规则</h2><h3 id="3-1-zuul和gateway的默认路由规则"><a href="#3-1-zuul和gateway的默认路由规则" class="headerlink" title="3.1 zuul和gateway的默认路由规则"></a>3.1 zuul和gateway的默认路由规则</h3><h4 id="3-1-1-zuul的默认路由规则"><a href="#3-1-1-zuul的默认路由规则" class="headerlink" title="3.1.1 zuul的默认路由规则"></a>3.1.1 zuul的默认路由规则</h4><p>说明默认情况下，Zuul会代理所有注册到Eureka Server的微服务，并且Zuul的路由规则如下：<br>   <a href="http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/**" target="_blank" rel="noopener">http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/**</a> 会被转发到serviceId对应的微服务。<br>   <a href="http://localhost:8040/sc-zuul-first-provider/sc/order/2" target="_blank" rel="noopener">http://localhost:8040/sc-zuul-first-provider/sc/order/2</a><br>   <img src="http://xujin.org/images/sc-study/sc-zuul-01-t1.png" alt="默认路由规则"></p><h4 id="3-1-2-gateway的默认路由规则"><a href="#3-1-2-gateway的默认路由规则" class="headerlink" title="3.1.2 gateway的默认路由规则"></a>3.1.2 gateway的默认路由规则</h4><p>下面的案例中会演示：<a href="http://localhost:9000/SC-CONSUMER/hello/xujin" target="_blank" rel="noopener">http://localhost:9000/SC-CONSUMER/hello/xujin</a></p><blockquote><p><a href="http://Gateway_HOST:Gateway_PORT/大写的serviceId/**，其中微服务应用名默认大写访问。" target="_blank" rel="noopener">http://Gateway_HOST:Gateway_PORT/大写的serviceId/**，其中微服务应用名默认大写访问。</a></p></blockquote><h3 id="3-2-案例示例代码"><a href="#3-2-案例示例代码" class="headerlink" title="3.2  案例示例代码"></a>3.2  案例示例代码</h3><p><a href="https://github.com/SoftwareKing/sc-gateway/tree/master/ch1" target="_blank" rel="noopener">https://github.com/SoftwareKing/sc-gateway/tree/master/ch1</a></p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/74473f8fa112dbf946452dd234be9783.jpeg?Expires=1841935730&OSSAccessKeyId=LTAI57F52hRuWq3h&Signature=8hk%2BcIs0lpEA3S01TQsu%2BVdome8%3D" width="450px" height="252px"></p><table><thead><tr><th>模块</th><th>说明</th><th>端口</th></tr></thead><tbody><tr><td>ch1-sc-consumer</td><td>服务消费者</td><td>8000</td></tr><tr><td>ch1-sc-eureka</td><td>Eureka Server注册中心</td><td>8761</td></tr><tr><td>ch1-sc-gateway</td><td>Spring Cloud Gateway Sever</td><td>9000</td></tr><tr><td>ch1-sc-provider</td><td>服务提供者</td><td>8001</td></tr></tbody></table><h4 id="3-2-1-ch1-sc-gateway工程说明"><a href="#3-2-1-ch1-sc-gateway工程说明" class="headerlink" title="3.2.1 ch1-sc-gateway工程说明"></a>3.2.1 ch1-sc-gateway工程说明</h4><h4 id="3-2-1-1-Maven依赖"><a href="#3-2-1-1-Maven依赖" class="headerlink" title="3.2.1.1  Maven依赖"></a>3.2.1.1  Maven依赖</h4><p>Spring Cloud Gateway sever主要的maven依赖如下所示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-1-2-yml文件配置"><a href="#3-2-1-2-yml文件配置" class="headerlink" title="3.2.1.2 yml文件配置"></a>3.2.1.2 yml文件配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">sc-gateway-server</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        locator:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9000</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">org.springframework.cloud.gateway:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>配置说明：</p><blockquote><p>spring.cloud.gateway.discovery.locator.enabled：是否与服务发现组件进行结合，通过 serviceId 转发到具体的服务实例。默认为false，设为true便开启通过服务中心的自动根据 serviceId 创建路由的功能。</p></blockquote><hr><blockquote><p>修改spring cloud gateway server监听的端口为9000</p></blockquote><hr><blockquote><p>eureka.client.service-url.defaultZone: <a href="http://localhost:8761/eureka/,指定注册中心的地址，Spring" target="_blank" rel="noopener">http://localhost:8761/eureka/,指定注册中心的地址，Spring</a> Cloud Gateway从注册中心获取已经注册的服务列表。</p></blockquote><hr><blockquote><p>logging.level.org.springframework.cloud.gateway: debug,开启spring-Cloud-gateway的日志级别为debug，方便debug调试。</p></blockquote><h3 id="3-3-启动测试"><a href="#3-3-启动测试" class="headerlink" title="3.3 启动测试"></a>3.3 启动测试</h3><h4 id="3-3-1-错误的路由规则访问"><a href="#3-3-1-错误的路由规则访问" class="headerlink" title="3.3.1 错误的路由规则访问"></a>3.3.1 错误的路由规则访问</h4><p>访问Spring Cloud Gateway对应的server，当访问<a href="http://localhost:9000/sc-consumer/hello/xujin的时候，报错如下所示，正确的Spring" target="_blank" rel="noopener">http://localhost:9000/sc-consumer/hello/xujin的时候，报错如下所示，正确的Spring</a> Cloud Gateway的默认路由规则:<code>http://Gateway_HOST:Gateway_PORT/大写的serviceId/**</code></p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/d98d829455d0f1a180eb1b4561c7d530.jpeg?Expires=1842311197&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=bIbKneLe1y%2B32zADPV6uQP4B2QY%3D" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2018-05-18 01:10:49.742 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-CONSUMER applying &#123;pattern=/SC-CONSUMER/**&#125; to Path</span><br><span class="line">2018-05-18 01:10:49.743 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-CONSUMER applying filter &#123;regexp=/SC-CONSUMER/(?&lt;remaining&gt;.*), replacement=/$&#123;remaining&#125;&#125; to RewritePath</span><br><span class="line">2018-05-18 01:10:49.743 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition matched: CompositeDiscoveryClient_SC-CONSUMER</span><br><span class="line">2018-05-18 01:10:49.744 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-PRODUCER applying &#123;pattern=/SC-PRODUCER/**&#125; to Path</span><br><span class="line">2018-05-18 01:10:49.744 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-PRODUCER applying filter &#123;regexp=/SC-PRODUCER/(?&lt;remaining&gt;.*), replacement=/$&#123;remaining&#125;&#125; to RewritePath</span><br><span class="line">2018-05-18 01:10:49.745 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition matched: CompositeDiscoveryClient_SC-PRODUCER</span><br><span class="line">2018-05-18 01:10:49.745 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-GATEWAY-SERVER applying &#123;pattern=/SC-GATEWAY-SERVER/**&#125; to Path</span><br><span class="line">2018-05-18 01:10:49.747 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-GATEWAY-SERVER applying filter &#123;regexp=/SC-GATEWAY-SERVER/(?&lt;remaining&gt;.*), replacement=/$&#123;remaining&#125;&#125; to RewritePath</span><br><span class="line">2018-05-18 01:10:49.748 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition matched: CompositeDiscoveryClient_SC-GATEWAY-SERVER</span><br><span class="line">2018-05-18 01:10:49.748 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.h.RoutePredicateHandlerMapping   : Route matched: CompositeDiscoveryClient_SC-CONSUMER</span><br><span class="line">2018-05-18 01:10:49.749 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.h.RoutePredicateHandlerMapping   : Mapping [Exchange: GET http://localhost:9000/SC-CONSUMER/hello/xujin] to Route&#123;id='CompositeDiscoveryClient_SC-CONSUMER', uri=lb://SC-CONSUMER, order=0, predicate=org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory$$Lambda$707/751096818@7f4c6373, gatewayFilters=[OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.RewritePathGatewayFilterFactory$$Lambda$709/672603106@293895d2, order=1&#125;]&#125;</span><br><span class="line">2018-05-18 01:10:49.749 DEBUG 6462 --- [ctor-http-nio-5] o.s.c.g.handler.FilteringWebHandler      : Sorted gatewayFilterFactories: [OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@5e85c21b&#125;, order=-1&#125;, OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.RewritePathGatewayFilterFactory$$Lambda$709/672603106@293895d2, order=1&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@38e83838&#125;, order=10000&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.LoadBalancerClientFilter@6ef2f7ad&#125;, order=10100&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@41def031&#125;, order=2147483637&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@4966bab1&#125;, order=2147483646&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@22d477c2&#125;, order=2147483647&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@39832280&#125;, order=2147483647&#125;]</span><br></pre></td></tr></table></figure><p>从上面的log，看到返回了 404 错误，进一步可以看到 Spring Cloud Gateway 已经为我们的 provider 和 consumer 自动创建了对应的路由转发规则，但是这里的 pattern/regexp 里都是大写的，下面换成大写的测试一下。</p><h4 id="3-3-2-Gateway正确的路由规则测试"><a href="#3-3-2-Gateway正确的路由规则测试" class="headerlink" title="3.3.2 Gateway正确的路由规则测试"></a>3.3.2 Gateway正确的路由规则测试</h4><p>访问正确的<a href="http://localhost:9000/SC-CONSUMER/hello/xujin，可以成功访问。" target="_blank" rel="noopener">http://localhost:9000/SC-CONSUMER/hello/xujin，可以成功访问。</a></p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/42059405c29359bcca90c14e3e1f34ca.jpeg?Expires=1842311310&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=eEHIkLTtbPzvhXI2OhoK0TUXwtE%3D" alt=""></p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/ff700908c44140ec692956f4f1b526cc.jpeg?Expires=1842311231&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=ZPi13%2BGvvb2eEIHEqRIkzL3mwKw%3D" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2018-05-22 09:04:21.204 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-CONSUMER applying &#123;pattern=/SC-CONSUMER/**&#125; to Path</span><br><span class="line">2018-05-22 09:04:21.205 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-CONSUMER applying filter &#123;regexp=/SC-CONSUMER/(?&lt;remaining&gt;.*), replacement=/$&#123;remaining&#125;&#125; to RewritePath</span><br><span class="line">2018-05-22 09:04:21.205 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition matched: CompositeDiscoveryClient_SC-CONSUMER</span><br><span class="line">2018-05-22 09:04:21.206 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-PRODUCER applying &#123;pattern=/SC-PRODUCER/**&#125; to Path</span><br><span class="line">2018-05-22 09:04:21.207 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-PRODUCER applying filter &#123;regexp=/SC-PRODUCER/(?&lt;remaining&gt;.*), replacement=/$&#123;remaining&#125;&#125; to RewritePath</span><br><span class="line">2018-05-22 09:04:21.207 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition matched: CompositeDiscoveryClient_SC-PRODUCER</span><br><span class="line">2018-05-22 09:04:21.208 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-GATEWAY-SERVER applying &#123;pattern=/SC-GATEWAY-SERVER/**&#125; to Path</span><br><span class="line">2018-05-22 09:04:21.208 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition CompositeDiscoveryClient_SC-GATEWAY-SERVER applying filter &#123;regexp=/SC-GATEWAY-SERVER/(?&lt;remaining&gt;.*), replacement=/$&#123;remaining&#125;&#125; to RewritePath</span><br><span class="line">2018-05-22 09:04:21.209 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition matched: CompositeDiscoveryClient_SC-GATEWAY-SERVER</span><br><span class="line">2018-05-22 09:04:21.209 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.h.RoutePredicateHandlerMapping   : Route matched: CompositeDiscoveryClient_SC-CONSUMER</span><br><span class="line">2018-05-22 09:04:21.209 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.h.RoutePredicateHandlerMapping   : Mapping [Exchange: GET http://localhost:9000/SC-CONSUMER/hello/xujin] to Route&#123;id='CompositeDiscoveryClient_SC-CONSUMER', uri=lb://SC-CONSUMER, order=0, predicate=org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory$$Lambda$706/57023854@24f1a91e, gatewayFilters=[OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.RewritePathGatewayFilterFactory$$Lambda$708/2036079541@cbb7393, order=1&#125;]&#125;</span><br><span class="line">2018-05-22 09:04:21.209 DEBUG 1677 --- [ctor-http-nio-2] o.s.c.g.handler.FilteringWebHandler      : Sorted gatewayFilterFactories: [OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@29a98d9f&#125;, order=-1&#125;, OrderedGatewayFilter&#123;delegate=org.springframework.cloud.gateway.filter.factory.RewritePathGatewayFilterFactory$$Lambda$708/2036079541@cbb7393, order=1&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@544e8149&#125;, order=10000&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.LoadBalancerClientFilter@55d58825&#125;, order=10100&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@2da3b078&#125;, order=2147483637&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@1a96d94c&#125;, order=2147483646&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@19a64eae&#125;, order=2147483647&#125;, OrderedGatewayFilter&#123;delegate=GatewayFilterAdapter&#123;delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@7fb66650&#125;, order=2147483647&#125;]</span><br></pre></td></tr></table></figure><p>可以看出，Spring Cloud Gateway 自动的为我们的 consumer 创建了一个路由，类似于下边这样<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line"><span class="attr">    - id:</span> <span class="string">CompositeDiscoveryClient_SC-CONSUMER</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">lb://SC-CONSUMER</span></span><br><span class="line"><span class="attr">      order:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">      predicates:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">Path=/SC-CONSUMER/**</span></span><br><span class="line"><span class="attr">      filters:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">RewritePath=/SC-CONSUMER/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>所以从zuul迁移到gateway的时候，服务路由规则中的微服务应用Id默认从小写变为大写。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:本篇文章主要介绍了Spring Cloud Gateway的基于服务发现的默认路由规则，从中可以看出Gateway的路由规则:&lt;a href=&quot;http://Gateway_HOST:Gateway_PORT/大写的serviceId/*&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://Gateway_HOST:Gateway_PORT/大写的serviceId/*&lt;/a&gt; 和 zuul的默认路由规则&lt;a href=&quot;http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/*差不多。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/*差不多。&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/categories/Spring-Cloud-Gateway/"/>
    
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/tags/Spring-Cloud-Gateway/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Gateway只有Pre和POST两种类型的Filter</title>
    <link href="http://xujin.org/sc/gw/gw06/"/>
    <id>http://xujin.org/sc/gw/gw06/</id>
    <published>2018-05-21T06:00:00.000Z</published>
    <updated>2019-01-12T03:30:08.378Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>:Spring Cloud Gateway只有两种类型的Filter，本文介绍如何在Spring Cloud Gateway中创建一个Pre或Post类型的Filter。</p><a id="more"></a><h2 id="zuul的Filter类型"><a href="#zuul的Filter类型" class="headerlink" title="zuul的Filter类型"></a>zuul的Filter类型</h2><p>Zuul 的 Filter 是通过filterType()方法来指定，一个 Filter 只能对应一种类型，要么是 “pre” 要么是“post”</p><h3 id="Spring-Cloud-Gateway的Filter类型"><a href="#Spring-Cloud-Gateway的Filter类型" class="headerlink" title="Spring Cloud Gateway的Filter类型"></a>Spring Cloud Gateway的Filter类型</h3><p>Spring Cloud Gateway 基于 Project Reactor 和 WebFlux，采用响应式编程风格，打开它的 Filter 的接口GatewayFilter你会发现它只有一个方法filter</p><h2 id="Pre类型的Filter"><a href="#Pre类型的Filter" class="headerlink" title="Pre类型的Filter"></a>Pre类型的Filter</h2><p>在Spring Cloud Gateway源码中定义了一个Pre类型的Filter，code将会在chain.filter() 之前被执行,代码:<a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/filter/factory/AddRequestHeaderGatewayFilterFactory.java" target="_blank" rel="noopener">AddRequestHeader</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.cloud.gateway.filter.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddRequestHeaderGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title">AbstractNameValueGatewayFilterFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(NameValueConfig config)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (exchange, chain) -&gt; &#123;</span><br><span class="line">ServerHttpRequest request = exchange.getRequest().mutate()</span><br><span class="line">.header(config.getName(), config.getValue())</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> chain.filter(exchange.mutate().request(request).build());</span><br><span class="line">&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Post类型的Filter"><a href="#Post类型的Filter" class="headerlink" title="Post类型的Filter"></a>Post类型的Filter</h2><p>对于Post类型的Filter，<a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/filter/factory/SetStatusGatewayFilterFactory.java" target="_blank" rel="noopener">SetStatus</a><br>代码将会在chain.filter(exchange).then()里面的代码运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetStatusGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title">AbstractGatewayFilterFactory</span>&lt;<span class="title">SetStatusGatewayFilterFactory</span>.<span class="title">Config</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Config config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> HttpStatus status = ServerWebExchangeUtils.parse(config.status);</span><br><span class="line">        <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// check not really needed, since it is guarded in setStatusCode,</span></span><br><span class="line">                <span class="comment">// but it's a good example</span></span><br><span class="line">                <span class="keyword">if</span> (!exchange.getResponse().isCommitted()) &#123;</span><br><span class="line">                    setResponseStatus(exchange, status);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:Spring Cloud Gateway只有两种类型的Filter，本文介绍如何在Spring Cloud Gateway中创建一个Pre或Post类型的Filter。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/categories/Spring-Cloud-Gateway/"/>
    
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/tags/Spring-Cloud-Gateway/"/>
    
  </entry>
  
  <entry>
    <title>公益Eureka Server与定制方法</title>
    <link href="http://xujin.org/sc/sc-diy-eureka/"/>
    <id>http://xujin.org/sc/sc-diy-eureka/</id>
    <published>2018-05-14T06:00:00.000Z</published>
    <updated>2019-01-12T03:46:24.845Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>: 本文主要简单介绍如何定制一个eureka server，并直接指出最优的定制方式。</p><a id="more"></a><h2 id="1-Spring-Cloud中国公益Eureka-Server"><a href="#1-Spring-Cloud中国公益Eureka-Server" class="headerlink" title="1. Spring Cloud中国公益Eureka Server"></a>1. Spring Cloud中国公益Eureka Server</h2><p>Eureka Server为作为Spring Cloud开发过程中常用的注册中心组件，作为基础设施组件，开发学习过程中，经常需要自己创建Eureka Server应用和重启。为了帮助开发者快速学习入门。Spring Cloud中国社区特搭建一个公益注册中心，仅作为帮助Spring Cloud的开发者进行学习和调试。为了更好服务大家，请勿对本注册中心进行压测。定制的Eureka Server注册中心UI如下所示。</p><p><img src="http://springcloud-new.oss-cn-shenzhen.aliyuncs.com/1966ed6f184d06c2ab793dcaf2c41c8b.jpeg?Expires=1841654009&amp;OSSAccessKeyId=LTAI57F52hRuWq3h&amp;Signature=OeNSoXly3WYi9wfNq3guMPq%2Bt48%3D" alt=""></p><h3 id="1-1-访问地址"><a href="#1-1-访问地址" class="headerlink" title="1.1 访问地址"></a>1.1 访问地址</h3><p> <a href="http://eureka.springcloud.cn" title="http://eureka.springcloud.cn" target="_blank" rel="noopener">http://eureka.springcloud.cn</a></p><h2 id="2-定制Eureka-Serrver的UI"><a href="#2-定制Eureka-Serrver的UI" class="headerlink" title="2.定制Eureka Serrver的UI"></a>2.定制Eureka Serrver的UI</h2><h3 id="2-1-为什么要定制Eureka-Server"><a href="#2-1-为什么要定制Eureka-Server" class="headerlink" title="2.1 为什么要定制Eureka Server"></a>2.1 为什么要定制Eureka Server</h3><p> 原因两点:</p><ul><li>1.觉得默认的UI比较丑  </li><li>2.Eureka Server想客制化一下</li></ul><blockquote><p>至于Spring Cloud Eureka的UI客制化成什么样子由你而定！</p></blockquote><h2 id="3-两种方法定制Eureka-Server"><a href="#3-两种方法定制Eureka-Server" class="headerlink" title="3. 两种方法定制Eureka Server"></a>3. 两种方法定制Eureka Server</h2><h3 id="3-1-直接修改eureka-server的源代码"><a href="#3-1-直接修改eureka-server的源代码" class="headerlink" title="3.1 直接修改eureka server的源代码"></a>3.1 直接修改eureka server的源代码</h3><p>   直接修改eureka server的源代码，该方法是最纯的方式，而且每次有一个Eureka Server的版本都需要去修改。</p><h3 id="3-2-只修改Eureka-Server的UI"><a href="#3-2-只修改Eureka-Server的UI" class="headerlink" title="3.2 只修改Eureka Server的UI"></a>3.2 只修改Eureka Server的UI</h3><p>只需要修改对应的html+css+文案即可，完全不用去修改Eureka Server的源码,强烈推荐。</p><blockquote><p>源码参考地址:<a href="https://github.com/SpringCloud/spring-cloud-eureka" target="_blank" rel="noopener">https://github.com/SpringCloud/spring-cloud-eureka</a></p></blockquote><h3 id="3-3-为什么我定制自己的UI加进去"><a href="#3-3-为什么我定制自己的UI加进去" class="headerlink" title="3.3 为什么我定制自己的UI加进去"></a>3.3 为什么我定制自己的UI加进去</h3><p> 为什么我定制自己的UI加进去，就可以直接Run，那源码代码中的UI是不是被覆盖了？<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.springcloud.eureka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-server-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>如上maven配置所示，官方的spring-cloud-starter-netflix-eureka-server依赖信息配置在下面，由maven的依赖加载顺序决定，定制的UI优先加载显示。</p></blockquote><h2 id="4-如何在项目中使用DIY的Eureka-Server"><a href="#4-如何在项目中使用DIY的Eureka-Server" class="headerlink" title="4. 如何在项目中使用DIY的Eureka Server"></a>4. 如何在项目中使用DIY的Eureka Server</h2><p>只需要配置maven依赖即可:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.springcloud.eureka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-server-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;: 本文主要简单介绍如何定制一个eureka server，并直接指出最优的定制方式。&lt;/p&gt;
    
    </summary>
    
      <category term="Eureka Server" scheme="http://xujin.org/categories/Eureka-Server/"/>
    
    
      <category term="Eureka Server" scheme="http://xujin.org/tags/Eureka-Server/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Gateway的Before路由断言工厂</title>
    <link href="http://xujin.org/sc/gw/gw04/"/>
    <id>http://xujin.org/sc/gw/gw04/</id>
    <published>2018-03-28T06:00:00.000Z</published>
    <updated>2019-01-12T03:35:55.349Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>:在上本篇文章Spring Cloud Gateway的After路由断言工厂介绍了Spring Cloud Gateway核心概念和After路由断言，本文简单介绍Before路由断言工厂。因为比较简单所以就<code>抛砖引玉，旨在帮助大家快速入门Spring Cloud Gateway</code>，欢迎大家<code>加我微信Software_King</code>，进入Spring Cloud中国社区微信群交流。</p><a id="more"></a><h2 id="1-Spring-Cloud-Gateway核心概念"><a href="#1-Spring-Cloud-Gateway核心概念" class="headerlink" title="1. Spring Cloud Gateway核心概念"></a>1. Spring Cloud Gateway核心概念</h2><p>   网关简单的说就是提供一个对外统一的API入口和出口，统管企业对外的所有API出口。一般来说，网关对外暴露的URL或者接口信息，我们统称之为路由信息。如果研发过网关中间件，或者使用或了解过ZUUL的，网关的核心肯定是Filter以及Filter Chain(Filter责任链)。Spring Cloud Gateway也具有路由信息和Filter。下面介绍一下Spring Cloud gateway中最重要的几个概念:</p><ul><li><code>路由(route)</code>:路由是网关最基础的部分，路由信息由一个ID、一个目的url、一组断言工厂和一组Filter组成。如果路由断言工厂为真，则说明请求的Url和配置的路由匹配。</li><li><code>断言(Predicate)</code>: java 8中的断言函数。Spring Cloud Gateway中的断言函数输入类型是Spring 5.0框架中的ServerWebExchange。Spring Cloud Gateway中的断言函数允许开发者去定义匹配来自于http request中的任何信息，比如请求头和参数等。</li><li><code>过滤器(filter)</code>:一个标准的Spring webFilter。Spring Cloud Gateway中的Filter分为两种类型的Filter，分别是Gateway Filter和Global Filter.网关 Filter实例是由Spring 框架中的网关Filter的特殊工厂构造。request在转发到目前服务之前，response在返回到调用端之前都可以被修改或者自定义。</li></ul><h2 id="2-什么是Before路由断言"><a href="#2-什么是Before路由断言" class="headerlink" title="2. 什么是Before路由断言"></a>2. 什么是Before路由断言</h2><p>  <code>Before路由断言工厂</code>带有一个<code>UTC时间格式</code>的时间参数，当请求进来的<code>当前时间在路由断言工厂之前</code>会成功匹配，否则不能成功匹配。</p><h2 id="3-Before路由断言工厂的案例"><a href="#3-Before路由断言工厂的案例" class="headerlink" title="3. Before路由断言工厂的案例"></a>3. Before路由断言工厂的案例</h2><h3 id="3-1-引入pom依赖"><a href="#3-1-引入pom依赖" class="headerlink" title="3.1 引入pom依赖"></a>3.1 引入pom依赖</h3><p>pom.xml依赖配置如下所示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.M9<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-application-yml文件配置"><a href="#3-2-application-yml文件配置" class="headerlink" title="3.2 application.yml文件配置:"></a>3.2 application.yml文件配置:</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      routes:</span></span><br><span class="line"><span class="attr">      - id:</span> <span class="string">before_route</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://xujin.org</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">Before=2022-03-13T00:54:30.877+08:00[Asia/Shanghai]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">org.springframework.cloud.gateway:</span> <span class="string">TRACE</span></span><br><span class="line">    <span class="string">org.springframework.http.server.reactive:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="string">org.springframework.web.reactive:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="string">reactor.ipc.netty:</span> <span class="string">DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="string">management.endpoints.web.exposure.include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure><blockquote><p>Spring Cloud Gateway提供两种方式去配置Before路由断言工厂，这里介绍的是yml文件的配置方式。</p></blockquote><h3 id="3-3-等价的-Bean配置"><a href="#3-3-等价的-Bean配置" class="headerlink" title="3.3 等价的@Bean配置"></a>3.3 等价的@Bean配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ZonedDateTime datetime = LocalDateTime.now().plusDays(<span class="number">1</span>).atZone(ZoneId.systemDefault());</span><br><span class="line"></span><br><span class="line"><span class="comment">//@formatter:off</span></span><br><span class="line"><span class="keyword">return</span> builder.routes()</span><br><span class="line">.route(<span class="string">"before_route"</span>, r -&gt; r.before(datetime)</span><br><span class="line">.uri(<span class="string">"http://xujin.org"</span>))</span><br><span class="line"></span><br><span class="line">.build();</span><br><span class="line"><span class="comment">//@formatter:on</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Spring Cloud Gateway提供两种方式去配置After路由断言工厂，这里介绍的是@Bean的配置方式。不管通过<code>yml文件配置或者通过@Bean</code>的方式配置是等价的。</p></blockquote><h3 id="3-4-测试如下"><a href="#3-4-测试如下" class="headerlink" title="3.4 测试如下:"></a>3.4 测试如下:</h3><p>访问<a href="http://localhost:8082/" target="_blank" rel="noopener">http://localhost:8082/</a> 成功转发到<a href="http://xujin.org。" target="_blank" rel="noopener">http://xujin.org。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:在上本篇文章Spring Cloud Gateway的After路由断言工厂介绍了Spring Cloud Gateway核心概念和After路由断言，本文简单介绍Before路由断言工厂。因为比较简单所以就&lt;code&gt;抛砖引玉，旨在帮助大家快速入门Spring Cloud Gateway&lt;/code&gt;，欢迎大家&lt;code&gt;加我微信Software_King&lt;/code&gt;，进入Spring Cloud中国社区微信群交流。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/categories/Spring-Cloud-Gateway/"/>
    
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/tags/Spring-Cloud-Gateway/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Gateway的After路由断言工厂</title>
    <link href="http://xujin.org/sc/gw/gw03/"/>
    <id>http://xujin.org/sc/gw/gw03/</id>
    <published>2018-03-25T06:00:00.000Z</published>
    <updated>2019-01-12T03:24:23.992Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>:本篇文章主要介绍了Spring Cloud Gateway核心概念和After路由断言，因为比较简单所以就<code>抛砖引玉，旨在帮助大家快速入门Spring Cloud Gateway</code>，欢迎大家<code>加我微信Software_King</code>，进入Spring Cloud中国社区微信群交流。<br><a id="more"></a></p><h2 id="1-Spring-Cloud-Gateway核心概念"><a href="#1-Spring-Cloud-Gateway核心概念" class="headerlink" title="1.Spring Cloud Gateway核心概念"></a>1.Spring Cloud Gateway核心概念</h2><p>   网关简单的说就是提供一个对外统一的API入口和出口，统管企业对外的所有API出口。一般来说，网关对外暴露的URL或者接口信息，我们统称之为路由信息。如果研发过网关中间件，或者使用或了解过ZUUL的，网关的核心肯定是Filter以及Filter Chain(Filter责任链)。Spring Cloud Gateway也具有路由信息和Filter。下面介绍一下Spring Cloud gateway中最重要的几个概念:</p><ul><li><code>路由(route)</code>:路由是网关最基础的部分，路由信息由一个ID、一个目的url、一组断言工厂和一组Filter组成。如果路由断言工厂为真，则说明请求的Url和配置的路由匹配。</li><li><code>断言(Predicate)</code>: java 8中的断言函数。Spring Cloud Gateway中的断言函数输入类型是Spring 5.0框架中的ServerWebExchange。Spring Cloud Gateway中的断言函数允许开发者去定义匹配来自于http request中的任何信息，比如请求头和参数等。</li><li><code>过滤器(filter)</code>:一个标准的Spring webFilter。Spring Cloud Gateway中的Filter分为两种类型的Filter，分别是Gateway Filter和Global Filter.网关 Filter实例是由Spring 框架中的网关Filter的特殊工厂构造。request在转发到目前服务之前，response在返回到调用端之前都可以被修改或者自定义。</li></ul><h2 id="2-什么是After路由断言"><a href="#2-什么是After路由断言" class="headerlink" title="2.什么是After路由断言"></a>2.什么是After路由断言</h2><p>   After Route Predicate Factory带有一个UTC时间格式的时间参数，当请求进来的当前时间在路由断言工厂之后会成功匹配，否则不能成功匹配。</p><h2 id="3-After路由断言工厂的案例"><a href="#3-After路由断言工厂的案例" class="headerlink" title="3.After路由断言工厂的案例"></a>3.After路由断言工厂的案例</h2><h3 id="3-1-引入pom依赖"><a href="#3-1-引入pom依赖" class="headerlink" title="3.1 引入pom依赖"></a>3.1 引入pom依赖</h3><p>pom.xml依赖配置如下所示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.M9<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-application-yml文件配置"><a href="#3-2-application-yml文件配置" class="headerlink" title="3.2  application.yml文件配置:"></a>3.2  application.yml文件配置:</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      routes:</span></span><br><span class="line"><span class="attr">      - id:</span> <span class="string">after_route</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://xujin.org</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">After=2018-03-18T17:32:58.129+08:00[Asia/Shanghai]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">org.springframework.cloud.gateway:</span> <span class="string">TRACE</span></span><br><span class="line">    <span class="string">org.springframework.http.server.reactive:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="string">org.springframework.web.reactive:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="string">reactor.ipc.netty:</span> <span class="string">DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="string">management.endpoints.web.exposure.include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure><blockquote><p>Spring Cloud Gateway提供两种方式去配置After路由断言工厂，这里介绍的是yml文件的配置方式。</p></blockquote><h3 id="3-3-等价的-Bean配置"><a href="#3-3-等价的-Bean配置" class="headerlink" title="3.3 等价的@Bean配置"></a>3.3 等价的@Bean配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line">ZonedDateTime minusTime = LocalDateTime.now().minusDays(<span class="number">1</span>).atZone(ZoneId.systemDefault());</span><br><span class="line"><span class="keyword">return</span> builder.routes()</span><br><span class="line">.route(<span class="string">"after_route"</span>, r -&gt; r.after(minusTime)</span><br><span class="line">.uri(<span class="string">"http://xujin.org"</span>))</span><br><span class="line"></span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Spring Cloud Gateway提供两种方式去配置After路由断言工厂，这里介绍的是@Bean的配置方式。不管通过yml文件配置或者通过@Bean的方式配置是等价的。</p></blockquote><h3 id="3-4-测试如下"><a href="#3-4-测试如下" class="headerlink" title="3.4 测试如下:"></a>3.4 测试如下:</h3><p>访问<a href="http://localhost:8081/成功转发到http://xujin.org" target="_blank" rel="noopener">http://localhost:8081/成功转发到http://xujin.org</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:本篇文章主要介绍了Spring Cloud Gateway核心概念和After路由断言，因为比较简单所以就&lt;code&gt;抛砖引玉，旨在帮助大家快速入门Spring Cloud Gateway&lt;/code&gt;，欢迎大家&lt;code&gt;加我微信Software_King&lt;/code&gt;，进入Spring Cloud中国社区微信群交流。&lt;br&gt;
    
    </summary>
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/categories/Spring-Cloud-Gateway/"/>
    
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/tags/Spring-Cloud-Gateway/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Gateway揭秘之处理请求流程</title>
    <link href="http://xujin.org/sc/gw/gw02/"/>
    <id>http://xujin.org/sc/gw/gw02/</id>
    <published>2018-03-17T06:00:00.000Z</published>
    <updated>2019-01-12T03:20:23.909Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>:本篇文章主要从源码的角度揭秘Spring Cloud Gateway的怎么处理请求流程。</p><a id="more"></a><h2 id="1-Spring-Gateway概述"><a href="#1-Spring-Gateway概述" class="headerlink" title="1.Spring Gateway概述"></a>1.Spring Gateway概述</h2><p>   <code>Spring Cloud Gateway</code>是Spring官方基于Spring 5.0，Spring Boot 2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供一种简单而有效的统一的API路由管理方式。Spring Cloud Gateway作为Spring Cloud生态系中的网关，目标是替代Netflix ZUUL，其不仅提供统一的路由方式，并且基于Filter链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。</p><h2 id="2-Spring-Cloud-gateway请求入口分析"><a href="#2-Spring-Cloud-gateway请求入口分析" class="headerlink" title="2. Spring Cloud gateway请求入口分析"></a>2. Spring Cloud gateway请求入口分析</h2><p>  不管是Zuul，还是Spring Cloud Gateway还是基于Netty的自研网关，都会把请求进来的Request，或者返回的Response进行包装，转换提取为网关运行的上下文信息，而在Spring Cloud gateway中网关的上下文为ServerWebExchange。</p><h3 id="2-1-入口HttpServerRequest和HttpServerResponse转换"><a href="#2-1-入口HttpServerRequest和HttpServerResponse转换" class="headerlink" title="2.1 入口HttpServerRequest和HttpServerResponse转换"></a>2.1 入口HttpServerRequest和HttpServerResponse转换</h3><p>Spring Cloud Gateway的请求入口，org.springframework.http.server.reactive.ReactorHttpHandlerAdapter#apply方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">apply</span><span class="params">(HttpServerRequest request, HttpServerResponse response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">NettyDataBufferFactory bufferFactory = <span class="keyword">new</span> NettyDataBufferFactory(response.alloc());</span><br><span class="line">ServerHttpRequest adaptedRequest;</span><br><span class="line">ServerHttpResponse adaptedResponse;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">adaptedRequest = <span class="keyword">new</span> ReactorServerHttpRequest(request, bufferFactory);</span><br><span class="line">adaptedResponse = <span class="keyword">new</span> ReactorServerHttpResponse(response, bufferFactory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (URISyntaxException ex) &#123;</span><br><span class="line">logger.error(<span class="string">"Invalid URL "</span> + ex.getMessage(), ex);</span><br><span class="line">response.status(HttpResponseStatus.BAD_REQUEST);</span><br><span class="line"><span class="keyword">return</span> Mono.empty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (adaptedRequest.getMethod() == HttpMethod.HEAD) &#123;</span><br><span class="line">adaptedResponse = <span class="keyword">new</span> HttpHeadResponseDecorator(adaptedResponse);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.httpHandler.handle(adaptedRequest, adaptedResponse)</span><br><span class="line">.doOnError(ex -&gt; logger.error(<span class="string">"Handling completed with error"</span>, ex))</span><br><span class="line">.doOnSuccess(aVoid -&gt; logger.debug(<span class="string">"Handling completed with success"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PS，代码来源于spring-web-5.0.4.RELEASE.jar<br>此方法为Spring Cloud Gateway的请求入口方法，该方法的作用就是把接收到的HttpServerRequest或者最终需要返回的HttpServerResponse，包装转换为ReactorServerHttpRequest和ReactorServerHttpResponse。</p></blockquote><h3 id="2-2-构造Spring-Cloud-gateway的上下文ServerWebExchange"><a href="#2-2-构造Spring-Cloud-gateway的上下文ServerWebExchange" class="headerlink" title="2.2 构造Spring Cloud gateway的上下文ServerWebExchange"></a>2.2 构造Spring Cloud gateway的上下文ServerWebExchange</h3><p>在org.springframework.web.server.adapter.HttpWebHandlerAdapter的182行，代码如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">handle</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response)</span> </span>&#123;</span><br><span class="line">ServerWebExchange exchange = createExchange(request, response);</span><br><span class="line"><span class="keyword">return</span> getDelegate().handle(exchange)</span><br><span class="line">.onErrorResume(ex -&gt; handleFailure(request, response, ex))</span><br><span class="line">.then(Mono.defer(response::setComplete));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>createExchange()将ServerHttpRequest ServerHttpResponse构建网关上下文ServerWebExchange。</p></blockquote><hr><blockquote><p>PS:其中org.springframework.web.server.handler.WebHandlerDecorator.getDelegate()通过委托的方式获取一系列需要处理的WebHandler.</p></blockquote><h3 id="2-3-进入Filter链"><a href="#2-3-进入Filter链" class="headerlink" title="2.3 进入Filter链"></a>2.3 进入Filter链</h3><p>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle方法，即77行，代码如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">handle</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">    Route route = exchange.getRequiredAttribute(GATEWAY_ROUTE_ATTR);</span><br><span class="line">    List&lt;GatewayFilter&gt; gatewayFilters = route.getFilters();</span><br><span class="line"></span><br><span class="line">    List&lt;GatewayFilter&gt; combined = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.globalFilters);</span><br><span class="line">    combined.addAll(gatewayFilters);</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> needed or cached?</span></span><br><span class="line">    AnnotationAwareOrderComparator.sort(combined);</span><br><span class="line"></span><br><span class="line">    logger.debug(<span class="string">"Sorted gatewayFilterFactories: "</span>+ combined);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultGatewayFilterChain(combined).filter(exchange);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-执行Filter链"><a href="#2-4-执行Filter链" class="headerlink" title="2.4 执行Filter链"></a>2.4 执行Filter链</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultGatewayFilterChain</span> <span class="keyword">implements</span> <span class="title">GatewayFilterChain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;GatewayFilter&gt; filters;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultGatewayFilterChain</span><span class="params">(List&lt;GatewayFilter&gt; filters)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.filters = filters;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.index &lt; filters.size()) &#123;</span><br><span class="line">GatewayFilter filter = filters.get(<span class="keyword">this</span>.index++);</span><br><span class="line"><span class="keyword">return</span> filter.filter(exchange, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Mono.empty(); <span class="comment">// complete</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-Gateway-Filter委托为Gloable-Filter执行"><a href="#2-5-Gateway-Filter委托为Gloable-Filter执行" class="headerlink" title="2.5 Gateway Filter委托为Gloable Filter执行"></a>2.5 Gateway Filter委托为Gloable Filter执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayFilterAdapter</span> <span class="keyword">implements</span> <span class="title">GatewayFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> GlobalFilter delegate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GatewayFilterAdapter</span><span class="params">(GlobalFilter delegate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.delegate.filter(exchange, chain);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"GatewayFilterAdapter&#123;"</span>);</span><br><span class="line">sb.append(<span class="string">"delegate="</span>).append(delegate);</span><br><span class="line">sb.append(<span class="string">'&#125;'</span>);</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-预告待续"><a href="#2-6-预告待续" class="headerlink" title="2.6 预告待续"></a>2.6 预告待续</h3><p>在之后的文章中，将会揭秘Spring Cloud Gateway的架构设计，Filter链设计，以及启动装在流程等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:本篇文章主要从源码的角度揭秘Spring Cloud Gateway的怎么处理请求流程。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/categories/Spring-Cloud-Gateway/"/>
    
    
      <category term="Spring Cloud 源码分析" scheme="http://xujin.org/tags/Spring-Cloud-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/tags/Spring-Cloud-Gateway/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Gateway入门案例</title>
    <link href="http://xujin.org/sc/gw/gw-01/"/>
    <id>http://xujin.org/sc/gw/gw-01/</id>
    <published>2018-03-15T06:00:00.000Z</published>
    <updated>2019-01-12T03:21:16.579Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>:本篇文章主要介绍了什么是<code>Spring Cloud Gateway</code>，并基于Spring Cloud Gateway的Finchley.M8版本编写一个Spring Cloud Gateway的入门案例，即基本代理的路由转发配置。</p><a id="more"></a><h2 id="1-Spring-Gateway概述"><a href="#1-Spring-Gateway概述" class="headerlink" title="1.Spring Gateway概述"></a>1.Spring Gateway概述</h2><h3 id="1-1-什么是Spring-Cloud-Gateway"><a href="#1-1-什么是Spring-Cloud-Gateway" class="headerlink" title="1.1 什么是Spring Cloud Gateway"></a>1.1 什么是Spring Cloud Gateway</h3><p>   <code>Spring Cloud Gateway</code>是Spring官方基于Spring 5.0，Spring Boot 2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供一种简单而有效的统一的API路由管理方式。Spring Cloud Gateway作为Spring Cloud生态系中的网关，目标是替代Netflix ZUUL，其不仅提供统一的路由方式，并且基于Filter链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。</p><h2 id="2-Spring-Cloud-Gateway入门案例"><a href="#2-Spring-Cloud-Gateway入门案例" class="headerlink" title="2. Spring Cloud Gateway入门案例"></a>2. Spring Cloud Gateway入门案例</h2><h3 id="2-1-创建maven工程"><a href="#2-1-创建maven工程" class="headerlink" title="2.1 创建maven工程"></a>2.1 创建maven工程</h3><p>配置Spring  Cloud Gateway的相关Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch18-1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.springcloud.book<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch18-1-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>ch18-1-gateway<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://springcloud.cn<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.M8<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-Spring-Cloud-Gateway主程序"><a href="#2-2-Spring-Cloud-Gateway主程序" class="headerlink" title="2.2  Spring Cloud Gateway主程序"></a>2.2  Spring Cloud Gateway主程序</h3><p>SpringCloudGatewayApplication.java，代码如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.springcloud.book.gateway;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudGatewayApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder.routes()</span><br><span class="line"><span class="comment">//basic proxy</span></span><br><span class="line">.route(r -&gt; r.path(<span class="string">"/baidu"</span>)</span><br><span class="line">.uri(<span class="string">"http://baidu.com:80/"</span>)</span><br><span class="line">).build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SpringCloudGatewayApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-编写application-yml文件"><a href="#2-3-编写application-yml文件" class="headerlink" title="2.3 编写application.yml文件"></a>2.3 编写application.yml文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-gateway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      routes:</span></span><br><span class="line"><span class="attr">      - id:</span> <span class="string">xujin_route</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://www.xujin.org:80/</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">Path=/xujin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">org.springframework.cloud.gateway:</span> <span class="string">TRACE</span></span><br><span class="line">    <span class="string">org.springframework.http.server.reactive:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="string">org.springframework.web.reactive:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="string">reactor.ipc.netty:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><h3 id="2-4-基本代理路由配置等同写法"><a href="#2-4-基本代理路由配置等同写法" class="headerlink" title="2.4 基本代理路由配置等同写法"></a>2.4 基本代理路由配置等同写法</h3><p>Spring Cloud Gateway提供了两种配置路由规则的方法</p><ul><li>第一:通过@Bean自定义RouteLocator<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder.routes()</span><br><span class="line"><span class="comment">//basic proxy</span></span><br><span class="line">.route(r -&gt; r.path(<span class="string">"/baidu"</span>)</span><br><span class="line">.uri(<span class="string">"http://baidu.com:80/"</span>)</span><br><span class="line">).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>第二:通过属于文件或者yml文件配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      routes:</span></span><br><span class="line"><span class="attr">      - id:</span> <span class="string">xujin_route</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://www.xujin.org:80/</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">Path=/xujin</span></span><br></pre></td></tr></table></figure><blockquote><p>PS,以上两种方式等同。</p></blockquote><h3 id="2-5-错误的示范代码如下"><a href="#2-5-错误的示范代码如下" class="headerlink" title="2.5 错误的示范代码如下:"></a>2.5 错误的示范代码如下:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RouteLocator <span class="title">routingConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Routes.locator()</span><br><span class="line">      .route(<span class="string">"xujin_route"</span>)</span><br><span class="line">      .uri(<span class="string">"http://xujin.org"</span>)</span><br><span class="line">      .predicate(host(<span class="string">"**.xujin.org"</span>))</span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>温馨提示，上面这种写法是基于Spring Cloud Gateway FM4的版本，相关代码已废弃，目前Spring Cloud Gateway将会在FM9之后Realese。</p></blockquote><h3 id="2-6-运行测试"><a href="#2-6-运行测试" class="headerlink" title="2.6 运行测试"></a>2.6 运行测试</h3><ol><li>访问<a href="http://localhost:8080/baidu" target="_blank" rel="noopener">http://localhost:8080/baidu</a>,路由转发到<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></li><li>访问<a href="http://localhost:8080/xujin" target="_blank" rel="noopener">http://localhost:8080/xujin</a>,路由转发到<a href="http://xujin.org">http://xujin.orgyml</a></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder.routes()</span><br><span class="line"><span class="comment">//basic proxy</span></span><br><span class="line">.route(r -&gt; r.path(<span class="string">"/baidu"</span>)</span><br><span class="line">.uri(<span class="string">"http://baidu.com:80/"</span>)</span><br><span class="line">).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      routes:</span></span><br><span class="line"><span class="attr">      - id:</span> <span class="string">xujin_route</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://www.xujin.org:80/</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">Path=/xujin</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:本篇文章主要介绍了什么是&lt;code&gt;Spring Cloud Gateway&lt;/code&gt;，并基于Spring Cloud Gateway的Finchley.M8版本编写一个Spring Cloud Gateway的入门案例，即基本代理的路由转发配置。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/categories/Spring-Cloud-Gateway/"/>
    
    
      <category term="Spring Cloud 源码分析" scheme="http://xujin.org/tags/Spring-Cloud-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Spring Cloud Gateway" scheme="http://xujin.org/tags/Spring-Cloud-Gateway/"/>
    
  </entry>
  
  <entry>
    <title>Mysql批量执行更新shell脚本</title>
    <link href="http://xujin.org/ex/mysql-batch-update/"/>
    <id>http://xujin.org/ex/mysql-batch-update/</id>
    <published>2018-02-17T06:00:00.000Z</published>
    <updated>2019-01-13T05:17:47.596Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>:在生产上执行更新sql，当更新的数据超过上100万的时候，执行更新操作会造成卡表或者锁表。本文主要记录一个了批量更新Mysql某张表的数据的脚本代码片。</p><a id="more"></a><h3 id="mysql的批量执行更新"><a href="#mysql的批量执行更新" class="headerlink" title="mysql的批量执行更新"></a>mysql的批量执行更新</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">. ~/.bash_profile</span><br><span class="line"></span><br><span class="line">log=/home/apps/update/update_log_1_$(date +%F).log</span><br><span class="line">vstart=1</span><br><span class="line">step=10000</span><br><span class="line">vstop=$(($&#123;vstart&#125;+$&#123;step&#125;))</span><br><span class="line">max=14800000</span><br><span class="line"></span><br><span class="line">echo "stop value is $vstop"</span><br><span class="line"></span><br><span class="line">while [ $&#123;vstart&#125; -lt $(($&#123;max&#125;+1)) ] </span><br><span class="line">do</span><br><span class="line">        echo "`date +%F-%T`; mysql -uusername -ppwd --default-character-set=utf8 -S /tmp/mysql3306.sock vip_dbname -e\"UPDATE tbname set limit_days=3, update_time=now() where pid between $&#123;vstart&#125;  and $&#123;vstop&#125;\"" &gt;&gt; $&#123;log&#125;</span><br><span class="line">        /apps/svr/mysql5/bin/mysql -uusername -ppwd --default-character-set=utf8 -S /tmp/mysql3306.sock vip_dbname -e"UPDATE  tbname set limit_days=3, update_time=now() where pid between $&#123;vstart&#125;  and $&#123;vstop&#125; "</span><br><span class="line"></span><br><span class="line">        vstart=$(($&#123;vstop&#125;+1))</span><br><span class="line">        vstop=$(($&#123;vstop&#125;+$&#123;step&#125;))</span><br><span class="line"></span><br><span class="line">        if [ $&#123;vstop&#125; -gt $&#123;max&#125; ]; then</span><br><span class="line">                vstop=$&#123;max&#125;</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        sleep 1</span><br><span class="line">        #echo "start at $&#123;vstart&#125;, stop at $&#123;vstop&#125;"</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:在生产上执行更新sql，当更新的数据超过上100万的时候，执行更新操作会造成卡表或者锁表。本文主要记录一个了批量更新Mysql某张表的数据的脚本代码片。&lt;/p&gt;
    
    </summary>
    
      <category term="项目经验" scheme="http://xujin.org/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="项目经验" scheme="http://xujin.org/tags/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="mysql" scheme="http://xujin.org/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud中基于Sleuth的参数透传功能探索</title>
    <link href="http://xujin.org/sc/sq/sc-gfb/"/>
    <id>http://xujin.org/sc/sq/sc-gfb/</id>
    <published>2018-01-16T06:00:00.000Z</published>
    <updated>2019-01-13T05:09:04.581Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>:本文由<code>郭芳碧</code>投稿分享。投<code>稿请加微信Software_King</code>,本篇文章主要介绍Spring Cloud中基于Sleuth的参数透传功能探索的经历和相关解决方案。</p><a id="more"></a><h2 id="一-需求"><a href="#一-需求" class="headerlink" title="一.需求"></a>一.需求</h2><p>微服务环境，有A，B，C，D四个服务，调用关系为：A-&gt;B-&gt;C-&gt;D。用户在A的页面选择当前“语言”环境为“英文”,在某些业务场景下，其它几个服务需获取到这个“语言”信息。</p><h2 id="二-分析"><a href="#二-分析" class="headerlink" title="二.分析"></a>二.分析</h2><p>这个需求还是很简单的，类似于“击鼓传花”：当前服务从上一个服务中获取参数，并传给下一个服务。个人感觉基本上所有的RPC框架都会遇到这个问题，只是以前SOA架构下，服务层级比较少，将“语言”、“登陆”等附加信息放在参数列表中并不会带来太多工作量，所以这个问题并不是太突出。而引入了微服务架构思想后，服务调用层级急剧增长，这就需要一个更加优雅的方式来解决附加信息的传递问题。</p><h2 id="三-方案探索"><a href="#三-方案探索" class="headerlink" title="三.方案探索"></a>三.方案探索</h2><h3 id="3-1-方案一：参数放在接口参数列表中"><a href="#3-1-方案一：参数放在接口参数列表中" class="headerlink" title="3.1 方案一：参数放在接口参数列表中"></a>3.1 方案一：参数放在接口参数列表中</h3><p><strong>优点</strong>：思路简单，开发没有学习成本</p><p><strong>缺点</strong>：</p><ul><li>代码高度耦合：附加信息却要每个接口都显式维护</li><li>升级困难：如果将来再加一个参数，所有层级的接都要改动</li><li>引起迷惑：如果B服务的逻辑不需要“语言“参数，但是因为D需要，它也必须维护</li><li>太傻了，Big不够</li></ul><blockquote><p>思考：微服务之间绝大多数情况是通过HTTP调用的，HTTP的header中也可以放参数信息。这样，接口参数中就不用维护这些附加信了。</p></blockquote><hr><h3 id="3-2-方案二：参数放在httpRequest的header中"><a href="#3-2-方案二：参数放在httpRequest的header中" class="headerlink" title="3.2 方案二：参数放在httpRequest的header中"></a>3.2 方案二：参数放在httpRequest的header中</h3><p><strong>实现</strong>：<br> 1.自定义一个Filter，获取Request中自己需要的附加信息，<br> 2.将这些信息放入ThreadLocal中,<br> 3.实现feign.Client(这里先忽略RestTemplate)的execute()方法，将附件信息在调用下一层服务前塞入request的header中</p><p><strong>优点</strong>：参数解耦</p><p><strong>缺点</strong>：如果B在获取到附加信息后，新起了一个线程”T1“来调用服务C，这时T1就无法从HhreaLocal拿到附加信息了</p><blockquote><p>思考：</p><ol><li>如果我知道怎么用无侵入的方式，在当前线程”T”创建子孙线程”T1”、”T1-1”时，将数据传给后代，就能解决这个问题了</li><li>微服务调用链框架<a href="https://github.com/spring-cloud/spring-cloud-sleuth.git" target="_blank" rel="noopener">Sleuth</a>的核心功能即是跟踪一次请求从A到D的全过程，它肯定支持多线程调用下的traceId的传递。因此，我可以复用Sleuth的相关功能夹带私货</li></ol></blockquote><hr><h3 id="3-3-方案三：修改Sleuth源码，将附加信息跟着TraceId一起往后传递"><a href="#3-3-方案三：修改Sleuth源码，将附加信息跟着TraceId一起往后传递" class="headerlink" title="3.3 方案三：修改Sleuth源码，将附加信息跟着TraceId一起往后传递"></a>3.3 方案三：修改Sleuth源码，将附加信息跟着TraceId一起往后传递</h3><p><strong>优点</strong>：</p><ul><li>原理简单，不用考虑底层实现</li><li>不用考虑兼容性等问题，Sleuth都已经实现好</li><li>快(对，就是这一个字)<br><strong>缺点</strong>：</li><li>维护困难，很容易忘记以前修改了哪些地方，更别提移交给别人维护了</li><li>升级困难，以后每次Spring或者Sleuth升级，都要重新下载源码修改</li></ul><blockquote><p>思考：<br> 目前获取参数的问题解决了，用Filter，只剩下保存并传给下一层的问题<br> 既然Sleuth已经解决了多线程下traceId的传递问题，那我就直接用traceId来解决我的问题</p></blockquote><h3 id="3-4-方案四：充分利用traceId"><a href="#3-4-方案四：充分利用traceId" class="headerlink" title="3.4 方案四：充分利用traceId"></a>3.4 方案四：充分利用traceId</h3><p><strong>实现</strong>：</p><ul><li>自定义Filter(优先级要低于TraceFilter,因为你要获取TraceFilter里的traceId)，拿到traceId和附加信息后，将它们存在本地缓存中，traceId为key，附加信息为value</li><li>参考方案二的实现3。重写execute()方法，获取当前线程的traceId(这个Sleuth有接口，不再介绍)，然后再通过traceId去本地缓存中拿到附加信息，放进Request的header中</li></ul><p><strong>优点</strong>：拥有上述方案所有的优点,解决上述方案所有缺点</p><p><strong>缺点</strong>：看着很完美，但是你忽略了一件事：Sleuth要想传递自己的traceId，想必它已经重写了execute()方法(肯定的，那就是TraceFeignClient)，你要想用，那就要想办法在复用TraceFeignClient.execute()的同时，将自己的私货带进去</p><h3 id="3-5-方案五：重写TraceFeignClient"><a href="#3-5-方案五：重写TraceFeignClient" class="headerlink" title="3.5 方案五：重写TraceFeignClient"></a>3.5 方案五：重写TraceFeignClient</h3><p><strong>实现</strong>：有时候，改动源码并不需要直接在原有包里修改。比如：A-&gt;B-&gt;C-&gt;D，如果你要修改C的源码，那就将AB源码也copy出，作为A1,B1,C#，然后重写组件的入口，将组件加载顺序变为：A1-&gt;B1-&gt;C#-&gt;D，即可达到重写源码的目的。这时候注意的是，加载A1的条件必须跟加载A的相反。具体可参考我之前重写Consul的入口例子，示例代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnExpression</span>(<span class="string">"$&#123;spring.cloud.consul.ribbon.enabled:true&#125;==false"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRibbonConsulAutoConfiguration</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原有入口：</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"spring.cloud.consul.ribbon.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonConsulAutoConfiguration</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>综上，可以重写TraceFeigClient的入口 TraceFeignClientAutoConfiguration-&gt;TraceFeignObjectWrapper&gt;TraceFeignClient,即可达到自己的目的.</p></blockquote><p><strong>优点</strong>：感觉事儿基本就成了</p><p><strong>缺点</strong>：配置为false生效，使用者会觉得比较怪,Sleuth仿佛知道别人会这么干似的，它的类的访问权限基本都是default，为了copy过来的几个类能正常编译通过，你还要再copy九个它们的依赖类,程序太丑</p><blockquote><p>思考:突然想起来，还有一种改代码的方式叫字节码替换，如果我能在程序启动的时，将我的execute()直接替换掉Sleuth的execute(),就一劳永逸了</p></blockquote><h3 id="3-6-方案六：字节码替换代源码修改"><a href="#3-6-方案六：字节码替换代源码修改" class="headerlink" title="3.6 方案六：字节码替换代源码修改"></a>3.6 方案六：字节码替换代源码修改</h3><p><strong>优点</strong>：高大上,不在源码级替换，却在字节码级替换，虚虚实实</p><p><strong>缺点</strong>：没这么干过，总觉得说着容易做着难</p><blockquote><p>思考：基本上觉得方案五已经能解决问题了。本着精益求精的态度，去技术群里问了下，很快有<a href="https://github.com/saleson" target="_blank" rel="noopener">大神</a>发来<a href="https://github.com/saleson/fm-cloud.git" target="_blank" rel="noopener">Demo</a>,看过代码后顿觉惭愧：我一直在想怎么重写TraceFeignClient的execute()，其实这个execute()真正做http请求时，调用的是feign.Client的另外一个实现类,注意那句”this.delegate.execute”，只要想办法用自己的Client替换掉delegate即可</p></blockquote><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(MethodHandles.lookup().lookupClass());</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Client delegate;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">execute</span><span class="params">(Request request, Request.Options options)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String spanName = getSpanName(request);</span><br><span class="line">Span span = getTracer().createSpan(spanName);</span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">log.debug(<span class="string">"Created new Feign span "</span> + span);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">AtomicReference&lt;Request&gt; feignRequest = <span class="keyword">new</span> AtomicReference&lt;&gt;(request);</span><br><span class="line">spanInjector().inject(span, <span class="keyword">new</span> FeignRequestTextMap(feignRequest));</span><br><span class="line">span.logEvent(Span.CLIENT_SEND);</span><br><span class="line">addRequestTags(request);</span><br><span class="line">Request modifiedRequest = feignRequest.get();</span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">log.debug(<span class="string">"The modified request equals "</span> + modifiedRequest);</span><br><span class="line">&#125;</span><br><span class="line">Response response = <span class="keyword">this</span>.delegate.execute(modifiedRequest, options);</span><br><span class="line">logCr();</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125; <span class="keyword">catch</span> (RuntimeException | IOException e) &#123;</span><br><span class="line">logCr();</span><br><span class="line">logError(e);</span><br><span class="line"><span class="keyword">throw</span> e;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">closeSpan(span);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-方案七：替换掉TraceFeigClient的delegate即可"><a href="#3-7-方案七：替换掉TraceFeigClient的delegate即可" class="headerlink" title="3.7 方案七：替换掉TraceFeigClient的delegate即可"></a>3.7 方案七：替换掉TraceFeigClient的delegate即可</h3><p> <strong>实现</strong>:通过<strong>再次认真</strong>Debug源码知道，TraceFeignClient默认会加载你的Client实现类作为delegate(汗！)，因此你只要直接实现feign.Client接口即可。我偷懒了一把，自己写个实现类，直接复用了LoadBalancerFeignClient.execute()<br> <strong>优点</strong>:基本什么都有了吧<br> <strong>缺点</strong>:如果你以为只是简单地重写个execute()就行，那就大错特了。因为TraceFeignClient直接用了你的方法post过去，因此你要想办法把ribbon手动集成进来。如果不觉得麻烦的话，可以好好看下TraceFeignClient怎么生成Client的实例：TraceFeignObjectWrapper.wrap(Object bean)</p><blockquote><p>思考:既然你可以在程序里获取到trace和span，那为何不将你的信息放到span里呢。如果span中能放点额外信息就好了，就不用自己写这么多东西。经<a href="https://github.com/huanglc1988" target="_blank" rel="noopener">大神</a>提醒，Sleuth中有个baggage可以试试</p></blockquote><h3 id="3-8-方案八：使用baggage"><a href="#3-8-方案八：使用baggage" class="headerlink" title="3.8 方案八：使用baggage"></a>3.8 方案八：使用baggage</h3><p> <strong>实现:</strong>获取参数的方式不变，取得的参数放在baggage中</p><p> <strong>优点:</strong>简单,支持RestTemplate调用的情况,跟其他组件兼容性好</p><p> <strong>缺点:</strong>Sleuth的缺点</p><h2 id="四-项目源码"><a href="#四-项目源码" class="headerlink" title="四.项目源码"></a>四.项目源码</h2><h3 id="4-1-基于slueth的参数透传插件"><a href="#4-1-基于slueth的参数透传插件" class="headerlink" title="4.1 基于slueth的参数透传插件"></a>4.1 基于slueth的参数透传插件</h3><p>Github地址:<a href="https://github.com/bishion/sleuth-plugin" target="_blank" rel="noopener">https://github.com/bishion/sleuth-plugin</a></p><p><strong>简介</strong>:微服务下使用,调用过程中用户信息，页面语言信息的透传<br><strong>使用方式</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bizi:</span></span><br><span class="line"><span class="attr">  sleuth:</span> </span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      headers:</span> <span class="string">lang_info</span> <span class="comment">#如果由多个，逗号隔开.这里配置从filter里需要获取的headerName</span></span><br></pre></td></tr></table></figure><p><strong>调用方式</strong></p><figure class="highlight java"><figcaption><span>first_line:22   </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionInfoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SessionInfoOperator sessionInfoOperator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLangInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sessionInfoOperator.getSessionInfo(<span class="string">"lang_info"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sessionInfoOperator.setSessionInfo(<span class="string">"user_id"</span>,<span class="string">"bishion"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五-留下的坑"><a href="#五-留下的坑" class="headerlink" title="五.留下的坑"></a>五.留下的坑</h2><ol><li>Sleuth通过<em>LazyTraceExecutor</em>解决多线程下的问题，但是它并没有解决<strong>给手动创建的Thread传递信息</strong>的问题</li><li>有机会试试java字节码替换怎么操作</li><li>Sleuth如何重写RestTemplate的</li><li>TraceFeignClient怎么生成Client的实例</li></ol><h2 id="六-后记"><a href="#六-后记" class="headerlink" title="六.后记"></a>六.后记</h2><p>因为附加信息的传递在RPC中扮演了很重要的角色，我潜意识里觉得，肯定会有更加简洁的方法或者框架我还没有了解到。希望各位各位读者老师能不吝珠玉，批评指正</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:本文由&lt;code&gt;郭芳碧&lt;/code&gt;投稿分享。投&lt;code&gt;稿请加微信Software_King&lt;/code&gt;,本篇文章主要介绍Spring Cloud中基于Sleuth的参数透传功能探索的经历和相关解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="社区" scheme="http://xujin.org/categories/%E7%A4%BE%E5%8C%BA/"/>
    
    
      <category term="Spring Cloud" scheme="http://xujin.org/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 使用 HTTP2的性能压测对比</title>
    <link href="http://xujin.org/sc/sq/sc-http2/"/>
    <id>http://xujin.org/sc/sq/sc-http2/</id>
    <published>2017-12-17T06:00:00.000Z</published>
    <updated>2019-01-13T05:08:29.131Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>:本文由<code>何鹰</code>投稿分享。投<code>稿请加微信Software_King</code>,本文主要是对Spring Cloud中的HTTP2的性能进行压测分析，生成压测结果。<a href="https://github.com/charlesvhe/spring-cloud-practice/tree/http2" target="_blank" rel="noopener">spring cloud 使用 HTTP2源码地址</a></p><a id="more"></a><h2 id="一-Spring-Cloud-使用-HTTP2"><a href="#一-Spring-Cloud-使用-HTTP2" class="headerlink" title="一.Spring Cloud 使用 HTTP2"></a>一.Spring Cloud 使用 HTTP2</h2><p>  我本人是从 Dubbo 转用 Spring cloud。2016年9月左右刚接触 Spring cloud，那个时候跟大家一样做了很多 dubbo vs Spring cloud 的对比分析。当时最大的疑问是性能对比，问 Josh Long 后续有无支持类似于 dubbo 的其他RPC、序列化协议，他说 HTTP2性能已经足够好了，没有计划支持。当时想到 HTTP2是多路复用，长连接，性能损失仅仅是序列化反序列化的区别，因此就此打住没有深入测试。</p><p><img src="https://raw.githubusercontent.com/charlesvhe/spring-cloud-practice/http2/chrome.net-internals.png" alt="Chrome HTTP2"></p><p>上周在 W3上看到张琦的帖子里说到 ServiceCombo以性能问题第一个就把 Spring cloud 淘汰了，加上之前的dubbo vs Spring cloud 性能测试结果，就想到用 HTTP2进一步优化 Spring cloud 性能。<br><a href="https://mp.weixin.qq.com/s?__biz=MzA5MzQ2NTY0OA==&amp;mid=2650796496&amp;idx=1&amp;sn=a544b76660484b9914b65f038cc39e6d&amp;chksm=88562c8fbf21a5995909ffa9f172f31651b1ebd04897917e43caef3491954e24ed0d0477a5a1&amp;mpshare=1&amp;scene=23&amp;srcid=01245faqrBlQETYK9c7zVmd3#rd" target="_blank" rel="noopener">孰优孰劣？Dubbo VS Spring Cloud性能测试大对决！</a></p><h2 id="二-启动顺序"><a href="#二-启动顺序" class="headerlink" title="二.启动顺序"></a>二.启动顺序</h2><h3 id="2-1-启动-config"><a href="#2-1-启动-config" class="headerlink" title="2.1 启动 config"></a>2.1 启动 config</h3><h3 id="2-2-启动-eureka"><a href="#2-2-启动-eureka" class="headerlink" title="2.2 启动 eureka"></a>2.2 启动 eureka</h3><h3 id="2-3-启动-provider"><a href="#2-3-启动-provider" class="headerlink" title="2.3 启动 provider"></a>2.3 启动 provider</h3><h3 id="2-4-启动-consumer"><a href="#2-4-启动-consumer" class="headerlink" title="2.4 启动 consumer"></a>2.4 启动 consumer</h3><p>JDK9以下不默认支持HTTP2，需要添加启动参数：</p><blockquote><p>-Xbootclasspath/p:/Users/charles/.m2/repository/org/mortbay/jetty/alpn/alpn-boot/8.1.12-SNAPSHOT/alpn-boot-8.1.12-SNAPSHOT.jar</p></blockquote><h2 id="三-测试-HTTP2"><a href="#三-测试-HTTP2" class="headerlink" title="三.测试 HTTP2"></a>三.测试 HTTP2</h2><h3 id="3-1-测试服务提供者"><a href="#3-1-测试服务提供者" class="headerlink" title="3.1 测试服务提供者"></a>3.1 测试服务提供者</h3><p>访问 <a href="https://localhost:8443/user" target="_blank" rel="noopener">https://localhost:8443/user</a><br>访问 chrome://net-internals/#http2<br>确认服务器HTTP2支持已经开启</p><h3 id="3-2-测试服务消费者"><a href="#3-2-测试服务消费者" class="headerlink" title="3.2 测试服务消费者"></a>3.2 测试服务消费者</h3><p>访问 <a href="http://localhost:18090/test" target="_blank" rel="noopener">http://localhost:18090/test</a><br>在服务提供者控制台查看日志 是否是 http2 协议</p><blockquote><p>2017-12-17 11:36:59.479  INFO 663 — [  XNIO-2 task-7] c.g.c.s.p.p.controller.UserController    : query all HTTP/2.0  [accept-language:en-US,en;q=0.9]  [upgrade-insecure-requests:1]  [Host:localhost:8443]  [accept-encoding:gzip, deflate, br]  [accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,<em>/</em>;q=0.8]  [user-agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36] </p></blockquote><h3 id="3-3-测试性能"><a href="#3-3-测试性能" class="headerlink" title="3.3 测试性能"></a>3.3 测试性能</h3><p>访问：</p><blockquote><p><a href="http://localhost:18090/test/count?thread=200&amp;api=test100" target="_blank" rel="noopener">http://localhost:18090/test/count?thread=200&amp;api=test100</a></p></blockquote><p>thread 可以为任意值<br>api为 test10 test100 test1000<br>服务消费者控制台查看吞吐量</p><h2 id="四-性能对比"><a href="#四-性能对比" class="headerlink" title="四.性能对比"></a>四.性能对比</h2><h3 id="4-1-测试-HTTP-with-SSL-性能对比"><a href="#4-1-测试-HTTP-with-SSL-性能对比" class="headerlink" title="4.1 测试 HTTP with SSL 性能对比"></a>4.1 测试 HTTP with SSL 性能对比</h3><p>provider bootstrap.properties 注释 server.http2.enabled=true<br>和上面一样进行性能测试</p><h3 id="4-2-测试-HTTP-性能对比"><a href="#4-2-测试-HTTP-性能对比" class="headerlink" title="4.2 测试 HTTP 性能对比"></a>4.2 测试 HTTP 性能对比</h3><p>provider bootstrap.properties 注释 server.http2.enabled=true以及下方所有配置项<br>和上面一样进行性能测试</p><h3 id="4-3-测试-HTTP-without-Keep-Alive"><a href="#4-3-测试-HTTP-without-Keep-Alive" class="headerlink" title="4.3 测试 HTTP without Keep-Alive"></a>4.3 测试 HTTP without Keep-Alive</h3><p>修改TestController 每次 new RestTemplate (其实在 Header 中指定 Connection=close 可以关闭 Keep-Alive 但是会运行一段时间后超时 error)</p><blockquote><p>new RestTemplate().getForObject(“<a href="http://127.0.0.1:8080/user/" target="_blank" rel="noopener">http://127.0.0.1:8080/user/</a>“ + api, String.class);</p><p>// restTemplate.getForObject(“<a href="http://provider/user/" target="_blank" rel="noopener">http://provider/user/</a>“ + api, String.class);</p></blockquote><h3 id="4-4-测试结果-吞吐量-秒"><a href="#4-4-测试结果-吞吐量-秒" class="headerlink" title="4.4 测试结果 吞吐量/秒"></a>4.4 测试结果 吞吐量/秒</h3><table><thead><tr><th>测试组合</th><th>HTTP without Keep-Alive</th><th>HTTP with Keep-Alive</th><th>HTTP+SSL</th><th>HTTP2</th></tr></thead><tbody><tr><td>T100 O10</td><td>1210</td><td>8850</td><td>3310</td><td>6320</td></tr><tr><td>T100 0100</td><td>1115</td><td>7525</td><td>2225</td><td>3410</td></tr><tr><td>T100 01000</td><td>950</td><td>2710</td><td>1150</td><td>1080</td></tr><tr><td>T200 010</td><td>1050</td><td>8650+error</td><td>4200+error</td><td>6120</td></tr><tr><td>T200 0100</td><td>1035</td><td>7250</td><td>330+error</td><td>3250</td></tr><tr><td>T200 01000</td><td>870</td><td>2650</td><td>495</td><td>930</td></tr></tbody></table><p>分析：</p><p>测试结果与 Josh Long 所说不同，HTTP2并不能带来性能的提升。HTTP2 的多路复用相比 HTTP1.1 Keep-Alive 的”单路复用”相比优势并不大，反而带来了 SSL 加解密的性能损失(HTTP2协议本身不要求 SSL，但是目前实现均为 HTTP2强制 SSL)。HTTP2多路复用可以节省链接，避免链接超容器上限。</p><p>HTTP2+SSL 相比 HTTP1.1+SSL 有性能优势，但是针对 Spring cloud 内部调用场景我们并不会开启 HTTPS，因此是个废的，在此场景之下最佳选择是 <strong>HTTP1.1 + Keep-Alive</strong>。</p><blockquote><p>原文链接:<a href="http://www.jianshu.com/p/ed3f8f983764" target="_blank" rel="noopener">http://www.jianshu.com/p/ed3f8f983764</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:本文由&lt;code&gt;何鹰&lt;/code&gt;投稿分享。投&lt;code&gt;稿请加微信Software_King&lt;/code&gt;,本文主要是对Spring Cloud中的HTTP2的性能进行压测分析，生成压测结果。&lt;a href=&quot;https://github.com/charlesvhe/spring-cloud-practice/tree/http2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;spring cloud 使用 HTTP2源码地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="社区" scheme="http://xujin.org/categories/%E7%A4%BE%E5%8C%BA/"/>
    
    
      <category term="Spring Cloud" scheme="http://xujin.org/tags/Spring-Cloud/"/>
    
      <category term="http2" scheme="http://xujin.org/tags/http2/"/>
    
  </entry>
  
  <entry>
    <title>基于Spring Cloud的几个自研微服务组件</title>
    <link href="http://xujin.org/sc/sq/sc-zyzj/"/>
    <id>http://xujin.org/sc/sq/sc-zyzj/</id>
    <published>2017-12-14T06:00:00.000Z</published>
    <updated>2019-01-13T05:09:47.660Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>:本文由<code>宜信-技术研发中心-高级架构师-梁鑫</code>投稿分享。投<code>稿请加微信Software_King</code>,之前分享了一下我在公司项目中搭建Spring Cloud框架的经验，在此基础之上，为了更好的满足业务功能需求和便捷运维的需要，我们开发了几个基于springcloud的微服务组件，在此做个总结跟大家共同探讨一下。</p><a id="more"></a><h2 id="基于SpringCloud的几个自研微服务组件"><a href="#基于SpringCloud的几个自研微服务组件" class="headerlink" title="基于SpringCloud的几个自研微服务组件"></a>基于SpringCloud的几个自研微服务组件</h2><h3 id="一-应用管理中心"><a href="#一-应用管理中心" class="headerlink" title="一.应用管理中心"></a>一.应用管理中心</h3><p>采用微服务架构以后，把原先单一的节点拆解成了多个微服务节点。公司虽然有一键发布平台，但是是针对每一个节点采取单独的发布，启动，停止操作，没有全局化统一管理功能。上线运维的工作量就变的非常庞大，因此我们开发了基于springcloud的应用管理中心来方便我们的工作。</p><h4 id="1-1-实现机制"><a href="#1-1-实现机制" class="headerlink" title="1.1 实现机制"></a>1.1 实现机制</h4><ul><li>每个微服务启动时，将自身的进程ID，当前路径，JDK路径，jar名称，系统用户，IP地址，端口号注册到zookeeper;</li><li>应用管理中心从zookeeper中查询到所有的微服务进程信息；</li><li>获取信息后构造启动命令，停止命令；</li><li>在数据库保存系统的用户名和密码；</li><li>在部署时指定git地址，分支，IP等调用jenkins，编译生成最新jar包拷贝到目标服务器指定位置；</li><li>通过远程jsch远程执行shell命令对微服务进程进行操作。</li></ul><h4 id="1-2-功能原理"><a href="#1-2-功能原理" class="headerlink" title="1.2 功能原理"></a>1.2 功能原理</h4><p><img src="/images/sq/app_yuanli.png" alt="功能原理"></p><h4 id="1-3-效果图"><a href="#1-3-效果图" class="headerlink" title="1.3 效果图"></a>1.3 效果图</h4><p><img src="/images/sq/app1.png" alt="Image text"><br><img src="/images/sq/app2.png" alt="Image text"><br><img src="/images/sq/app3.png" alt="Image text"></p><h3 id="二-微服务健康检测中心"><a href="#二-微服务健康检测中心" class="headerlink" title="二.微服务健康检测中心"></a>二.微服务健康检测中心</h3><p>基于actuator我们可以很好的针对每个微服务节点进行监控，当出现问题时及时报警。</p><h4 id="2-1-实现机制"><a href="#2-1-实现机制" class="headerlink" title="2.1 实现机制"></a>2.1 实现机制</h4><ul><li>保证所有的微服务节点都加载了actuator;</li><li>从eureka中获取所有的微服务注册信息；</li><li>定时任务轮询请求每个微服务的health信息；</li><li>Health返回status树壮结构信息；</li><li>如果status状态为down发送报警并包含health完整信息。</li></ul><h4 id="2-2-功能原理"><a href="#2-2-功能原理" class="headerlink" title="2.2 功能原理"></a>2.2 功能原理</h4><p><img src="/images/sq/health_yuanli.png" alt="Image text"></p><h4 id="2-3-效果图"><a href="#2-3-效果图" class="headerlink" title="2.3 效果图"></a>2.3 效果图</h4><p>我们在健康检测中心中同时加载了spring boot admin,可以随时查看微服务节点的所有运行信息。</p><p><img src="/images/sq/health1.png" alt="Image text"></p><h4 id="2-4-部分源码"><a href="#2-4-部分源码" class="headerlink" title="2.4 部分源码"></a>2.4 部分源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled</span>(initialDelay = <span class="number">10000L</span>, fixedRate = <span class="number">60000L</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduledTaskHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">    List&lt;String&gt; items = getIPAndPorts();</span><br><span class="line">    <span class="keyword">for</span> (String IPAndPort : items) &#123;</span><br><span class="line">        LOGGER.info(<span class="string">"prepare checking "</span> + IPAndPort);</span><br><span class="line">        <span class="keyword">if</span> (IPAndPort.isEmpty()) &#123;</span><br><span class="line">            LOGGER.warn(<span class="string">"checking "</span> + IPAndPort + <span class="string">" is empty"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] item = IPAndPort.split(<span class="string">":"</span>);</span><br><span class="line">            String info = healthService.getHealthInfo(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">            String prettyjson = getPrettyJSON(info);</span><br><span class="line">            ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">            Map&lt;?, ?&gt; infoMap = mapper.readValue(info, <span class="keyword">new</span> TypeReference&lt;Map&gt;() &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (infoMap.containsKey(STATUS)) &#123;</span><br><span class="line">                String status = infoMap.get(STATUS).toString();</span><br><span class="line">                <span class="keyword">if</span> (status.equals(UP)) &#123;</span><br><span class="line">                    LOGGER.info(<span class="string">"checking "</span> + IPAndPort + <span class="string">" is UP:\n"</span> + prettyjson);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            emailService.sendLimitedEmail(prettyjson, IPAndPort, IPAndPort, <span class="number">10</span> * <span class="number">60</span> * <span class="number">1000L</span>);</span><br><span class="line">            LOGGER.info(<span class="string">"checking "</span> + IPAndPort + <span class="string">" is DOWN:\n"</span> + prettyjson);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (feign.RetryableException ex) &#123;</span><br><span class="line">            String content = exception2String(ex);</span><br><span class="line">            emailService.sendEmail(content, <span class="string">"程序运行异常"</span>);</span><br><span class="line">            LOGGER.info(<span class="string">"checking "</span> + IPAndPort + <span class="string">" is DOWN"</span>);</span><br><span class="line">            LOGGER.error(<span class="string">""</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (FeignException fex) &#123;</span><br><span class="line">            String body = getBodyFromFeignException(fex);</span><br><span class="line">            String prettybody = getPrettyJSON(body);</span><br><span class="line">            emailService.sendLimitedEmail(prettybody, IPAndPort, IPAndPort, <span class="number">10</span> * <span class="number">60</span> * <span class="number">1000L</span>);</span><br><span class="line">            LOGGER.info(<span class="string">"checking "</span> + IPAndPort + <span class="string">" is DOWN:\n"</span> + prettybody);</span><br><span class="line">            LOGGER.error(<span class="string">""</span>, fex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            String content = exception2String(ex);</span><br><span class="line">            emailService.sendEmail(content, <span class="string">"程序运行异常"</span>);</span><br><span class="line">            LOGGER.info(<span class="string">"checking "</span> + IPAndPort + <span class="string">" is DOWN"</span>);</span><br><span class="line">            LOGGER.error(<span class="string">""</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LOGGER.info(<span class="string">"SkytrainHealthChecking cost: "</span> + (System.currentTimeMillis() - begin) + <span class="string">" Millis"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-定时任务管理中心"><a href="#三-定时任务管理中心" class="headerlink" title="三.定时任务管理中心"></a>三.定时任务管理中心</h3><p>我们需要建立定时任务全局视图，并希望对每一个定时任务具备启停的能力。我们采用了通过继承统一的AbstractScheduledTask，暴露定时任务的启动，停止接口。让每一个定时任务自动具备的启停功能。</p><h4 id="3-1-实现机制"><a href="#3-1-实现机制" class="headerlink" title="3.1 实现机制"></a>3.1 实现机制</h4><ul><li>通过BeanPostProcessor在bean初始完成后拦截所有的@Scheduled注解，获取ip，port，applicationName，className，beanName，scheduled等信息注册到zookeeper；</li><li>定时任务实现继承AbstractScheduledTaskInter接口，暴露startScheduledTask和stopScheduledTask，可以针对定时任务进行启动停止；</li><li>实现基准TaskScheduledController类，通过beanName获取定时任务类，调用该类的启动停止方法；</li><li>定时任务管理中心查询zookeeper展示全局注册的定时任务，提供启动停止操作对定时任务进行控制；</li><li>定时任务分为全局唯一定时任务和非唯一定时任务。</li></ul><h4 id="3-2-功能原理"><a href="#3-2-功能原理" class="headerlink" title="3.2 功能原理"></a>3.2 功能原理</h4><p><img src="/images/sq/task_yuanli.png" alt="Image text"></p><h4 id="3-3-效果图"><a href="#3-3-效果图" class="headerlink" title="3.3 效果图"></a>3.3 效果图</h4><p><img src="/images/sq/task1.png" alt="Image text"><br><img src="/images/sq/task2.png" alt="Image text"></p><h4 id="3-4-部分源码"><a href="#3-4-部分源码" class="headerlink" title="3.4 部分源码"></a>3.4 部分源码</h4><ul><li>获取定时任务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfter</span><span class="params">(Object bean, String beanName)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; targetClass = AopUtils.getTargetClass(bean);</span><br><span class="line">    Map&lt;Method, Set&lt;Scheduled&gt;&gt; annotatedMethods = MethodIntrospector.selectMethods(targetClass,</span><br><span class="line">            <span class="keyword">new</span> MethodIntrospector.MetadataLookup&lt;Set&lt;Scheduled&gt;&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Set&lt;Scheduled&gt; <span class="title">inspect</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">                    Set&lt;Scheduled&gt; scheduledMethods = AnnotatedElementUtils.getMergedRepeatableAnnotations(method,</span><br><span class="line">                            Scheduled.class, Schedules.class);</span><br><span class="line">                    <span class="keyword">return</span> (!scheduledMethods.isEmpty() ? scheduledMethods : <span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="keyword">if</span> (!annotatedMethods.isEmpty()) &#123;</span><br><span class="line">        String className = targetClass.getName();</span><br><span class="line">        className = SpringBeanUtil.getNormalClassName(className);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Method, Set&lt;Scheduled&gt;&gt; entry : annotatedMethods.entrySet()) &#123;</span><br><span class="line">            Method method = entry.getKey();</span><br><span class="line">            <span class="keyword">for</span> (Scheduled scheduled : entry.getValue()) &#123;</span><br><span class="line">                String key = className + <span class="string">":"</span> + method.getName();</span><br><span class="line">                Map&lt;String, String&gt; scheduledMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">                scheduledMap.put(<span class="string">"className"</span>, className);</span><br><span class="line">                scheduledMap.put(<span class="string">"methodName"</span>, method.getName());</span><br><span class="line">                scheduledMap.put(<span class="string">"beanName"</span>, beanName);</span><br><span class="line">                scheduledMap.put(<span class="string">"scheduled"</span>, scheduled.toString());</span><br><span class="line">                taskInfos.put(key, scheduledMap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AbstractScheduledTask</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractScheduledTask</span> <span class="keyword">implements</span> <span class="title">AbstractScheduledTaskInter</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> scheduledTaskStatus = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">startScheduledTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    scheduledTaskStatus = <span class="keyword">true</span>;</span><br><span class="line">    updateRegisterTaskStatus(scheduledTaskStatus);</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(scheduledTaskStatus);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">stopScheduledTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    scheduledTaskStatus = <span class="keyword">false</span>;</span><br><span class="line">    updateRegisterTaskStatus(scheduledTaskStatus);</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(scheduledTaskStatus);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateRegisterTaskStatus</span><span class="params">(<span class="keyword">boolean</span> status)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String className = <span class="keyword">this</span>.getClass().getName();</span><br><span class="line">        className=SpringBeanUtil.getNormalClassName(className);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">        LOGGER.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> isRegister = <span class="keyword">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRegister</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isRegister) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduledTaskController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isRegister()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (scheduledTaskStatus) &#123;</span><br><span class="line">            scheduledTaskHandler();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">scheduledTaskHandler</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具备启停能力</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskScheduledController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/start_scheduled_task"</span>, produces = <span class="string">"application/json;charset=UTF-8"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">start</span><span class="params">(@RequestParam()</span> String beanName) </span>&#123;</span><br><span class="line">        AbstractScheduledTaskInter scheduledTask = SpringBeanUtil.getBean(beanName);</span><br><span class="line">        <span class="keyword">return</span> scheduledTask.startScheduledTask();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/stop_scheduled_task"</span>, produces = <span class="string">"application/json;charset=UTF-8"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">stop</span><span class="params">(@RequestParam()</span> String beanName) </span>&#123;</span><br><span class="line">        AbstractScheduledTaskInter scheduledTask = SpringBeanUtil.getBean(beanName);</span><br><span class="line">        <span class="keyword">return</span> scheduledTask.stopScheduledTask();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-全局热备锁"><a href="#四-全局热备锁" class="headerlink" title="四.全局热备锁"></a>四.全局热备锁</h3><p>无论定时任务还是普通跑批任务，我们需要对这些任务实现热备，以便在单点故障时任务依然可以顺利的执行。</p><h4 id="4-1-实现机制"><a href="#4-1-实现机制" class="headerlink" title="4.1 实现机制"></a>4.1 实现机制</h4><ul><li>全局热备锁包括普通任务（例如监听rabbitmq消息）和定时任务；</li><li>任务以applicationName和className标识唯一，任务启动时把相关信息注册到zookeeper；</li><li>其他节点的任务启动时发现已经有任务运行，则监听zookeeper；</li><li>运行任务停止后，其它节点根据监听状态启动自身任务；</li><li>定时任务和普通任务不同，定时任务需要注册非运行节点，并对子节点数目变化和子节点数据变化都做监听。</li></ul><h4 id="4-2-功能原理"><a href="#4-2-功能原理" class="headerlink" title="4.2 功能原理"></a>4.2 功能原理</h4><p><img src="/images/sq/lock_yuanli.png" alt="Image text"></p><h4 id="4-3-效果图"><a href="#4-3-效果图" class="headerlink" title="4.3 效果图"></a>4.3 效果图</h4><p><img src="/images/sq/lock1.png" alt="Image text"></p><h4 id="4-4-部分源码"><a href="#4-4-部分源码" class="headerlink" title="4.4 部分源码"></a>4.4 部分源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractGlobalLockTask</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(<span class="keyword">final</span> String... strings)</span> </span>&#123;</span><br><span class="line">        String className = getClass().getName();</span><br><span class="line">        className = SpringBeanUtil.getNormalClassName(className);</span><br><span class="line">        <span class="keyword">final</span> String alarmConfigPath = SKYTRAIN_GlOBAL_LOCK_TASK_PREFIX + applicationName + <span class="string">":"</span> + className;</span><br><span class="line">        <span class="keyword">boolean</span> exists = zooKeeperExecutor.isExists(alarmConfigPath);</span><br><span class="line">        <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">            JSONObject info = <span class="keyword">new</span> JSONObject();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                info.put(<span class="string">"applicationName"</span>, applicationName);</span><br><span class="line">                info.put(<span class="string">"className"</span>, className);</span><br><span class="line">                info.put(<span class="string">"ip"</span>, ipAddress);</span><br><span class="line">                info.put(<span class="string">"port"</span>, serverPort);</span><br><span class="line">                info.put(<span class="string">"date"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">                LOGGER.error(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            createGlobalLockNode(alarmConfigPath, info.toString(), strings);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                zooKeeperExecutor.getZooKeeper().exists(alarmConfigPath, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class="line">                        LOGGER.info(<span class="string">"事件类型"</span> + watchedEvent.getType() + <span class="string">"，路径"</span> + watchedEvent.getPath());</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            register(strings);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            LOGGER.error(<span class="string">""</span>, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">                LOGGER.error(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                LOGGER.error(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createGlobalLockNode</span><span class="params">(String path, String value, String... strings)</span> </span>&#123;</span><br><span class="line">        zooKeeperExecutor.createZKNode(path, value);</span><br><span class="line">        handler(strings);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        register(strings);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(String... strings)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>作者：宜信-技术研发中心-高级架构师-梁鑫</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:本文由&lt;code&gt;宜信-技术研发中心-高级架构师-梁鑫&lt;/code&gt;投稿分享。投&lt;code&gt;稿请加微信Software_King&lt;/code&gt;,之前分享了一下我在公司项目中搭建Spring Cloud框架的经验，在此基础之上，为了更好的满足业务功能需求和便捷运维的需要，我们开发了几个基于springcloud的微服务组件，在此做个总结跟大家共同探讨一下。&lt;/p&gt;
    
    </summary>
    
      <category term="社区" scheme="http://xujin.org/categories/%E7%A4%BE%E5%8C%BA/"/>
    
    
      <category term="Spring Cloud" scheme="http://xujin.org/tags/Spring-Cloud/"/>
    
      <category term="Spring Cloud自研组件" scheme="http://xujin.org/tags/Spring-Cloud%E8%87%AA%E7%A0%94%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>走进Spring Cloud CodeGen上篇</title>
    <link href="http://xujin.org/ex/sc-codegen/"/>
    <id>http://xujin.org/ex/sc-codegen/</id>
    <published>2017-12-13T06:00:00.000Z</published>
    <updated>2019-01-13T05:21:29.532Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>:本文主要介绍由<code>Spring Cloud中国社区发起</code>的以<code>Spring Cloud为主</code>的代码生成器，目的是<code>快速，按需勾选，生成最优实践的Spring Cloud工程</code>。欢迎有想法的<code>小伙伴加入Spring Cloud中国社区开源战队</code>，关于代码生成器和spring-cloud-codegen的设计细节后面将有一系列的文章介绍。</p><a id="more"></a><h2 id="一-Spring-Cloud-CodeGen概述"><a href="#一-Spring-Cloud-CodeGen概述" class="headerlink" title="一.Spring Cloud CodeGen概述"></a>一.Spring Cloud CodeGen概述</h2><h3 id="1-1-为什么要开发Spring-Cloud-CodeGen"><a href="#1-1-为什么要开发Spring-Cloud-CodeGen" class="headerlink" title="1.1 为什么要开发Spring Cloud CodeGen"></a>1.1 为什么要开发Spring Cloud CodeGen</h3><p>  如何生成项目的代码？ 不少开发人员都会使用Maven的Archetype或IDEA的Gradle插件，通过几个简单的交互就可以快速完成项目的结构和对应的代码生成。但是Spring官方也给我们提供了<a href="http://start.spring.io" target="_blank" rel="noopener">http://start.spring.io</a> 生成，道理很简单：UI可视化，选择项多，更新快。但是例如:application.properties文件的生成,<code>官方是不会生成对应的配置项的</code> 因此也有不少公司对其进行代码增强处理二次开发处理。</p><hr><p>根据目前社区和现在使用代码生成器的现状，迫切希望打造一个如下的代码生成器:</p><ul><li>业界最佳Spring Cloud微服务实战经验打造最佳代码生成模板</li><li>容器化/Docker支持： 根据你选择的dependency，自动生成docker-compose.yml文件，如选择mysql，redis等，会在docker-compse.yml自动添加对应的镜像配置，方便使用docker compose进行环境配置和组件编排。</li><li>application.properties文件生成： <code>官方是不会生成对应的配置项的</code>，但是我们将会结合Spring Cloud的最优实践配置，不仅如此我们将会集成市面上口碑最好的中间件给出最优配置。</li><li>规范：pom.xml的规范，application.properties的规范等，提供默认配置，只需要稍微调整一下或者不需要任何调整就可以使用。</li><li>其他标准文件的规范：.gitignore, logback-spring.xml等。 如果你选择mybatis会自动生成mybatis-config.xml文件等。</li><li>持续集成：自动生成 .gitlab-ci.yml 文件，自动集成 Gitlab CI</li></ul><p>基于如上原因和愿景,因此我们需要开发一个最优Spring Cloud实践的代码生成器。</p><h3 id="1-2-Spring-Cloud-CodeGen概述"><a href="#1-2-Spring-Cloud-CodeGen概述" class="headerlink" title="1.2 Spring Cloud CodeGen概述"></a>1.2 Spring Cloud CodeGen概述</h3><p><code>spring-cloud-codegen</code>是由<code>Spring Cloud中国社区</code>发起的一个代码生成器开源项目，目前该开源项目由<code>许进，任浩军，李云龙，刘美胜奇</code>持续开发迭代。基于Freemarker+模板文件的代码生成器，可以按需勾选组件，轻松快速实现对框架代码的一键创建（例如业务部门实现对基础架构部提供的框架快速搭建），实现对Spring Cloud的最优实践和配置工具化和规范化。</p><h3 id="1-3-功能"><a href="#1-3-功能" class="headerlink" title="1.3 功能"></a>1.3 功能</h3><p>最终功能包含如下，包括屏蔽XXX注解和配置</p><ul><li>generate app structure   ——&gt;状态doing</li><li>generate java code and resources ——&gt;状态todo</li><li>generate docker-compose.yml  ——&gt;状态todo</li><li>generate .gitlab-ci.yml  ——&gt;状态todo</li><li>generate DDD structure  ——&gt;状态todo</li></ul><h2 id="二-走进Spring-Cloud-CodeGen"><a href="#二-走进Spring-Cloud-CodeGen" class="headerlink" title="二.走进Spring Cloud CodeGen"></a>二.走进Spring Cloud CodeGen</h2><h3 id="2-1-项目介绍"><a href="#2-1-项目介绍" class="headerlink" title="2.1 项目介绍"></a>2.1 项目介绍</h3><p><img src="/images/mw/project-ml.png" width="320px" height="350px"></p><p>项目Demo地址:<a href="http://start.springcloud.cn/" target="_blank" rel="noopener">http://start.springcloud.cn/</a><br>项目开发人员:<a href="http://www.xujin.org" target="_blank" rel="noopener">许进</a>,<a href="http://www.nepxion.com/" target="_blank" rel="noopener">任浩军</a>,<a href="http://www.liumapp.com" target="_blank" rel="noopener">刘美胜奇</a>,<a href="#">李云龙</a><br>github地址:<br><a href="https://github.com/springcloud/spring-cloud-codegen" target="_blank" rel="noopener">https://github.com/springcloud/spring-cloud-codegen</a><br><a href="https://github.com/springcloud/spring-cloud-skeleton" target="_blank" rel="noopener">https://github.com/springcloud/spring-cloud-skeleton</a></p><h3 id="2-2-项目技术选型"><a href="#2-2-项目技术选型" class="headerlink" title="2.2 项目技术选型"></a>2.2 项目技术选型</h3><p>Spring Boot+Spring MVC+FreeMarker+Vue</p><h3 id="2-3-代码生成器配置"><a href="#2-3-代码生成器配置" class="headerlink" title="2.3 代码生成器配置"></a>2.3 代码生成器配置</h3><p>1.skeleton-data.properties<br>   用来描述模板文件的全局配置值，里面的值替换模板文件里的动态变量(用${}表示)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># ---------- 工程配置 ----------</span><br><span class="line"># moduleName=sales-project</span><br><span class="line">moduleName=sales</span><br><span class="line">basePackage=cn.springcloud</span><br><span class="line">pomGroupId=cn.springcloud</span><br><span class="line">pomArtifactId=sales</span><br><span class="line">pomName=springcloud sales</span><br><span class="line">pomVersion=1.0.0</span><br><span class="line">springCloudVersion=Dalston.SR4</span><br><span class="line">springBootVersion=1.5.6.RELEASE</span><br><span class="line">javaVersion=1.8</span><br><span class="line"></span><br><span class="line"># ---------- 框架配置 ----------</span><br><span class="line">serviceName=spring-cloud-sales</span><br><span class="line">port=2222</span><br><span class="line">eurekaEnabled=true</span><br><span class="line">eurekaUrl=http://localhost:1111/eureka/</span><br></pre></td></tr></table></figure></p><ol><li>skeleton-description.xml</li></ol><p><img src="/images/mw/code-gen.png" width="520px" height="650px"></p><p>   如上图所示，用来描述模界面驱动和渲染的组件，分为Group和Entity结构，一个Group包含多个Entity，其他属性比较容易理解，主要介绍如下<br>   highlightable - 标识为高亮项，一般组件渲染成高亮方式，例如Label红色字体，提示使用者着重关注<br>   defaultable - 标识为默认项，一般组件渲染成默认项方式，提示使用者可以不修改对应值<br>   emptiable - 标识为留空项，一般组件渲染成留空项方式，提示使用者对应值可以为空<br>   editable - 标识为不可编辑项，一般组件渲染成不可编辑项方式，如果false则把组件灰掉，提示使用者对应值不可编辑</p><p>示例Demo数据如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">skeleton</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 工程基本配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>basic<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>pomGroupId<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Group<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>TEXTFIELD<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>pomArtifactId<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Artifact<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>TEXTFIELD<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>moduleName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>工程模块名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span>moduleName<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">note</span>&gt;</span>【必改项】首字母必须小写，中间只允许出现“-”<span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>TEXTFIELD<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>basePackage<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>上层包路径<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span>basePackage<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">note</span>&gt;</span>【必改项】该路径会作为所有Java代码的上层路径。moduleName、basePackage和projectType三者组合起来解析出相关目录和结构规则，例如moduleName=payment-ccb，basePackage=com.nepxion，projectType=server，那么工程名为payment-ccb-server，类路径为com.nepxion.payment.ccb.server</span><br><span class="line">            <span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>TEXTFIELD<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>javaVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Java Version<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>COMBOBOX<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">options</span>&gt;</span>1.8;1.7;1.6<span class="tag">&lt;/<span class="name">options</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 是否Docker化 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>docker-template<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Docker模板<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO_GROUP<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>HORIZONTAL<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>true<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>是<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>false<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>否<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 应用类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>appType<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>应用类型<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO_GROUP<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>HORIZONTAL<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>Spring Boot<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Spring Boot<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>Spring Cloud<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Spring Cloud<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">note</span>&gt;</span>Spring Cloud应用<span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>war<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>war应用<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud独立部署组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>sc-alone<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Spring Cloud<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO_GROUP<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>HORIZONTAL<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>独立组件<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>独立组件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>service-provider<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>服务提供者<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>service-consumer<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>服务消费者<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- web基础框架 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>basic-framework<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>基础框架<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>基础框架-1<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>CHECKBOX_GROUP<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>HORIZONTAL<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>spring-mvc<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Spring MVC<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring MVC<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>CHECKBOX<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>Mybatis<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Mybatis<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span>Mybatis<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>CHECKBOX<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud独立部署单选组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>sc-alone-radio<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>独立组件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO_GROUP<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>HORIZONTAL<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Eureka Server<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>zuul-server<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Zuul Server<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>sc-gateway<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>SC Gateway<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>config-server<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Config Server<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>zipkin-server<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Zipkin Server<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>RADIO<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud可组合多选组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>sc-group-checkBox<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>可组合组件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Cloud组件<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>CHECKBOX_GROUP<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>HORIZONTAL<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>fegin<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Fegin<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring MVC<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>CHECKBOX<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>hystrix<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>hystrix<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span>hystrix<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>CHECKBOX<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>ribbon<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>Ribbon<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span>Ribbon<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>CHECKBOX<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">highlightable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">highlightable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">emptiable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">emptiable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">editable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">editable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">skeleton</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-Spring-cloud-CodeGen开发接口"><a href="#2-4-Spring-cloud-CodeGen开发接口" class="headerlink" title="2.4 Spring-cloud-CodeGen开发接口"></a>2.4 Spring-cloud-CodeGen开发接口</h3><p>根据配置文件进行界面驱动的元数据接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/getMetaData"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SkeletonGroup&gt; <span class="title">getMetaData</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>返回JSON格式的文件，简单介绍一下格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"basic"</span>,</span><br><span class="line">        <span class="attr">"label"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"NORMAL_GROUP"</span>,</span><br><span class="line">        <span class="attr">"layoutType"</span>: <span class="string">"VERTICAL"</span>,</span><br><span class="line">        <span class="attr">"entityList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"pomGroupId"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Group"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="string">"cn.springcloud"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"TEXTFIELD"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"pomArtifactId"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Artifact"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="string">"sales"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"TEXTFIELD"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"moduleName"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"工程模块名"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"moduleName"</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="string">"【必改项】首字母必须小写，中间只允许出现“-”"</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="string">"sales"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"TEXTFIELD"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"basePackage"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"上层包路径"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"basePackage"</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="string">"【必改项】该路径会作为所有Java代码的上层路径。moduleName、basePackage和projectType三者组合起来解析出相关目录和结构规则，例如moduleName=payment-ccb，basePackage=com.nepxion，projectType=server，那么工程名为payment-ccb-server，类路径为com.nepxion.payment.ccb.server"</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="string">"cn.springcloud"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"TEXTFIELD"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"javaVersion"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Java Version"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="string">"1.8"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"COMBOBOX"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: [</span><br><span class="line">                    <span class="string">"1.8"</span>,</span><br><span class="line">                    <span class="string">"1.7"</span>,</span><br><span class="line">                    <span class="string">"1.6"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"docker-template"</span>,</span><br><span class="line">        <span class="attr">"label"</span>: <span class="string">"Docker模板"</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"RADIO_GROUP"</span>,</span><br><span class="line">        <span class="attr">"layoutType"</span>: <span class="string">"HORIZONTAL"</span>,</span><br><span class="line">        <span class="attr">"entityList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"true"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"是"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"false"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"否"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"appType"</span>,</span><br><span class="line">        <span class="attr">"label"</span>: <span class="string">"应用类型"</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"RADIO_GROUP"</span>,</span><br><span class="line">        <span class="attr">"layoutType"</span>: <span class="string">"HORIZONTAL"</span>,</span><br><span class="line">        <span class="attr">"entityList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"Spring Boot"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Spring Boot"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"Spring Cloud"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Spring Cloud"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="string">"Spring Cloud应用"</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"war"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"war应用"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"sc-alone"</span>,</span><br><span class="line">        <span class="attr">"label"</span>: <span class="string">"Spring Cloud"</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"RADIO_GROUP"</span>,</span><br><span class="line">        <span class="attr">"layoutType"</span>: <span class="string">"HORIZONTAL"</span>,</span><br><span class="line">        <span class="attr">"entityList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"独立组件"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"独立组件"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"service-provider"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"服务提供者"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"service-consumer"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"服务消费者"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"basic-framework"</span>,</span><br><span class="line">        <span class="attr">"label"</span>: <span class="string">"基础框架"</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"基础框架-1"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"CHECKBOX_GROUP"</span>,</span><br><span class="line">        <span class="attr">"layoutType"</span>: <span class="string">"HORIZONTAL"</span>,</span><br><span class="line">        <span class="attr">"entityList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"spring-mvc"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Spring MVC"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"Spring MVC"</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"CHECKBOX"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"Mybatis"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Mybatis"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"Mybatis"</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"CHECKBOX"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"sc-alone-radio"</span>,</span><br><span class="line">        <span class="attr">"label"</span>: <span class="string">"独立组件"</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"RADIO_GROUP"</span>,</span><br><span class="line">        <span class="attr">"layoutType"</span>: <span class="string">"HORIZONTAL"</span>,</span><br><span class="line">        <span class="attr">"entityList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"eureka-server"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Eureka Server"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"zuul-server"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Zuul Server"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"sc-gateway"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"SC Gateway"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"config-server"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Config Server"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"zipkin-server"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Zipkin Server"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"RADIO"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"sc-group-checkBox"</span>,</span><br><span class="line">        <span class="attr">"label"</span>: <span class="string">"可组合组件"</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"Spring Cloud组件"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"CHECKBOX_GROUP"</span>,</span><br><span class="line">        <span class="attr">"layoutType"</span>: <span class="string">"HORIZONTAL"</span>,</span><br><span class="line">        <span class="attr">"entityList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"fegin"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Fegin"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"Spring MVC"</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"CHECKBOX"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"hystrix"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"hystrix"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"hystrix"</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"CHECKBOX"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"ribbon"</span>,</span><br><span class="line">                <span class="attr">"label"</span>: <span class="string">"Ribbon"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"Ribbon"</span>,</span><br><span class="line">                <span class="attr">"note"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"CHECKBOX"</span>,</span><br><span class="line">                <span class="attr">"options"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"highlightable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"defaultable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"emptiable"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"editable"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>下载脚手架Zip文件的接口，返回Zip文件的byte数组类型，Body的内容为src\main\resources\config\skeleton-data.properties </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/downloadBytes"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] downloadBytes(<span class="meta">@RequestBody</span> String config)</span><br></pre></td></tr></table></figure><p>下载脚手架Zip文件的接口，返回Zip文件的ResponseEntity类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/downloadResponse"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Resource&gt; <span class="title">downloadResponse</span><span class="params">(@RequestBody String config)</span></span></span><br></pre></td></tr></table></figure><h3 id="2-5-前端运行"><a href="#2-5-前端运行" class="headerlink" title="2.5 前端运行"></a>2.5 前端运行</h3><p>spring-cloud-codegen-ui采用Vue开发，本地开发调试，采用如下命令安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># install dependencies</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"># serve with hot reload at localhost:8081</span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"># build for production with minification</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:本文主要介绍由&lt;code&gt;Spring Cloud中国社区发起&lt;/code&gt;的以&lt;code&gt;Spring Cloud为主&lt;/code&gt;的代码生成器，目的是&lt;code&gt;快速，按需勾选，生成最优实践的Spring Cloud工程&lt;/code&gt;。欢迎有想法的&lt;code&gt;小伙伴加入Spring Cloud中国社区开源战队&lt;/code&gt;，关于代码生成器和spring-cloud-codegen的设计细节后面将有一系列的文章介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="项目经验" scheme="http://xujin.org/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="项目经验" scheme="http://xujin.org/tags/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="Spring Cloud" scheme="http://xujin.org/tags/Spring-Cloud/"/>
    
      <category term="代码生成器" scheme="http://xujin.org/tags/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Spring initializr源码工程解析</title>
    <link href="http://xujin.org/ex/spring-initializr/"/>
    <id>http://xujin.org/ex/spring-initializr/</id>
    <published>2017-12-09T06:00:00.000Z</published>
    <updated>2019-01-13T05:19:01.346Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Spring-initializr"><a href="#什么是Spring-initializr" class="headerlink" title="什么是Spring initializr"></a>什么是Spring initializr</h2><h3 id="什么是Spring-initializr-1"><a href="#什么是Spring-initializr-1" class="headerlink" title="什么是Spring initializr"></a>什么是Spring initializr</h3><p>initializr是Spring提供的一个快速根据按需生成带有Spring风格的工程的代码生成器。<br>代码地址:<a href="https://github.com/spring-io/initializr/" target="_blank" rel="noopener">https://github.com/spring-io/initializr/</a><br>在线地址:<a href="https://start.spring.io" target="_blank" rel="noopener">https://start.spring.io</a></p><a id="more"></a><h3 id="工程目录解读"><a href="#工程目录解读" class="headerlink" title="工程目录解读"></a>工程目录解读</h3><table><thead><tr><th>模块名</th><th>说明</th></tr></thead><tbody><tr><td>initializr-actuator</td><td>可选模块，提供统计数据和指标</td></tr><tr><td>initializr-docs</td><td>文档</td></tr><tr><td>initializr-generator</td><td>单独的生成类库，核心模块，可以引入自己的代码生成器工程中</td></tr><tr><td>initializr-service</td><td>Spring Boot的主入口应用工程</td></tr><tr><td>initializr-web</td><td>REST端点和web接口，主要是Controller类</td></tr></tbody></table><blockquote><p>未完待续</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Spring-initializr&quot;&gt;&lt;a href=&quot;#什么是Spring-initializr&quot; class=&quot;headerlink&quot; title=&quot;什么是Spring initializr&quot;&gt;&lt;/a&gt;什么是Spring initializr&lt;/h2&gt;&lt;h3 id=&quot;什么是Spring-initializr-1&quot;&gt;&lt;a href=&quot;#什么是Spring-initializr-1&quot; class=&quot;headerlink&quot; title=&quot;什么是Spring initializr&quot;&gt;&lt;/a&gt;什么是Spring initializr&lt;/h3&gt;&lt;p&gt;initializr是Spring提供的一个快速根据按需生成带有Spring风格的工程的代码生成器。&lt;br&gt;代码地址:&lt;a href=&quot;https://github.com/spring-io/initializr/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/spring-io/initializr/&lt;/a&gt;&lt;br&gt;在线地址:&lt;a href=&quot;https://start.spring.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://start.spring.io&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="项目经验" scheme="http://xujin.org/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Java" scheme="http://xujin.org/tags/Java/"/>
    
      <category term="项目经验" scheme="http://xujin.org/tags/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
</feed>
